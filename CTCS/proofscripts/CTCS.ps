#This file, script.txt, was produced the BLESS Proof Assistant v3.1
#  at Thu May 05 23:12:43 AST 2022 by ehsanahmad
#  You chose proof script: /Users/ehsanahmad/git/BLESS-models/CTCS/proofscripts/CTCS.ps
#MovAuth::Controller.impl
#[serial 1003] <<M(MFR)>> -> <<I>> from invariant I when complete state MFR has Assertion <<M(MFR)>> in its definition
make-an
axioms
#[serial 1004] <<M(GMA)>> -> <<I>> from invariant I when complete state GMA has Assertion <<M(GMA)>> in its definition.
axioms
#[serial 1005] <<M(SBI)>> -> <<I>> from invariant I when complete state SBI has Assertion <<M(SBI)>> in its definition.
axioms
#[serial 1006] <<M(EBI)>> -> <<I>> from invariant I when complete state EBI has Assertion <<M(EBI)>> in its definition.
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state READY, <<M(READY)>> -> <<e1 or e2 or . . . en>>
replace<>
normalize
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state CEB, <<M(CEB)>> -> <<e1 or e2 or . . . en>>
normalize
replace<>
normalize
laws
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state CSB, <<M(CSB)>> -> <<e1 or e2 or . . . en>>
normalize
laws
DeMorgan
normalize
laws
normalize
cnf
laws
normalize
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state CMA, <<M(CMA)>> -> <<e1 or e2 or . . . en>>
replace<>
normalize
cnf
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state RETRY, <<M(RETRY)>> -> <<e1 or e2 or . . . en>>
replace<>
normalize
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state CMF, <<M(CMF)>> -> <<e1 or e2 or . . . en>>
normalize
cnf
laws
normalize
axioms
#[serial 1013]  <<M(READY) and x>> A <<M(GMA)>> for T0_Go:READY-[x]->GMA{A};
reduce
axioms
atomic
normalize
axioms
#[serial 1014]  <<M(READY) and x>> -> <<M(FAIL)>> for T0_Fail:READY-[x]->FAIL{};
axioms
#[serial 1015]  <<M(GMA) and x>> -> <<M(CMA)>> for T1_MA_Check:GMA-[x]->CMA{};
axioms
#[serial 1016]  <<M(CMA) and x>> -> <<M(RETRY)>> for T9_MA_NotOk:CMA-[x]->RETRY{};
axioms
#[serial 1017]  <<M(RETRY) and x>> A <<M(GMA)>> for T10_MA_Retry:RETRY-[x]->GMA{A};
reduce
atomic
normalize
axioms
#[serial 1018]  <<M(RETRY) and x>> -> <<M(FAIL)>> for T10_Retry_Fail:RETRY-[x]->FAIL{};
axioms
#[serial 1019]  <<M(CMA) and x>> A <<M(MFR)>> for T2_MA_Ok:CMA-[x]->MFR{A};
reduce
normalize
push
#MovAuth::Controller.impl
#[serial 1128]   normalization of [serial 1120
make-an
axioms
#[serial 1130]   normalization of [serial 1121]
alldist^
axioms
#[serial 1132]   normalization of [serial 1122]
atomic
normalize
axioms
#[serial 1134]   normalization of [serial 1123]
atomic
laws
axioms
#[serial 1136]   normalization of [serial 1124]
atomic
guided-sub-equals[i]
laws
axioms
#[serial 1138]   normalization of [serial 1125]
atomic
split-post
axioms
guided-sub-equals[i]
normalize
laws
axioms
#[serial 1140]   normalization of [serial 1126]
alldist^
atomic
axioms
#[serial 1020]  <<M(CMA) and x>> -> <<M(FAIL)>> for T2_MA_Fail:CMA-[x]->FAIL{};
axioms
#[serial 1021]  <<M(MFR) and x>> -> <<M(CMF)>> for T3_Move_Check:MFR-[x]->CMF{};
axioms
#[serial 1022]  <<M(CMF) and x>> A <<M(SBI)>> for T4_SBI_Point:CMF-[x]->SBI{A};
normalize
reduce
axioms
push
#MovAuth::Controller.impl
#[serial 1192] <<P>> -> <<P1>> in sequential composition for [serial 1190
make-an
laws
axioms
#[serial 1194] <<P0>> S0 <<Q0 and P1>> in sequential composition for [serial 1190]
atomic
normalize
laws
axioms
substitute-post
normalize
axioms
#[serial 1195] <<Q0 and P1>> S1 <<Q1>> in sequential composition for [serial 1190]
alldist^
atomic
axioms
#[serial 1023]  <<M(CMF) and x>> A <<M(MFR)>> for T5_Move_Ok:CMF-[x]->MFR{A};
reduce
reduce
reduce
reduce
normalize
laws
normalize
axioms
push
#MovAuth::Controller.impl
#[serial 1247]   normalization of [serial 1232
make-an
atomic
normalize
axioms
#[serial 1249]   normalization of [serial 1233]
atomic
laws
axioms
#[serial 1251]   normalization of [serial 1234]
atomic
laws
axioms
#[serial 1253]   normalization of [serial 1235]
atomic
normalize
axioms
laws
axioms
#[serial 1257]   normalization of [serial 1227]
atomic
axioms
#[serial 1261]   normalization of [serial 1223]
alldist^
atomic
axioms
#[serial 1275] Associativity: (b.c).a = a.b.c [serial 1237]
substitute-post
normalize
axioms
#[serial 1290]   normalization of [serial 1276]
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1024]  <<M(SBI) and x>> -> <<M(CSB)>> for T6_BI_Check:SBI-[x]->CSB{};
normalize
axioms
#[serial 1025]  <<M(CSB) and x>> A <<M(MFR)>> for T7_SBI_Out:CSB-[x]->MFR{A};
reduce
normalize
laws
axioms
alldist^
atomic
axioms
laws
axioms
substitute-post
normalize
axioms
#[serial 1026]  <<M(CSB) and x>> -> <<M(SBI)>> for T8_SBI_Ok:CSB-[x]->SBI{};
reduce
normalize
alldist^
axioms
atomic
axioms
#[serial 1027]  <<M(EBI) and x>> -> <<M(CEB)>> for T11_Check_EBI:EBI-[x]->CEB{};
axioms
#[serial 1028]  <<M(CEB) and x>> -> <<M(EBI)>> for T14_EBI_Still:CEB-[x]->EBI{};
normalize
axioms
#[serial 1029]  <<M(CEB) and x>> -> <<M(STOP)>> for T12_Stop:CEB-[x]->STOP{};
axioms
#[serial 1030]  <<M(CSB) and x>> -> <<M(EBI)>> for T13_EBI_Point:CSB-[x]->EBI{};
normalize
axioms
#[serial 1031] Composition of Subcomponents via Directional Connection sensor.s -> controller.Controller.s:
axioms
#[serial 1032] Composition of Subcomponents via Directional Connection sensor.v -> controller.Controller.v:
axioms
#[serial 1033] Composition of Subcomponents via Directional Connection rbc.ea -> train.controller.Controller.ea:
axioms
#[serial 1033] Composition of Subcomponents via Directional Connection rbc.m -> train.controller.Controller.m:
axioms
#Q.E.D.
