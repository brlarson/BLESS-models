package MovAuth
public
	with ma_types, ma_properties, BLESS;

system sysMovAuth
	
end sysMovAuth;
system implementation sysMovAuth.impl
	
end sysMovAuth.impl;
-----Train abstract component---------
abstract Train
  features
   
    ts : out data port ma_types::Position ; --{BLESS::Assertion=> "<<:=POSITION>>";};
    tv : out data port ma_types::Velocity ; --{BLESS::Assertion=> "<<:=VELOCITY>>";};
 	ta : in data port ma_types::Acceleration ; 
 
 end Train;

abstract implementation Train.impl
annex hybrid{**
	
  variables
   ts : CTCS_Types::Position -- train position
   tv : CTCS_Types::Velocity -- train velocity
   ta : CTCS_Types::Acceleration --train acceleration
   t : CTCS_Types::Time     -- train clock time
  constants
   b = 1 mpss    --maximum deceleration of the train, assumed as 1 mpss
  behavior
   Train ::= 'DT 1 ts = tv' & 'DT 1 tv = ta' & 'DT 1 t = 1'
             [[> ts!(ts), tv!(tv),ta?(ta) ]]> Continue
   Continue ::= skip
   RunningTrain ::= ts:= 0 & tv:=0 & ta:=0 & REPEAT(Train)
**};
end Train.impl;

-----Controller process and thread----
process pController
features
ps: in data port ma_types::Position; 
pv: in data port ma_types::Velocity; 
pa : out data port  ma_types::Acceleration;     --check - {BLESS::Assertion=> "<<TDELAY()>>";};
pr: out event port ; --check - {BLESS::Assertion=> "<<s=0 or s>=iSeg.e>>";};  --make sure iSeg must be the second last segment here, req has EOA
pea: in data port ma_types::EOA;
pm: in event data port ma_types::MovementAuthority; --check - {BLESS::Assertion=> "<<CHECKV1()>>";} ;
--pmsg : out event data port  CTCS_Types::DMI_Message;
end pController;

process implementation pController.impl
	subcomponents
		Controller: thread Controller.impl;
	connections
		conn_s: port ps -> Controller.cs;
		conn_v: port pv -> Controller.cv;
		conn_a: port Controller.ca -> pa;
		conn_req: port Controller.r -> pr;
		conn_ma: port pm -> Controller.m;
		conn_ea: port pea -> Controller.ea;
		
	
end pController.impl;

--------------Controller Thread----------
thread Controller
	features
		r: out event port {BLESS::Assertion=> "<<(s = 0) or (s >= (eoa - SR))>>";};  -- requesition for new MA
		m: in event data port ma_types::MovementAuthority {BLESS::Value=> "<<:=IMA>>";};  -- current MA... why ghost variables
		ea: in data port ma_types:: EOA  {BLESS::Value=> "<<:=EOA>>";}; -- EoA end of the las segment
		cs: in data port ma_types::Position {BLESS::Value=> "<<:=POSITION>>";}; --current position
		cv: in data port ma_types::Velocity {BLESS::Value=> "<<:=VELOCITY>>";}; --current velocity
		ca: out data port ma_types:: Acceleration {BLESS::Value=> "<<:=TRAIN_XL()>>";}; --current acceleration
	
	properties
		Dispatch_Protocol => Periodic;
		Period => 200 ms;
end Controller;

thread implementation Controller.impl
	annex BLESS{**
	
	assert
		--B0 is missing
		<< SBL: : s=0 m or v <iSeg.v2 >> -- Service Brake Intervetion, B1
		<< DSPV2: : (s=0 m) or ((v*v+2*b*s) < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e)>> -- Dynamic speed profile for v2, B2
		<<EBL: : v < iSeg.v1>> -- Emergency Brake Intervention, B3
		<<DSPV1: : (s=0 m) or ((v*v+2*e*s) < (nSeg.v1*nSeg.v1) + 2*e*iSeg.e) >> -- Dynamic speed profile for v2, B4
	
		<<TRAIN_XL: returns quantity mpss := [
  		(EBL() or DSPV1() )-> 0,                                 			
  		(not SBL() or not DSPV2() )-> b, 
  		(not EBL() or not DSPV1() )-> e,    --CTCS_Properties::EB_Rate = b   			
  		(SBL() and DSPV2() )-> xl ] >> 
	
	invariant
		<<true>>
	
	variables
			
		i ~ quantity whole := 0  -- segment indexing
		b ~ quantity mpss := #ma_properties::SB_Rate mpss -- deceleration rate when service brake is applied
		e ~ quantity mpss := #ma_properties::EB_Rate mpss -- deceleration rate when emergency brake is applied
		v ~ quantity kph :=0 kph -- velocity
		s ~ quantity m -- position
		eoa ~ quantity m -- end of authority
		xl ~ quantity mpss -- newly computed accelerations
		iMA ~ movementAuthority := null --initial MA
		iSeg ~ segment := null --current segement
		nSeg ~ segment := null --next segment
		SR ~ quantity m -- specific distance from the EoA, to request for new MA
		
	states
		READY: initial state << i=0 and s=0 m >> --an initial state
		GMA: complete state << i=0 and s=0 m >>--Get MA
		CMA: state << i=0 and s=0 m>> -- CheckMA
		RETRY: state << i =0 and s=0 m and iMA=null>> --Retry MA request
		MFR: complete state <<SBL() and DSPV2()>> --Move Forward
		CMF: state <<SBL() and DSPV2()>>--Check Move Forward
		SBI: complete state <<not SBL() or not DSPV2()>> --Service Brake Intervention
		CSB: complete state <<not SBL() or not DSPV2()>>--Check Service Brake
		EBI: complete state << not EBL() or not DSPV1()  >> --Emergency Brake Intevention
		STOP: final state <<(not EBL() or not DSPV1()) and v=0 kph>> --a final state
		
	transitions
		T0_Go: READY -[]-> GMA
			{
				<<i=0 and s= 0 m >> 
				r!
				; <<i=0 and s= 0 m >> 
				|i',s':=i,s| 
				<<i'=0 and s'= 0 m >>
			}
		
		T1_MA_Check: GMA -[on dispatch]-> CMA 
			{
			
			m?(iMA) 
			; <<(i=0) and (s= 0 m ) and (iMA=IMA) >>  
			ea?(eoa)
			<<(i=0) and (s= 0 m ) and (iMA=IMA) >> 
			}
		
		T2_MA_Ok: CMA -[not (iMA=null)]-> MFR
			{
				<< SBL() and DSPV2() >> 
				if(i<(#ma_properties::MASize - 1))~>
				{
					<< SBL() and DSPV2() and i<(#ma_properties::MASize - 1)>>
				iSeg := iMA[i] 
				; <<SBL() and DSPV2() and i<(#ma_properties::MASize - 1) and iSeg=iMA[i]>>
				nSeg := iMA[i+1]
				<< SBL() and DSPV2() and i<(#ma_properties::MASize - 1) and iSeg=iMA[i] and nSeg=iMA[i+1]>>
				}
			[] (i>=#ma_properties::MASize - 1)~>
				<< SBL() and DSPV2() and (i>=#ma_properties::MASize - 1) >>
				skip
				<< SBL() and DSPV2() and (i>=#ma_properties::MASize - 1) >>
			fi
				<< (( i<#ma_properties::MASize - 1 and iSeg=iMA[i] and nSeg=iMA[i+1]) or
				i>=#ma_properties::MASize - 1) and SBL() and DSPV2() >>
				; 
				|iSeg',s',nSeg', v', b' := iSeg, s, nSeg, v, b|
				<< (SBL() and DSPV2())^1 >>
			}
		
		T3_Move_Check: MFR -[on dispatch]-> CMF
			{
			{cs?(s) & cv?(v)};
			if(s>=(eoa-SR))~>
				r!
			
			[] (not (s>= (eoa-SR)) )~>
				skip
			 fi
			}
		
		T4_SBI_Point: CMF -[not (s=0 m or v < iSeg.v2) or
			not (s = 0 m or v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e) ]-> SBI 
			-- nSeg.v2 instead of iMA[i+1], check dynamic speed profile formula. it is square of v2
			{
				 ca!(b)
			}
		-- this is where we are working now
		T5_Move_Ok: CMF -[s=0 m or v < iSeg.v2 or v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e]->	MFR	
			{
				if (s>=iSeg.e and i<#ma_properties::MASize - 1)~>
					{
					i:=i+1; 
					iSeg:=iMA[i]; 
					nSeg:=iMA[i+1];
					ca!(xl)
					}
				[] (not (s>=iSeg.e))~>
					skip	
				fi	
					   
			}
		
--		T6_BI_Check: SBI -[on dispatch]-> CSB
--			{
--				cs?(s) & cv?(v)
--			}
--			
--		T7_SBI_Out: CSB -[(s=0 m or v < iSeg.v2) and 
--			(s=0 m  or v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*s+iSeg.e) ]-> MFR
--			{
--				-- should we check the CBI and EBI states
--				ca!(xl)
--			}
--		
--		T8_SBI_Ok: CSB -[not((s=0 m or v < iSeg.v2) and 
--			(s=0 m or v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e)) ]-> SBI 
--		
		T9_MA_NotOk: CMA -[iMA=null]-> RETRY 
--		
		T10_MA_Retry: RETRY -[]-> GMA 
		  { |i',s' := 0,0| }
--		
--		T11_EBI_Point: CMF -[not (v < iSeg.v1) or not (v*v + 2*e*s < (nSeg.v1*nSeg.v1) + 2*e*iSeg.e)]-> EBI
--		
--		T12_Stop: EBI -[v = 0 kph]-> STOP
--		
--		T13_EBI_Point: SBI -[not (v < iSeg.v1) or not (v*v + 2*b*s < (nSeg.v1*nSeg.v1) +2*e*iSeg.e )]-> EBI

	**};
end Controller.impl;

-----RBC Device----
device RBS
	features
		r: in event port;
		m: out event data port ma_types::MovementAuthority;
		ea: out data port ma_types::EOA;
end RBS;


end MovAuth;