package MovAuth
public
	with ma_types, ma_properties, BLESS;

system sysMovAuth
end sysMovAuth;

system implementation sysMovAuth.impl
	subcomponents
		rbc : device RBC;
		train : system Train.impl;
	connections
		ma_request : port train.r -> rbc.r;
		ma : port rbc.m -> train.ma;
		auth_end : port rbc.ea -> train.ea;
end sysMovAuth.impl;

device RBC  --Radio Block Center
	features
		r : in event port;	--train requests movement authority
		m : out event data port ma_types::MovementAuthority  {BLESS::Value=> "<<:=IMA>>";};	  
    ea: out data port ma_types::EOA {BLESS::Value=> "<<:=EOA>>";};
end RBC;

-----Train abstract component---------
system Train
  features
		r : out event port;	--train requests movement authority
		ma : in event data port ma_types::MovementAuthority  {BLESS::Value=> "<<:=IMA>>";};	  
    ea: in data port ma_types::EOA {BLESS::Value=> "<<:=EOA>>";};
end Train;

--Motor moves the train
device Motor
	features
		ca : in data port ma_types::Acceleration;  --commanded acceleration 
end Motor;

--Sensor detects position, velocity, and acceleration
device Sensor
	features
    s : out data port ma_types::Position {BLESS::Value=> "<<:=POSITION>>";};
    v : out data port ma_types::Velocity {BLESS::Value=> "<<:=VELOCITY>>";};
-- 	  ta : out data port ma_types::Acceleration ; 	
end Sensor;

--Human operator (engineer) of the train
--Chooses acceleration, except for automatic braking
abstract Operator
	features
		xl : out data port ma_types::Acceleration;
end Operator;

system implementation Train.impl
	subcomponents
		motor : device Motor;
		sensor : device Sensor;
		controller : process pController.impl;
		driver: abstract Operator;
	connections
		ma_request : port controller.r -> r;
		auth : port ma -> controller.m;
		pos: port sensor.s -> controller.s;
		vel : port sensor.v -> controller.v;
		mxl : port controller.ca -> motor.ca;
		auth_end: port ea -> controller.ea;
		dxl : port driver.xl -> controller.xl;
annex hybrid{**
  variables
   ts : CTCS_Types::Position -- train position
   tv : CTCS_Types::Velocity -- train velocity
   ta : CTCS_Types::Acceleration --train acceleration
   t : CTCS_Types::Time     -- train clock time
  constants
   b = 1 mpss    --maximum deceleration of the train, assumed as 1 mpss
  behavior
   Train ::= 'DT 1 ts = tv' & 'DT 1 tv = ta' & 'DT 1 t = 1'
             [[> ts!(ts), tv!(tv),ta?(ta) ]]> Continue
   Continue ::= skip
   RunningTrain ::= ts:= 0 & tv:=0 & ta:=0 & REPEAT(Train)
**};
end Train.impl;

-----Controller process and thread----
process pController
	features
		ca : out data port  ma_types::Acceleration {BLESS::Value=> "<<:=TRAIN_XL()>>";}; --current acceleration     
		s: in data port ma_types::Position {BLESS::Value=> "<<:=POSITION>>";}; --current position 
		v: in data port ma_types::Velocity {BLESS::Value=> "<<:=VELOCITY>>";}; --current velocity 
		r: out event port {BLESS::Assertion=> "<<(s = 0) or (s >= (eoa - SR))>>";};  -- request for new MA
		ea: in data port ma_types::EOA {BLESS::Value=> "<<:=EOA>>";};
		m: in event data port ma_types::MovementAuthority {BLESS::Value=> "<<:=IMA>>";};  -- current movement authority 
		xl : in data port ma_types::Acceleration;  --operator chosen acceleration
		--pmsg : out event data port  CTCS_Types::DMI_Message;
end pController;

process implementation pController.impl
	subcomponents
		Controller: thread Controller.impl;
	connections
		conn_s: port s -> Controller.s;
		conn_v: port v -> Controller.v;
		conn_a: port Controller.ca -> ca;
		conn_req: port Controller.r -> r;
		conn_ma: port m -> Controller.m;
		conn_ea: port ea -> Controller.ea;
		conn_xl: port xl -> Controller.xl;
end pController.impl;

--------------Controller Thread----------
thread Controller
	features
		ca: out data port ma_types::Acceleration {BLESS::Value=> "<<:=TRAIN_XL()>>";}; --current acceleration
		r: out event port {BLESS::Assertion=> "<<(s = 0) or (s >= (eoa - SR))>>";};  -- request for new MA
		m: in event data port ma_types::MovementAuthority {BLESS::Value=> "<<:=IMA>>";};  -- current movement authority
		ea: in data port ma_types::EOA  {BLESS::Value=> "<<:=EOA>>";}; -- EoA end of the las segment
		s: in data port ma_types::Position {BLESS::Value=> "<<:=POSITION>>";}; --current position
		v: in data port ma_types::Velocity {BLESS::Value=> "<<:=VELOCITY>>";}; --current velocity
		xl : in data port ma_types::Acceleration;  --operator chosen acceleration
	properties
		Dispatch_Protocol => Periodic;
		Period => 200 ms;
end Controller;

thread implementation Controller.impl
	annex BLESS{**
	
	assert
		--B0 is missing
		<<SBL: : v <iSeg.v2 >> -- No Service Brake Intervetion, B1
		<<DSPV2: : (v*v+2*b*s) < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e >> -- Dynamic speed profile for v2, B2
		<<EBL: : v < iSeg.v1 >> -- Emergency Brake Intervention, B3
		<<DSPV1: : s=0 m or (v*v+2*e*s) < (nSeg.v1*nSeg.v1) + 2*e*iSeg.e >> -- Dynamic speed profile for v2, B4
	
		<<TRAIN_XL: returns quantity mpss := [
  		(EBL() or DSPV1() )-> 0,                                 			
  		(not SBL() or not DSPV2() )-> #ma_properties::SB_Rate mpss, -- deceleration rate when service brake is applied 
  		(not EBL() or not DSPV1() )-> #ma_properties::EB_Rate mpss, -- deceleration rate when emergency brake is applied  			
  		(SBL() and DSPV2() )-> xl ] >> 
	
	invariant
		<< true >>
	
	variables
			
		i ~ quantity whole := 0 whole -- segment indexing
		b ~ quantity mpss constant :=  #ma_properties::SB_Rate mpss -- deceleration rate when service brake is applied
		  <<AXIOM_B: : b = #ma_properties::SB_Rate mpss>>
		e ~ quantity mpss constant := #ma_properties::EB_Rate mpss -- deceleration rate when emergency brake is applied
			<<AXIOM_E: : e = #ma_properties::EB_Rate mpss >> 
		ma ~ movementAuthority --initial MA
		iSeg ~ segment --current segement
		nSeg ~ segment --next segment
		SR ~ quantity m -- specific distance from the EoA, to request for new MA
		
	states
		READY: initial state --train stopped
		GMA: complete state  --Get MA
		CMA: state           -- CheckMA
		RETRY: state         --Retry MA request
		MFR: complete state  --Move Forward
			<< iSeg=ma[i] and nSeg=ma[i + 1] >>
		CMF: state           --Check Move Forward
			<< iSeg=ma[i] and nSeg=ma[i + 1] >>
		SBI: complete state  --Service Brake Intervention 
		<<  iSeg=ma[i] and nSeg=ma[i + 1] >>
--		  << (not (v < iSeg.v2) or not (v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e)) and AXIOM_B() >> 
		CSB: state --Check Service Brake
			<<  iSeg=ma[i] and nSeg=ma[i + 1] >> 
		EBI: complete state  --Emergency Brake Intevention
		CEB: state -- check Emergency Brake
		STOP: final state    --a final state
		FAIL: final state    --failure occurred
		
	transitions
		T0_Go: READY -[s=0 m]-> GMA
			{ << s=0 m >>
				r!  --request movement authority
			}
	
		T0_Fail: READY -[s<>0 m]-> FAIL  --did not start at beginning
		
		T1_MA_Check: GMA -[on dispatch]-> CMA 

		T9_MA_NotOk: --did not get requested movement authority
		  CMA -[not m'fresh]-> RETRY 
		
		T10_MA_Retry:  --request movement authority again
		  RETRY -[s=0 m]-> GMA 
			{ << s=0 m >>
			  r!  --request movement authority
			}
		
		T10_Retry_Fail:
		  RETRY -[s<>0 m]-> FAIL
		
		T2_MA_Ok:  --received movement authority
		  CMA -[m'fresh and s=0 m]-> MFR
			{  << s=0 m >> 
			m?(ma)  --save received movement authority in local variable
			;  << s= 0 m and ma=IMA >>
			i := 0 whole --first segment of new movement authority
			; << i=0 whole and s= 0 m and ma=IMA >>  
      iSeg := ma[0] --set current segment of movement authority to first segment
			; << i=0 and s= 0 m and ma=IMA and iSeg=ma[i] >> 
			nSeg := ma[1]  --set next segment of movement authority to second segment
			; << i=0 and s= 0 m and ma=IMA and iSeg=ma[i] and nSeg=ma[i+1] >> 		
			|iSeg', nSeg', i', ma' := iSeg, nSeg, i, ma|
				<< (i=0  and iSeg=ma[i] and nSeg=ma[i+1])^1  >>
			}
		
		T2_MA_Fail:
		  CMA -[s<>0 m]-> FAIL
		
		T3_Move_Check: MFR -[on dispatch]-> CMF
--			{
--			if
--			(s>=(ea-SR))~>
--				<< SBL() and DSPV2() and (s >= (ea-SR))>>
--				r!
--				<<SBL() and DSPV2() and (s >= (ea - SR)) >>	
--			[] 
--			( s < (ea-SR) )~>
--				<< SBL() and DSPV2() and s=POSITION and v=VELOCITY  and ( not (s>= (ea-SR)))>>
--				skip
--				<< SBL() and DSPV2() and s=POSITION and v=VELOCITY  and ( not (s>= (ea-SR)))>>
--			 fi
--			 << (SBL() and DSPV2() and s=POSITION and v=VELOCITY  and (s>= (ea-SR))) or 
--			 (SBL() and DSPV2() and s=POSITION and v=VELOCITY  and ( not (s>= (ea-SR)))) >>
--			}
--		

		T4_SBI_Point: CMF -[not (v < iSeg.v2) or
			not (v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e) ]-> SBI 
			-- nSeg.v2 instead of ma[i+1], check dynamic speed profile formula. it is square of v2
			{  << (not (v < iSeg.v2) or not (v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e))
				and iSeg=ma[i] and nSeg=ma[i+1] >>
			ca!(#ma_properties::SB_Rate mpss)
			; << iSeg=ma[i] and nSeg=ma[i+1] >>
			|iSeg',i',nSeg', ma':= iSeg, i, nSeg, ma|
				<< (iSeg=ma[i] and nSeg=ma[i+1])^1 >>
			}
		-- this is where we are working now
		T5_Move_Ok: CMF -[v < iSeg.v2 and v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e]->	MFR	
			{  --velocity is below limit, and we can still stop in time
				<< SBL() and DSPV2() and iSeg=ma[i] and nSeg=ma[i+1]>> 
				if (s>=iSeg.e and (i+1) < #ma_properties::MASize - 1)~>
					{  --near end of current segment, there is a next segment, then transition to next segment
					<<SBL() and DSPV2() and s>=iSeg.e and (i+1) <#ma_properties::MASize - 1 >>
					i:=i+1
					; <<SBL() and DSPV2() and s>=iSeg.e and i < #ma_properties::MASize - 1  >>
					iSeg:=ma[i]
					; <<SBL() and DSPV2() and i<#ma_properties::MASize - 1 and iSeg=ma[i] >>
					nSeg:=ma[i+1]
					; <<SBL() and DSPV2() and i<#ma_properties::MASize - 1 and iSeg=ma[i] and nSeg=ma[i+1] >>
				
					ca!(xl)
					<<iSeg=ma[i] and nSeg=ma[i+1]>> 
					}
				[] (s<iSeg.e or (i+1) >= #ma_properties::MASize - 1)~>
					<<iSeg=ma[i] and nSeg=ma[i+1]>> 
					skip	
					<<iSeg=ma[i] and nSeg=ma[i+1]>> 
				fi	
			;		<<iSeg=ma[i] and nSeg=ma[i+1]>>   
			|i',iSeg',nSeg', ma' := i, iSeg, nSeg, ma|
				<<(iSeg=ma[i] and nSeg=ma[i+1])^1>>
			}
		
		T6_BI_Check: SBI -[on dispatch]-> CSB   --just check SBI after each period like T3_Move_Check
--			--{
--				--s?(s) & v?(v)
--			--}
			
		T7_SBI_Out: CSB -[v < iSeg.v2 and v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e ]-> MFR
			{
				<< v < iSeg.v2 and ((2 * b * s) + (v * v)) < ((2 * b * iSeg.e) + (nSeg.v2 * nSeg.v2)) 
				  and iSeg = ma[i] and ma[1 + i] = nSeg>>
			ca!(xl)
			;  << iSeg = ma[i] and ma[1 + i] = nSeg >>
			|i',iSeg',nSeg', ma' := i, iSeg, nSeg, ma|
				 << (iSeg = ma[i] and ma[1 + i] = nSeg)^1 >>
			}
		
		T8_SBI_Ok: CSB -[ (not(v < iSeg.v2) or not (v*v + 2*b*s < (nSeg.v2*nSeg.v2) + 2*b*iSeg.e)) and --apply service brake
										not(not (v < iSeg.v1) or not (v*v + 2*e*s < (nSeg.v1*nSeg.v1) +2*e*iSeg.e ))  --but not emergency brake
										]-> SBI
					
			{
				|iSeg',i',nSeg', ma':= iSeg, i, nSeg, ma|
					<< (iSeg=ma[i] and nSeg=ma[i+1])^1 >>
			} 
		
		
--		T11_EBI_Point: CMF -[not (v < iSeg.v1) or not (v*v + 2*e*s < (nSeg.v1*nSeg.v1) + 2*e*iSeg.e)]-> EBI  -- we donot need this transition as train can not move from CMF to EBI
--		
		T11_Check_EBI: EBI -[on dispatch]-> CEB 
		
		T14_EBI_Still: CEB -[v <> 0 kph]-> EBI
		
		T12_Stop: CEB -[v = 0 kph]-> STOP
		
		
	
		T13_EBI_Point: CSB -[not (v < iSeg.v1) or not (v*v + 2*e*s < (nSeg.v1*nSeg.v1) +2*e*iSeg.e )]-> EBI
		
	--	T14_EBI_Fail: EBI -[on dispatch]-> FAIL

	**};
end Controller.impl;

-----RBC Device----
device RBS
	features
		r: in event port;
		m: out event data port ma_types::MovementAuthority;
		ea: out data port ma_types::EOA;
end RBS;


end MovAuth;