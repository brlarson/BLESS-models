#ratecontrol-atr
push
sort-by-component[rc::RateController.atr]
#rc::RateController.atr
#[serial 1064] <<M(atr_fallback)>> -> <<I>> from invariant I when complete state atr_fallback has Assertion <<M(atr_fallback)>> in its definition
make-an
axioms
#[serial 1065] Serban's Theorem:  disjunction of execute conditions leaving execution state start_atr, <<M(start_atr)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1066] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atr, <<M(check_atr)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
laws
axioms
#[serial 1067]  <<M(start_atr)>> A <<M(atr_fallback)>> for ATR_RC1_start_fallback:start_atr-[ ]->atr_fallback{A};
reduce
atomic
laws
axioms
#[serial 1068]  <<M(atr_fallback) and x>> -> <<M(check_atr)>> for ATR_RC5_atr_cci:atr_fallback-[x]->check_atr{};
axioms
#[serial 1069]  <<M(check_atr) and x>> A <<M(atr_fallback)>> for ATR_RC6_continure_atr:check_atr-[x]->atr_fallback{A};
reduce
atomic
now
substitute-post
normalize
??
axioms
#[serial 1070]  <<M(check_atr) and x>> A <<M(atr_fallback)>> for ATR_RC_fallback:check_atr-[x]->atr_fallback{A};
reduce
reduce
remove-axioms-post
reduce
axioms
atomic
laws
normalize
axioms
completesub
now
guided-sub-equals[atr_max_cci]
axioms
replace<=
normalize
??
axioms
#[serial 1071]  <<M(atr_fallback) and x>> -> <<M(done)>> for RCX:atr_fallback-[x]->done{};
axioms