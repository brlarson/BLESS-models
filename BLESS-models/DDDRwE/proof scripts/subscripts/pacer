#pacer  proof script for Pacer.aadl
push
sort-by-component[sw::DDD.imp]
#sw::DDD.imp
#[serial 1029] <<I>> -> BLESS::Invariant of thread DDD.im
make-an
axioms
#[serial 1030] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
or-over-and-post
axioms
#[serial 1031] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
or-over-and-post
axioms
#[serial 1032] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
or-over-and-post
axioms
#[serial 1033] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
laws
normalize
cnf
laws
normalize
axioms
#[serial 1034] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1035] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
and-over-or-post
laws
normalize
axioms
#[serial 1036] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
cnf
laws
normalize
axioms
#[serial 1037] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
cnf
laws
normalize
axioms
#[serial 1038] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1039]  <<M(start)>> A <<M(va)>> for T0_GO:start-[ ]->va{A};
reduce
axioms
reduce
normalize
reduce
axioms
normalize
atomic
laws
axioms
normalize
axioms
split-post
axioms
guided-sub-equals[last_ap_or_as]
guided-sub-equals[last_vp_or_vs]
laws
axioms
guided-sub-equals[CCI]
normalize
axioms
substitute-both
substitute-both
normalize
laws
normalize
extend-eqr
axioms
split-post
normalize
guided-sub-equals[last_vp_or_vs]
axioms
guided-sub-equals[last_ap_or_as]
axioms
laws
normalize
axioms
split@
split-quant
quant
normalize
axioms
#[serial 1040]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:va-[x]->va{A};
reduce
atomic 
normalize
laws
axioms
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
split-post
axioms
distribute
quant
normalize
axioms
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
sub-all-eq
laws
normalize
axioms
extend-eqr
split@
normalize
split-quant
replace-qv
axioms
#[serial 1041]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:sav-[x]->va{A};
reduce
atomic 
normalize
laws
axioms
normalize
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
split-post
axioms
distribute
quant
normalize
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
substitute-post
normalize
split-post
axioms
normalize
axioms
sub-all-eq
laws
normalize
axioms
split@
normalize
split-quant
normalize
laws
normalize
axioms
extend-eqr
replace-qv
axioms
#[serial 1042]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
reduce
atomic 
laws
axioms
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
split-post
axioms
distribute
quant
normalize
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
substitute-post
normalize
split-post
normalize
axioms
sub-all-eq
laws
normalize
axioms
split@
normalize
split-quant
replace-qv
extend-eqr
axioms
#[serial 1043]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
DeMorgan
normalize
laws
remove-axioms-post
normalize
laws
axioms
#[serial 1044]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T4_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
axioms
#[serial 1045]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T5_VS_AFTER_AS_AFTER_VRP:sav_check_vrp-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
axioms
remove-axioms-post
laws
axioms
split-post
substitute-post
normalize
split-post
axioms
distribute
quant
normalize
axioms
substitute-post
normalize
equivalent
sub-all-eq
laws
normalize
laws
normalize
axioms
substitute-pre
normalize
laws
substitute-pre
normalize
laws
axioms
substitute-post
normalize
laws
guided-sub-equals[CCI]
laws
normalize
axioms
split@
split-post
axioms
split-quant
axioms
now
axioms
#[serial 1046]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T6_EXPIRED_SENSED_AV_DELAY:sav-[x]->sav_check_url{};
remove-axioms-post
laws
normalize
split-post
laws
axioms
#[serial 1047]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T7_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP:sav_check_url-[x]->sav{};
axioms
#[serial 1048]  <<M(sav_check_url) and x>> A <<M(va)>> for T8_TRACKED_VP_AFTER_AS:sav_check_url-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
axioms
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
axioms
split-post
axioms
substitute-both
substitute-both
normalize
laws
normalize
axioms
distribute
quant
normalize
axioms
extend-eqr
replace-qv
split@
split-quant
guided-sub-equals[CCI]
laws
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1049]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T9_VS_AFTER_AP:pav-[x]->pav_check_vrp{};
remove-axioms-post
laws
split-post
normalize
axioms
#[serial 1050]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T10_VS_AFTER_AP_IN_VRP:pav_check_vrp-[x]->pav{};
split-post
axioms
#[serial 1051]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T11_VS_AFTER_AP_AFTER_VRP:pav_check_vrp-[x]->va{A};
reduce
reduce
reduce
atomic 
normalize
laws
normalize
axioms
remove-axioms-post
laws
axioms
split-post
axioms
substitute-post
normalize
distribute
quant
normalize
axioms
split-post
axioms
substitute-both
substitute-both
normalize
laws
normalize
split-post
axioms
now
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
now
axioms
split@
split-quant
and-over-or-post
laws
normalize
split-post
axioms
normalize
axioms
#[serial 1052]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T12_AS_AFTER_VS_OR_VP:va-[x]->check_atrial_refractories{};
laws
normalize
axioms
#[serial 1053]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T13_AS:check_atrial_refractories-[x]->sav{A};
laws
reduce
atomic 
laws
normalize
laws
normalize
axioms
remove-axioms-post
laws
axioms
split-post
axioms
substitute-post
normalize
axioms
substitute-pre
normalize
laws
substitute-pre
normalize
laws
axioms
substitute-post
laws
split-post
axioms
substitute-both
normalize
laws
axioms
split-quant
quant
normalize
axioms
now
laws
normalize
axioms
#[serial 1054]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T14_AS_AT:check_atrial_refractories-[x]->sav{A};
reduce
atomic
laws
normalize
axioms
push
#sw::DDD.imp
#[serial 3687]   normalization of [serial 3670
make-an
split-post
axioms
substitute-post
normalize
axioms
split-quant
normalize
quant
normalize
axioms
#[serial 3691]   normalization of [serial 3679]
split-post
axioms
substitute-pre
laws
normalize
axioms
substitute-post
normalize
split-post
axioms
substitute-post
normalize
split-post
axioms
now
axioms
substitute-post
normalize
laws
normalize
axioms
#[serial 3693]   normalization of [serial 3680]
remove-axioms-post
laws
axioms
#[serial 3695]   normalization of [serial 3681]
substitute-post
substitute-pre
laws
normalize
substitute-post
laws
normalize
split-post
axioms
now
axioms
substitute-post
normalize
laws
normalize
split-post
axioms
substitute-post
normalize
laws
normalize
axioms
substitute-pre
laws
normalize
split@
axioms
#[serial 3699]   normalization of [serial 3685]
laws
normalize
substitute-pre
laws
axioms
#[serial 1055]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T15_STILL_IN_PVARP:check_atrial_refractories-[x]->va{};
axioms
#[serial 1056]  <<M(va) and x>> -> <<M(check_vrp)>> for T16_VS_AFTER_VS_OR_VP:va-[x]->check_vrp{};
remove-axioms-post
normalize
laws
axioms
#[serial 1057]  <<M(check_vrp) and x>> -> <<M(va)>> for T17_STILL_IN_VRP:check_vrp-[x]->va{};
axioms
#[serial 1058]  <<M(check_vrp) and x>> A <<M(va)>> for T18_VRP_EXPIRED:check_vrp-[x]->va{A};
reduce
atomic
laws
normalize
axioms
split-post
axioms
push
#sw::DDD.imp
#[serial 3937]   normalization of [serial 3924
make-an
substitute-pre
normalize
guided-sub-equals[CCI]
laws
normalize
axioms
#[serial 3947] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3927]
substitute-post
normalize
split-post
axioms
substitute-post
equivalent
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 3948] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3927]
substitute-post
split@
split-quant
normalize
quant
normalize
axioms
#[serial 3949] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3927]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 3950] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3931]
substitute-pre
laws
axioms
#[serial 3951] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3931]
substitute-pre
laws
substitute-post
normalize
split-post
axioms
substitute-post
normalize
now
axioms
#[serial 3953] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3933]
remove-axioms-post
axioms
#[serial 3956] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3935]
now
axioms
#[serial 1059]  <<M(va) and x>> A <<M(pav)>> for T19_AP_AFTER_TIMEOUT_VS_OR_VP:va-[x]->pav{A};
reduce
reduce
reduce
normalize
laws
normalize
axioms
atomic
normalize
laws
normalize
axioms
push
#sw::DDD.imp
#[serial 4037]   normalization of [serial 4028
make-an
#sw::DDD.imp
#[serial 4043]   normalization of [serial 4033
make-an
split-post
axioms
substitute-post
normalize
axioms
quant
axioms
substitute-pre
laws
normalize
replace-qv
axioms
#[serial 4061]   normalization of [serial 4054]
substitute-pre
laws
split-post
axioms
substitute-post
normalize
replace-qv
axioms
#[serial 4087]   normalization of [serial 4080]
replace-qv
axioms
#[serial 1060]  <<M(sav) and x>> -> <<M(off)>> for T20_STOP:sav-[x]->off{};
axioms
#[serial 1061]  <<M(pav) and x>> -> <<M(off)>> for T20_STOP:pav-[x]->off{};
axioms
#[serial 1062]  <<M(va) and x>> -> <<M(off)>> for T20_STOP:va-[x]->off{};
axioms