#atcounter ATR::AtCounter.imp
push
sort-by-component[ATR::AtCounter.imp]
#ATR::AtCounter.imp
#[serial 1003] <<M(wait)>> -> <<I>> from invariant I when complete state wait has Assertion <<M(wait)>> in its definition
make-an
axioms
#[serial 1004] <<M(go)>> -> <<I>> from invariant I when complete state go has Assertion <<M(go)>> in its definition.
axioms
#[serial 1005] Serban's Theorem:  disjunction of execute conditions leaving execution state check_wait, <<M(check_wait)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1006] Serban's Theorem:  disjunction of execute conditions leaving execution state check_go, <<M(check_go)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1008]  <<M(start)>> -> <<M(wait)>> for dc_begin:start-[ ]->wait{};
axioms
#[serial 1009]  <<M(wait) and x>> -> <<M(check_wait)>> for dc_was:wait-[x]->check_wait{};
normalize
laws
axioms
#[serial 1010]  <<M(check_wait) and x>> A <<M(wait)>> for dc_wnen:check_wait-[x]->wait{A};
reduce
atomic
laws
now
??
axioms
#[serial 1011]  <<M(check_wait) and x>> A <<M(go)>> for dc_wen:check_wait-[x]->go{A};
reduce
atomic
laws
axioms
normalize
push
#ATR::AtCounter.imp
#[serial 1424] Law of And-Simplification:  P and true is P [serial 1420
make-an
split@
now
laws
axioms
#[serial 1425] Law of And-Simplification:  P and true is P [serial 1421]
split@
now
laws
axioms
#[serial 1427]   normalization of [serial 1413]
split@
normalize
axioms
#[serial 1429]   normalization of [serial 1422]
substitute-post
substitute-post
guided-sub-equals[et]
guided-sub-equals[last_at]
laws
normalize
laws
guided-sub-equals[c]
counting
laws
quant
split@
laws
normalize
axioms
#[serial 1431]   normalization of [serial 1423]
??
guided-sub-equals[et]
now
guided-sub-equals[atCount]
counting
now
axioms
#[serial 1012]  <<M(go) and x>> -> <<M(check_go)>> for dc_gas:go-[x]->check_go{};
normalize
axioms
#[serial 1013]  <<M(check_go) and x>> A <<M(wait)>> for dc_gnen:check_go-[x]->wait{A};
reduce
atomic
laws
normalize
axioms
??
axioms
now
axioms
#[serial 1014]  <<M(check_go) and x>> A <<M(go)>> for dc_ggo:check_go-[x]->go{A};
reduce
completesub
atomic
normalize
laws
normalize
axioms
push
#ATR::AtCounter.imp
#[serial 1578] Law of And-Simplification:  P and true is P [serial 1572
make-an
split-post
axioms
split@
normalize
laws
now
axioms
#[serial 1579] Law of And-Simplification:  P and true is P [serial 1573]
split-post
now
laws
axioms
#[serial 1583]   normalization of [serial 1574]
split-post
axioms
guided-sub-equals[last_at]
axioms
laws
normalize
axioms
#[serial 1585]   normalization of [serial 1575]
??
now
guided-sub-equals[atCount]
axioms
#[serial 1587]   normalization of [serial 1576]
split-post
axioms
split@
normalize
axioms
#[serial 1589]   normalization of [serial 1577]
split-post
axioms
split@
laws
normalize
qtiming
axioms