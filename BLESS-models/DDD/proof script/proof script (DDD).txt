#This file, script.txt, was produced the BLESS Compiler v2.1
#  at Fri Jun 26 12:41:26 CDT 2020 by brianlarson
load
#[serial 1003] <<I>> -> BLESS::Invariant of thread DDD
push
#ddd_mode::DDD
#[serial 1003] <<I>> -> BLESS::Invariant of thread DD
make-an
#[serial 1004] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
axioms
substitute-pre
#[serial 1005] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
axioms
substitute-pre
#[serial 1006] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
axioms
substitute-pre
normalize
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
axioms
normalize
replace<=
normalize
laws
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
axioms
normalize
replace<=
laws
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
axioms
normalize
replace<=
normalize
and-over-or-post
laws
normalize
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
axioms
normalize
replace<=
normalize
laws
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
axioms
normalize
replace<=
normalize
laws
#[serial 1013]  <<M(start)>> A <<M(va)>> for T0_GO:start-[ ]->va{A};
axioms
reduce
atomic
normalize
laws
axioms
substitute-post
substitute-post
substitute-post
normalize
laws
equivalent
split-post
normalize
axioms
dist^
split-quant
normalize
laws
quant
normalize
axioms
DeMorgan
normalize
split-post
DeMorgan
normalize
sub-equals
quant
axioms
sub-equals
quant
#[serial 1014]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:va-[x]->va{A};
axioms
reduce
atomic
remove-axioms-post
normalize
laws
normalize
axioms
push
#ddd_mode::DDD
#[serial 1220]   normalization of [serial 1211
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
dist^
normalize
split-quant
quant
normalize
axioms
substitute-post
sub-equals
quant
normalize
laws
normalize
#[serial 1222]   normalization of [serial 1214]
axioms
substitute-post
substitute-both
normalize
laws
normalize
split-post
normalize
extend-eqr
axioms
replace-qv
#[serial 1244]   normalization of [serial 1238]
axioms
completesub
laws
normalize
split-post
#[serial 1015]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:sav-[x]->va{A};
axioms
reduce
atomic
laws
normalize
laws
normalize
axioms
remove-axioms-post
push
#ddd_mode::DDD
#[serial 1331]   normalization of [serial 1320
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
substitute-post
push
#ddd_mode::DDD
#[serial 1363] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1360
make-an
dist^
normalize
split-quant
quant
normalize
#[serial 1364] substituted Assertions' predicates for  labels in postconditions [serial 1362]
axioms
guided-sub-equals[last_vp_or_vs]
quant
normalize
laws
normalize
#[serial 1333]   normalization of [serial 1323]
axioms
split-post
push
#ddd_mode::DDD
#[serial 1383] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1333
make-an
substitute-both
normalize
laws
normalize
extend-eqr
replace-qv
#[serial 1384] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1333]
axioms
substitute-both
substitute-both
normalize
laws
normalize
#[serial 1354]  add user-defined axioms to postcondition:
axioms
laws
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
laws
normalize
#[serial 1016]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
axioms
reduce
atomic
laws
normalize
laws
axioms
normalize
remove-axioms-post
push
#ddd_mode::DDD
#[serial 1429]   normalization of [serial 1418
make-an
completesub
laws
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
quant
normalize
axioms
dist^
normalize
split-quant
quant
normalize
#[serial 1431]   normalization of [serial 1421]
axioms
completesub
laws
normalize
split-post
push
#ddd_mode::DDD
#[serial 1513] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1511
make-an
extend-eqr
replace-qv
#[serial 1514] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1511]
axioms
normalize
and-over-or-post
normalize
split-post
normalize
#[serial 1450]  add user-defined axioms to postcondition:
axioms
laws
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
normalize
#[serial 1017]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
axioms
laws
#[serial 1018]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T3_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
axioms
#[serial 1019]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T4_VS_AFTER_AS_AFTER_VRP:sav_check_vrp-[x]->va{A};
axioms
reduce
atomic
laws
axioms
normalize
split-post
push
#ddd_mode::DDD
#[serial 1567]   normalization of [serial 1556
make-an
completesub
laws
normalize
split-post
normalize
axioms
push
#ddd_mode::DDD
#[serial 1594] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1591
make-an
guided-sub-equals[last_vp_or_vs]
quant
normalize
#[serial 1601]   normalization of [serial 1595]
axioms
dist^
normalize
split-quant
quant
normalize
#[serial 1605]   normalization of [serial 1597]
axioms
equivalent
#[serial 1569]   normalization of [serial 1563]
axioms
substitute-pre
substitute-pre
laws
#[serial 1573] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1565]
axioms
substitute-pre
substitute-post
completesub
laws
normalize
split-post
#[serial 1574] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1565]
axioms
substitute-both
substitute-both
substitute-both
normalize
replace-qv
laws
normalize
extend-eqr
axioms
#[serial 1020]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T5a_EXPIRED_SENSED_AV_DELAY:sav-[x]->sav_check_url{};
DeMorgan
normalize
split-post
laws
normalize
replace-qv
#[serial 1021]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP:sav_check_url-[x]->sav{};
axioms
normalize
#[serial 1022]  <<M(sav_check_url) and x>> A <<M(va)>> for T5c_TRACKED_VP_AFTER_AS:sav_check_url-[x]->va{A};
axioms
reduce
atomic
laws
remove-axioms-post
normalize
laws
split-post
axioms
push
#ddd_mode::DDD
#[serial 1700]   normalization of [serial 1688
make-an
completesub
laws
split-post
axioms
normalize
dist^
normalize
split-quant
quant
normalize
#[serial 1714] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1698]
axioms
substitute-post
substitute-pre
substitute-both
substitute-both
normalize
laws
normalize
split-post
axioms
extend-eqr
replace-qv
#[serial 1715] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1698]
axioms
substitute-pre
laws
#[serial 1716] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1702]
axioms
substitute-pre
substitute-both
normalize
laws
#[serial 1717] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1702]
axioms
substitute-both
substitute-both
normalize
laws
normalize
#[serial 1023]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T6_VS_AFTER_AP:pav-[x]->pav_check_vrp{};
axioms
laws
#[serial 1024]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T7_VS_AFTER_AP_IN_VRP:pav_check_vrp-[x]->pav{};
axioms
#[serial 1025]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T8_VS_AFTER_AP_AFTER_VRP:pav_check_vrp-[x]->va{A};
axioms
reduce
reduce
reduce
atomic
remove-axioms-post
normalize
laws
normalize
axioms
split-post
axioms
push
#ddd_mode::DDD
#[serial 1803]   normalization of [serial 1789
make-an
completesub
laws
normalize
split-post
axioms
normalize
equivalent
dist^
normalize
split-quant
quant
normalize
laws
normalize
laws
quant
normalize
#[serial 1833] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1801]
axioms
substitute-pre
laws
#[serial 1834] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1801]
axioms
substitute-pre
laws
substitute-post
normalize
split-post
axioms
substitute-both
substitute-both
laws
normalize
extend-eqr
replace-qv
#[serial 1835] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1805]
axioms
substitute-both
substitute-both
laws
normalize
#[serial 1840] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1807]
axioms
substitute-post
normalize
equivalent
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
#[serial 1026]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T10_AS_AFTER_VS_OR_VP:va-[x]->check_atrial_refractories{};
axioms
normalize
#[serial 1027]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T11_PVARP_EXPIRED:check_atrial_refractories-[x]->sav{A};
axioms
reduce
atomic
laws
normalize
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD
#[serial 1965]   normalization of [serial 1959
make-an
substitute-pre
substitute-pre
laws
normalize
#[serial 1969] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1945]
axioms
substitute-post
normalize
split-post
axioms
substitute-post
normalize
#[serial 1970] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1945]
axioms
substitute-post
substitute-both
normalize
quant
#[serial 1971] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1949]
axioms
substitute-both
substitute-both
normalize
laws
normalize
substitute-both
normalize
laws
normalize
split-post
axioms
extend-eqr
replace-qv
#[serial 1972] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1949]
axioms
substitute-pre
substitute-pre
laws
#[serial 1973] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1949]
axioms
substitute-pre
substitute-pre
laws
normalize
#[serial 1974] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1949]
axioms
substitute-pre
laws
#[serial 1028]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T12_STILL_IN_PVARP:check_atrial_refractories-[x]->va{};
axioms
#[serial 1029]  <<M(va) and x>> -> <<M(check_vrp)>> for T13_VS_AFTER_VS_OR_VP:va-[x]->check_vrp{};
axioms
normalize
#[serial 1030]  <<M(check_vrp) and x>> -> <<M(va)>> for T14_STILL_IN_VRP:check_vrp-[x]->va{};
axioms
#[serial 1031]  <<M(check_vrp) and x>> A <<M(va)>> for T15_VRP_EXPIRED:check_vrp-[x]->va{A};
axioms
reduce
atomic
laws
normalize
laws
normalize
axioms
push
#ddd_mode::DDD
#[serial 2052]   normalization of [serial 2042
make-an
substitute-pre
substitute-pre
normalize
split-post
laws
axioms
substitute-post
substitute-post
normalize
replace-qv
extend-eqr
substitute-both
normalize
laws
replace-qv
#[serial 2054]   normalization of [serial 2043]
axioms
substitute-post
substitute-both
substitute-both
normalize
laws
normalize
split-post
axioms
normalize
dist^
split-quant
normalize
quant
normalize
#[serial 2072]   normalization of [serial 2066]
axioms
substitute-pre
substitute-pre
laws
#[serial 1032]  <<M(va) and x>> A <<M(pav)>> for T16_AP_AFTER_TIMEOUT_VS_OR_VP:va-[x]->pav{A};
axioms
reduce
reduce
reduce
atomic
laws
normalize
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD
#[serial 2155]   normalization of [serial 2141
make-an
completesub
split-post
axioms
dist^
normalize
split-quant
laws
normalize
DeMorgan
normalize
laws
normalize
split-post
axioms
extend-eqr
replace-qv
#[serial 2177]   normalization of [serial 2168]
axioms
substitute-pre
laws
#[serial 2185] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2147]
axioms
substitute-post
normalize
split-post
axioms
substitute-post
normalize
#[serial 2186] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2147]
axioms
substitute-post
normalize
quant
#[serial 2192] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2153]
axioms
replace-qv
#[serial 2196] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2157]
axioms
replace-qv
#[serial 2198] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2184]
axioms
substitute-pre
substitute-pre
laws
#[serial 2199] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2184]
axioms
substitute-pre
substitute-pre
laws
#[serial 2200] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2184]
axioms
replace-qv
#[serial 1033]  <<M(sav) and x>> -> <<M(off)>> for T17_STOP:sav-[x]->off{};
axioms
#[serial 1034]  <<M(pav) and x>> -> <<M(off)>> for T17_STOP:pav-[x]->off{};
axioms
#[serial 1035]  <<M(va) and x>> -> <<M(off)>> for T17_STOP:va-[x]->off{};
axioms
#Q.E.D.
axioms
#closing script.txt file:  "/Applications/osate2_2020-03-master2/Eclipse.app/Contents/Eclipse/script.txt"