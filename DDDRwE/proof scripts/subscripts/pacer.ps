#pacer  proof script for Pacer.aadl
push
sort-by-component[sw::DDD.imp]
#sw::DDD.imp
#[serial 1047] <<I>> -> BLESS::Invariant of thread DDD.im
make-an
normalize
axioms
#[serial 1048] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
normalize
split-post
normalize
axioms
#[serial 1049] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
normalize
split-post
normalize
axioms
#[serial 1050] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
normalize
split-post
normalize
axioms
#[serial 1051] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
normalize
cnf
laws
normalize
axioms
#[serial 1052] Serban's Theorem:  disjunction of execute conditions leaving execution state go, <<M(go)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1053] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
and-over-or-post
laws
normalize
axioms
#[serial 1054] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
cnf
laws
normalize
axioms
#[serial 1055] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
cnf
laws
normalize
axioms
#[serial 1056] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1057]  <<M(go)>> A <<M(va)>> for T0_GO:go-[ ]->va{A};
reduce
normalize
axioms
reduce
reduce
remove-axioms-post
normalize
atomic
laws
normalize
axioms
split-post
axioms
guided-sub-equals[last_ap_or_as]
guided-sub-equals[last_vp_or_vs]
laws
axioms
substitute-both
substitute-both
normalize
laws
normalize
push
#sw::DDD.imp
#[serial 1275]   normalization of [serial 1258
make-an
replace-port-value
laws
normalize
now
axioms
#[serial 1314]   normalization of [serial 1307]
split-quant
quant
normalize
axioms
#[serial 1316]   normalization of [serial 1308]
sub-equals-and
laws
normalize
laws
normalize
axioms
#[serial 1318]   normalization of [serial 1309]
sub-equals-and
laws
normalize
laws
normalize
axioms
#[serial 1336]   normalization of [serial 1329]
split-post
guided-sub-equals[last_vp_or_vs]
normalize
axioms
guided-sub-equals[last_ap_or_as]
axioms
laws
normalize
axioms
#[serial 1338]   normalization of [serial 1330]
extend-eqr
axioms
#[serial 1058]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:va-[x]->va{A};
reduce
atomic
remove-axioms-post
normalize
laws
axioms
normalize
push
#sw::DDD.imp
#[serial 1412]   normalization of [serial 1398
make-an
substitute-post
split-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
substitute-pre
normalize
laws
axioms
#[serial 1414]   normalization of [serial 1402]
substitute-pre
normalize
laws
normalize
guided-sub-equals[VP]
normalize
split-post
substitute-post
normalize
replace-port
replace-qv
dist^
normalize
substitute-post
normalize
and-over-or-post
normalize
laws
normalize
split-post
normalize
replace-qv
replace-port-value
axioms
extend-eqr
axioms
#[serial 1444]   normalization of [serial 1432]
replace-port
replace-port-value
laws
normalize
axioms
#[serial 1446]   normalization of [serial 1437]
split-post
axioms
substitute-pre
normalize
laws
axioms
#[serial 1448]   normalization of [serial 1439]
split-post
axioms
replace-port
axioms
#[serial 1059]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:sav-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
split-post
distribute
normalize
axioms
push
#sw::DDD.imp
#[serial 1655]   normalization of [serial 1645
make-an
replace-port
substitute-pre
normalize
guided-sub-equals[VP]
substitute-post
normalize
laws
split-post
normalize
push
#sw::DDD.imp
#[serial 1781]   normalization of [serial 1778
make-an
split@
replace-port-value
normalize
extend-eqr
replace-qv
axioms
#[serial 1783]   normalization of [serial 1779]
substitute-post
split@
normalize
replace-port-value
axioms
#[serial 1686]   normalization of [serial 1674]
replace-port
replace-port-value
laws
normalize
axioms
#[serial 1736]   normalization of [serial 1726]
split-quant
quant
normalize
axioms
#[serial 1746] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1734]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1750] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1724]
replace-port
split@
split-quant
normalize
axioms
#[serial 1751] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1738]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1752] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1747]
substitute-pre
substitute-pre
normalize
laws
normalize
split@
normalize
split-quant
axioms
#[serial 1759]   normalization of [serial 1748]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1761]   normalization of [serial 1749]
replace-port
split@
axioms
#[serial 1060]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
split-post
distribute
normalize
axioms
push
#sw::DDD.imp
#[serial 1872]   normalization of [serial 1862
make-an
#sw::DDD.imp
#[serial 1903]   normalization of [serial 1891
make-an
replace-port
replace-port-value
laws
normalize
axioms
substitute-pre
normalize
guided-sub-equals[VP]
substitute-post
normalize
laws
split-post
normalize
push
#sw::DDD.imp
#[serial 2008]   normalization of [serial 2005
make-an
split@
replace-port-value
normalize
extend-eqr
replace-qv
axioms
#[serial 2010]   normalization of [serial 2006]
substitute-post
split@
normalize
axioms
#[serial 1953]   normalization of [serial 1943]
split-quant
quant
normalize
axioms
#[serial 1963] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1951]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1967] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1941]
replace-port
split@
split-quant
normalize
axioms
#[serial 1968] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1955]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1969] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1964]
substitute-pre
substitute-pre
split@
split-quant
normalize
laws
split@
split-quant
axioms
#[serial 1976]   normalization of [serial 1965]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1978]   normalization of [serial 1966]
replace-port
split@
axioms
#[serial 1061]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
normalize
laws
axioms
#[serial 1062]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T4_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
normalize
laws
axioms
#[serial 1063]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T5_VS_AFTER_AS_AFTER_VRP:sav_check_vrp-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
axioms
remove-axioms-post
laws
axioms
split-post
substitute-post
normalize
axioms
split-post
normalize
axioms
push
#sw::DDD.imp
#[serial 2095]   normalization of [serial 2085
make-an
substitute-pre
normalize
laws
guided-sub-equals[VS]
normalize
substitute-post
normalize
axioms
#[serial 2126]   normalization of [serial 2114]
replace-port-value
laws
normalize
axioms
#[serial 2151]   normalization of [serial 2142]
split-quant
quant
normalize
axioms
#[serial 2153]   normalization of [serial 2143]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 2164] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2149]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 2165] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2155]
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 2175]   normalization of [serial 2166]
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1064]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T6_EXPIRED_SENSED_AV_DELAY:sav-[x]->sav_check_url{};
normalize
laws
split-post
axioms
replace-port
normalize
axioms
#[serial 1065]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T7_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP:sav_check_url-[x]->sav{};
normalize
laws
axioms
#[serial 1066]  <<M(sav_check_url) and x>> A <<M(va)>> for T8_TRACKED_VP_AFTER_AS:sav_check_url-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
axioms
remove-axioms-post
normalize
laws
axioms
split-post
axioms
push
#sw::DDD.imp
#[serial 2266]   normalization of [serial 2256
make-an
substitute-pre
normalize
laws
normalize
guided-sub-equals[VP]
normalize
substitute-post
split-post
normalize
axioms
substitute-post
normalize
axioms
#[serial 2297]   normalization of [serial 2285]
replace-port-value
laws
normalize
axioms
#[serial 2317] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2264]
substitute-post
normalize
split-quant
quant
normalize
axioms
#[serial 2318] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2264]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 2321] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2315]
substitute-post
normalize
push
#sw::DDD.imp
#[serial 2369]   normalization of [serial 2367
make-an
split-post
push
#sw::DDD.imp
#[serial 2371] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2369
make-an
replace-port-value
normalize
axioms
#[serial 2372] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2369]
substitute-pre
substitute-pre
normalize
laws
normalize
split@
normalize
replace-port-value
extend-eqr
replace-qv
axioms
#[serial 1067]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T9_VS_AFTER_AP:pav-[x]->pav_check_vrp{};
normalize
laws
axioms
#[serial 1068]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T10_VS_AFTER_AP_IN_VRP:pav_check_vrp-[x]->pav{};
normalize
laws
axioms
#[serial 1069]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T11_VS_AFTER_AP_AFTER_VRP:pav_check_vrp-[x]->va{A};
reduce
reduce
reduce
remove-axioms-post
laws
normalize
push
#sw::DDD.imp
#[serial 2421]   normalization of [serial 2403
make-an
split-post
push
#sw::DDD.imp
#[serial 2441] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2421
make-an
laws
axioms
#[serial 2442] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2421]
substitute-post
normalize
laws
axioms
#[serial 2423]   normalization of [serial 2404]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
split-post
axioms
split-quant
normalize
quant
normalize
axioms
#[serial 2425]   normalization of [serial 2408]
split-post
axioms
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 2427]   normalization of [serial 2416]
split-post
axioms
substitute-pre
normalize
laws
axioms
#[serial 2429]   normalization of [serial 2417]
atomic
laws
axioms
substitute-pre
normalize
laws
normalize
guided-sub-equals[VS]
normalize
substitute-post
normalize
axioms
#[serial 2431]   normalization of [serial 2418]
atomic
laws
axioms
replace-port-value
laws
normalize
axioms
#[serial 2433]   normalization of [serial 2419]
atomic
laws
axioms
#[serial 1070]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T12_AS_AFTER_VS_OR_VP:va-[x]->check_atrial_refractories{};
normalize
laws
axioms
#[serial 1071]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T13_AS:check_atrial_refractories-[x]->sav{A};
reduce
normalize
laws
normalize
atomic
laws
normalize
remove-axioms-post
laws
axioms
push
#sw::DDD.imp
#[serial 2553] applied port output <<pre>> -> <<M[as]>> [serial 2533
make-an
#sw::DDD.imp
#[serial 2547]   normalization of [serial 2541
make-an
substitute-pre
normalize
laws
normalize
guided-sub-equals[AS]
normalize
substitute-post
normalize
axioms
split-post
substitute-post
normalize
axioms
split-quant
normalize
quant
normalize
axioms
laws
normalize
split-post
axioms
#[serial 2565]   normalization of [serial 2558]
substitute-pre
normalize
laws
axioms
#[serial 2570] Law of And-Simplification:  P and true is P [serial 2568]
split-post
axioms
push
#sw::DDD.imp
#[serial 2641] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2570
make-an
substitute-post
normalize
axioms
#[serial 2642] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2570]
substitute-pre
normalize
laws
axioms
#[serial 1072]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T14_AS_AT:check_atrial_refractories-[x]->sav{A};
reduce
atomic
remove-axioms-post
normalize
laws
axioms
normalize
push
#sw::DDD.imp
#[serial 2667]   normalization of [serial 2654
make-an
substitute-pre
split-post
normalize
laws
push
#sw::DDD.imp
#[serial 2716] Associativity: (b.c).a = a.b.c [serial 2708
make-an
substitute-post
normalize
axioms
#[serial 2717] Associativity: (b.c).a = a.b.c [serial 2710]
substitute-post
normalize
axioms
#[serial 2718] Associativity: (b.c).a = a.b.c [serial 2712]
substitute-post
split-quant
normalize
laws
quant
normalize
axioms
#[serial 2669]   normalization of [serial 2658]
substitute-pre
normalize
guided-sub-equals[AS]
substitute-post
normalize
axioms
#[serial 2671]   normalization of [serial 2660]
substitute-pre
normalize
guided-sub-equals[AT]
substitute-post
normalize
axioms
#[serial 2698]   normalization of [serial 2691]
split-post
axioms
push
#sw::DDD.imp
#[serial 2755] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2698
make-an
substitute-post
normalize
axioms
#[serial 2758] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2698]
now
replace-port-value
axioms
#[serial 2700]   normalization of [serial 2692]
split-post
axioms
substitute-post
normalize
split-post
axioms
replace-port-value
axioms
substitute-pre
substitute-pre
normalize
laws
normalize
split@
axioms
#[serial 1073]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T15_STILL_IN_PVARP:check_atrial_refractories-[x]->va{};
normalize
split-post
laws
axioms
#[serial 1074]  <<M(va) and x>> -> <<M(check_vrp)>> for T16_VS_AFTER_VS_OR_VP:va-[x]->check_vrp{};
normalize
laws
axioms
#[serial 1075]  <<M(check_vrp) and x>> -> <<M(va)>> for T17_STILL_IN_VRP:check_vrp-[x]->va{};
normalize
laws
axioms
#[serial 1076]  <<M(check_vrp) and x>> A <<M(va)>> for T18_VRP_EXPIRED:check_vrp-[x]->va{A};
reduce
atomic
remove-axioms-post
laws
normalize
laws
axioms
push
#sw::DDD.imp
#[serial 2820]   normalization of [serial 2807
make-an
split-post
axioms
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split-quant
quant
normalize
axioms
#[serial 2822]   normalization of [serial 2811]
substitute-pre
normalize
guided-sub-equals[VS]
substitute-post
normalize
laws
axioms
#[serial 2841] Associativity: (b.c).a = a.b.c [serial 2826]
split-post
axioms
now
axioms
#[serial 2842] Associativity: (b.c).a = a.b.c [serial 2828]
normalize
now
replace-port-value
laws
axioms
#[serial 2844] Associativity: (b.c).a = a.b.c [serial 2832]
split-post
axioms
substitute-post
normalize
axioms
#[serial 1077]  <<M(va) and x>> A <<M(pav)>> for T19_AP_AFTER_TIMEOUT_VS_OR_VP:va-[x]->pav{A};
reduce
reduce
reduce
normalize
remove-axioms-post
laws
normalize
axioms
push
#sw::DDD.imp
#[serial 2901]   normalization of [serial 2890
make-an
split-post
axioms
substitute-post
normalize
quant
axioms
#[serial 2909]   normalization of [serial 2896]
atomic
normalize
laws
normalize
split-post
axioms
replace-qv
axioms
substitute-pre
normalize
laws
normalize
guided-sub-equals[AP]
normalize
substitute-post
normalize
axioms
#[serial 2911]   normalization of [serial 2897]
atomic
laws
normalize
axioms
#[serial 2923] Law of And-Simplification:  P and true is P [serial 2920]
split-post
axioms
substitute-post
normalize
split-post
axioms
substitute-pre
normalize
laws
normalize
guided-sub-equals[VA_INTERVAL_A()]
split@
axioms
normalize
axioms
#[serial 2930]   normalization of [serial 2921]
replace-qv
axioms
#[serial 2933]   normalization of [serial 2924]
split-post
axioms
push
#sw::DDD.imp
#[serial 3018] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2933
make-an
replace-port
axioms
#[serial 3021] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2933]
replace-qv
axioms
#[serial 3022] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2933]
replace-port
replace-qv
axioms
#[serial 1078]  <<M(sav) and x>> -> <<M(off)>> for T20_STOP:sav-[x]->off{};
axioms
#[serial 1079]  <<M(pav) and x>> -> <<M(off)>> for T20_STOP:pav-[x]->off{};
axioms
#[serial 1080]  <<M(va) and x>> -> <<M(off)>> for T20_STOP:va-[x]->off{};
axioms