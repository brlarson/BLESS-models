#pacer  proof script for Pacer.aadl
push
sort-by-component[sw::DDD.imp]
#[serial 1047] <<I>> -> BLESS::Invariant of thread DDD.im
make-an
normalize
axioms
#[serial 1048] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
normalize
split-post
normalize
axioms
#[serial 1049] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
normalize
split-post
normalize
axioms
#[serial 1050] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
normalize
split-post
normalize
axioms
#[serial 1051] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
normalize
cnf
laws
normalize
axioms
#[serial 1052] Serban's Theorem:  disjunction of execute conditions leaving execution state go, <<M(go)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1053] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
and-over-or-post
laws
normalize
axioms
#[serial 1054] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
cnf
laws
normalize
axioms
#[serial 1055] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
cnf
laws
normalize
axioms
#[serial 1056] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1057]  <<M(go)>> A <<M(va)>> for T0_GO:go-[ ]->va{A};
reduce
normalize
axioms
reduce
reduce
remove-axioms-post
normalize
atomic
laws
normalize
axioms
split-post
axioms
guided-sub-equals[last_ap_or_as]
guided-sub-equals[last_vp_or_vs]
laws
axioms
substitute-both
substitute-both
normalize
laws
normalize
push
#sw::DDD.imp
#[serial 1275]   normalization of [serial 1258
make-an
replace-port
laws
normalize
now
axioms
#[serial 1314]   normalization of [serial 1307]
split-quant
quant
normalize
axioms
#[serial 1316]   normalization of [serial 1308]
sub-equals-and
laws
normalize
laws
normalize
axioms
#[serial 1318]   normalization of [serial 1309]
sub-equals-and
laws
normalize
laws
normalize
axioms
#[serial 1336]   normalization of [serial 1329]
split-post
guided-sub-equals[last_vp_or_vs]
normalize
axioms
guided-sub-equals[last_ap_or_as]
axioms
laws
normalize
axioms
#[serial 1338]   normalization of [serial 1330]
extend-eqr
axioms
#[serial 1058]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:va-[x]->va{A};
reduce
atomic
remove-axioms-post
normalize
laws
axioms
normalize
push
#sw::DDD.imp
#[serial 1412]   normalization of [serial 1398
make-an
substitute-post
split-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
substitute-pre
normalize
laws
axioms
#[serial 1414]   normalization of [serial 1402]
substitute-pre
normalize
laws
normalize
guided-sub-equals[VP]
normalize
split-post
substitute-post
normalize
replace-port
extend-eqr
replace-qv
dist^
normalize
axioms
substitute-post
normalize
and-over-or-post
normalize
laws
normalize
split-post
normalize
axioms
replace-qv
axioms
#[serial 1444]   normalization of [serial 1432]
replace-port
laws
normalize
axioms
#[serial 1446]   normalization of [serial 1437]
split-post
axioms
substitute-pre
normalize
laws
axioms
#[serial 1448]   normalization of [serial 1439]
split-post
axioms
replace-port
axioms
#[serial 1059]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:sav-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
split-post
distribute
normalize
axioms
push
#sw::DDD.imp
#[serial 1625]   normalization of [serial 1615
make-an
replace-port
substitute-pre
normalize
guided-sub-equals[VP]
substitute-post
normalize
laws
split-post
normalize
push
#sw::DDD.imp
#[serial 1751]   normalization of [serial 1748
make-an
split@
replace-port
normalize
extend-eqr
replace-qv
axioms
#[serial 1753]   normalization of [serial 1749]
substitute-post
split@
normalize
axioms
#[serial 1656]   normalization of [serial 1644]
replace-port
laws
normalize
axioms
#[serial 1706]   normalization of [serial 1696]
split-quant
quant
normalize
axioms
#[serial 1716] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1704]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1720] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1694]
replace-port
split@
split-quant
normalize
axioms
#[serial 1721] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1708]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1722] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1717]
substitute-pre
substitute-pre
normalize
laws
normalize
split@
normalize
split-quant
axioms
#[serial 1729]   normalization of [serial 1718]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1731]   normalization of [serial 1719]
replace-port
split@
axioms
#[serial 1060]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
remove-axioms-post
normalize
laws
axioms
split-post
axioms
substitute-post
normalize
split-post
distribute
normalize
axioms
push
#sw::DDD.imp
#[serial 1839]   normalization of [serial 1829
make-an
#sw::DDD.imp
#[serial 1870]   normalization of [serial 1858
make-an
replace-port
laws
normalize
axioms
substitute-pre
normalize
guided-sub-equals[VP]
substitute-post
normalize
laws
split-post
normalize
push
#sw::DDD.imp
#[serial 1971]   normalization of [serial 1968
make-an
split@
replace-port
normalize
extend-eqr
replace-qv
axioms
#[serial 1973]   normalization of [serial 1969]
substitute-post
split@
normalize
axioms
#[serial 1920]   normalization of [serial 1910]
split-quant
quant
normalize
axioms
#[serial 1930] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1918]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1934] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1908]
replace-port
split@
split-quant
normalize
axioms
#[serial 1935] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1922]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1936] Distribution of preconditions, and over or, and distribution of postcondtitions, or over and [serial 1931]
substitute-pre
substitute-pre
split@
split-quant
normalize
laws
split@
split-quant
axioms
#[serial 1943]   normalization of [serial 1932]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1945]   normalization of [serial 1933]
replace-port
split@
axioms
#[serial 1061]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
normalize
laws
axioms
#[serial 1062]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T4_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
normalize
laws
axioms
#[serial 1063]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T5_VS_AFTER_AS_AFTER_VRP:sav_check_vrp-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
axioms
remove-axioms-post
laws
axioms
split-post
substitute-post
normalize
axioms
split-post
normalize
axioms
push
#sw::DDD.imp
#[serial 2058]   normalization of [serial 2048
make-an
substitute-pre
normalize
laws
guided-sub-equals[VS]
normalize
substitute-post
normalize
axioms
#[serial 2089]   normalization of [serial 2077]
replace-port
laws
normalize
axioms
#[serial 2114]   normalization of [serial 2105]
split-quant
quant
normalize
axioms
#[serial 2116]   normalization of [serial 2106]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 2127] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2112]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 2128] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2118]
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 2138]   normalization of [serial 2129]
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1064]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T6_EXPIRED_SENSED_AV_DELAY:sav-[x]->sav_check_url{};
normalize
laws
split-post
axioms
replace-port
normalize
axioms
#[serial 1065]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T7_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP:sav_check_url-[x]->sav{};
normalize
laws
axioms
#[serial 1066]  <<M(sav_check_url) and x>> A <<M(va)>> for T8_TRACKED_VP_AFTER_AS:sav_check_url-[x]->va{A};
reduce
atomic 
normalize
laws
normalize
axioms
remove-axioms-post
normalize
laws
axioms
split-post
axioms
push
#sw::DDD.imp
#[serial 2229]   normalization of [serial 2219
make-an
substitute-pre
normalize
laws
normalize
guided-sub-equals[VP]
normalize
substitute-post
split-post
normalize
axioms
substitute-post
normalize
axioms
#[serial 2260]   normalization of [serial 2248]
replace-port
laws
normalize
axioms
#[serial 2280] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2227]
substitute-post
normalize
split-quant
quant
normalize
axioms
#[serial 2281] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2227]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 2284] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2278]
substitute-post
normalize
push
#sw::DDD.imp
#[serial 2332]   normalization of [serial 2330
make-an
split-post
push
#sw::DDD.imp
#[serial 2334] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2332
make-an
replace-port
normalize
axioms
#[serial 2335] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2332]
substitute-pre
substitute-pre
normalize
laws
normalize
split@
normalize
replace-port
extend-eqr
replace-qv
axioms
#[serial 1067]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T9_VS_AFTER_AP:pav-[x]->pav_check_vrp{};
normalize
laws
axioms
#[serial 1068]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T10_VS_AFTER_AP_IN_VRP:pav_check_vrp-[x]->pav{};
normalize
laws
axioms
#[serial 1069]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T11_VS_AFTER_AP_AFTER_VRP:pav_check_vrp-[x]->va{A};
reduce
reduce
reduce
remove-axioms-post
laws
normalize
push
#sw::DDD.imp
#[serial 2383]   normalization of [serial 2365
make-an
split-post
push
#sw::DDD.imp
#[serial 2403] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2383
make-an
laws
axioms
#[serial 2404] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2383]
substitute-post
normalize
laws
axioms
#[serial 2385]   normalization of [serial 2366]
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
split-post
axioms
split-quant
normalize
quant
normalize
axioms
#[serial 2387]   normalization of [serial 2370]
split-post
axioms
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 2389]   normalization of [serial 2378]
split-post
axioms
substitute-pre
normalize
laws
axioms
#[serial 2391]   normalization of [serial 2379]
atomic
laws
axioms
substitute-pre
normalize
laws
normalize
guided-sub-equals[VS]
normalize
substitute-post
normalize
axioms
#[serial 2393]   normalization of [serial 2380]
atomic
laws
axioms
replace-port
laws
normalize
axioms
#[serial 2395]   normalization of [serial 2381]
atomic
laws
axioms
#[serial 1070]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T12_AS_AFTER_VS_OR_VP:va-[x]->check_atrial_refractories{};
normalize
laws
axioms
#[serial 1071]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T13_AS:check_atrial_refractories-[x]->sav{A};
reduce
normalize
laws
normalize
atomic
laws
normalize
remove-axioms-post
laws
axioms
push
#sw::DDD.imp
#[serial 2515] applied port output <<pre>> -> <<M[as]>> [serial 2495
make-an
#sw::DDD.imp
#[serial 2509]   normalization of [serial 2503
make-an
substitute-pre
normalize
laws
normalize
guided-sub-equals[AS]
normalize
substitute-post
normalize
axioms
split-post
substitute-post
normalize
axioms
split-quant
normalize
quant
normalize
axioms
laws
normalize
split-post
axioms
#[serial 2527]   normalization of [serial 2520]
substitute-pre
normalize
laws
axioms
#[serial 2532] Law of And-Simplification:  P and true is P [serial 2530]
split-post
axioms
push
#sw::DDD.imp
#[serial 2603] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2532
make-an
substitute-post
normalize
axioms
#[serial 2604] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2532]
substitute-pre
normalize
laws
axioms
#[serial 1072]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T14_AS_AT:check_atrial_refractories-[x]->sav{A};
reduce
atomic
remove-axioms-post
normalize
laws
axioms
normalize
push
#sw::DDD.imp
#[serial 2629]   normalization of [serial 2616
make-an
substitute-pre
split-post
normalize
laws
push
#sw::DDD.imp
#[serial 2678] Associativity: (b.c).a = a.b.c [serial 2670
make-an
substitute-post
normalize
axioms
#[serial 2679] Associativity: (b.c).a = a.b.c [serial 2672]
substitute-post
normalize
axioms
#[serial 2680] Associativity: (b.c).a = a.b.c [serial 2674]
substitute-post
split-quant
normalize
laws
quant
normalize
axioms
#[serial 2631]   normalization of [serial 2620]
substitute-pre
normalize
guided-sub-equals[AS]
substitute-post
normalize
axioms
#[serial 2633]   normalization of [serial 2622]
substitute-pre
normalize
guided-sub-equals[AT]
substitute-post
normalize
axioms
#[serial 2660]   normalization of [serial 2653]
split-post
axioms
push
#sw::DDD.imp
#[serial 2717] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2660
make-an
substitute-post
normalize
axioms
#[serial 2720] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2660]
now
replace-port
axioms
#[serial 2662]   normalization of [serial 2654]
split-post
axioms
substitute-post
normalize
split-post
axioms
replace-port
axioms
substitute-pre
substitute-pre
normalize
laws
normalize
split@
axioms
#[serial 1073]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T15_STILL_IN_PVARP:check_atrial_refractories-[x]->va{};
normalize
split-post
laws
axioms
#[serial 1074]  <<M(va) and x>> -> <<M(check_vrp)>> for T16_VS_AFTER_VS_OR_VP:va-[x]->check_vrp{};
normalize
laws
axioms
#[serial 1075]  <<M(check_vrp) and x>> -> <<M(va)>> for T17_STILL_IN_VRP:check_vrp-[x]->va{};
normalize
laws
axioms
#[serial 1076]  <<M(check_vrp) and x>> A <<M(va)>> for T18_VRP_EXPIRED:check_vrp-[x]->va{A};
reduce
atomic
remove-axioms-post
laws
normalize
laws
axioms
push
#sw::DDD.imp
#[serial 2782]   normalization of [serial 2769
make-an
split-post
axioms
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split-quant
quant
normalize
axioms
#[serial 2784]   normalization of [serial 2773]
substitute-pre
normalize
guided-sub-equals[VS]
substitute-post
normalize
laws
axioms
#[serial 2803] Associativity: (b.c).a = a.b.c [serial 2788]
split-post
axioms
now
axioms
#[serial 2804] Associativity: (b.c).a = a.b.c [serial 2790]
normalize
now
replace-port
laws
axioms
#[serial 2806] Associativity: (b.c).a = a.b.c [serial 2794]
split-post
axioms
substitute-post
normalize
axioms
#[serial 1077]  <<M(va) and x>> A <<M(pav)>> for T19_AP_AFTER_TIMEOUT_VS_OR_VP:va-[x]->pav{A};
reduce
reduce
reduce
normalize
remove-axioms-post
laws
normalize
axioms
push
#[serial 2776]   normalization of [serial 2765
make-an
split-post
axioms
substitute-post
normalize
quant
axioms
#[serial 2784]   normalization of [serial 2771]
atomic
normalize
laws
normalize
split-post
axioms
replace-qv
axioms
substitute-pre
normalize
laws
normalize
guided-sub-equals[AP]
normalize
substitute-post
normalize
axioms
#[serial 2786]   normalization of [serial 2772]
atomic
laws
normalize
axioms
#[serial 2798] Law of And-Simplification:  P and true is P [serial 2795]
split-post
axioms
substitute-post
normalize
split-post
axioms
substitute-pre
normalize
laws
normalize
guided-sub-equals[VA_INTERVAL_A()]
split@
axioms
normalize
axioms
#[serial 2805]   normalization of [serial 2796]
replace-qv
axioms
#[serial 2808]   normalization of [serial 2799]
split-post
axioms
push
make-an
#[serial 2896] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2808]
replace-port
axioms
#[serial 2899] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2808]
replace-qv
axioms
#[serial 2900] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2808]
replace-port
replace-qv
axioms
#[serial 1078]  <<M(sav) and x>> -> <<M(off)>> for T20_STOP:sav-[x]->off{};
axioms
#[serial 1079]  <<M(pav) and x>> -> <<M(off)>> for T20_STOP:pav-[x]->off{};
axioms
#[serial 1080]  <<M(va) and x>> -> <<M(off)>> for T20_STOP:va-[x]->off{};
axioms