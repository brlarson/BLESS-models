#This file, script.txt, was produced the BLESS Proof Assistant v3.1
#  at Sat Jan 16 18:54:23 CST 2021 by brianlarson
push
sort-by-component[ATR::AtCounter.imp]
#[serial 1021] <<M(wait)>> -> <<I>> from invariant I when complete state wait has Assertion <<M(wait)>> in its definition
make-an
axioms
#[serial 1022] <<M(go)>> -> <<I>> from invariant I when complete state go has Assertion <<M(go)>> in its definition.
axioms
#[serial 1023] Serban's Theorem:  disjunction of execute conditions leaving execution state check_wait, <<M(check_wait)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1024] Serban's Theorem:  disjunction of execute conditions leaving execution state check_go, <<M(check_go)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1025] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1026]  <<M(start)>> -> <<M(wait)>> for dc_begin:start-[ ]->wait{};
axioms
#[serial 1027]  <<M(wait) and x>> -> <<M(check_wait)>> for dc_was:wait-[x]->check_wait{};
normalize
laws
axioms
#[serial 1028]  <<M(check_wait) and x>> A <<M(wait)>> for dc_wnen:check_wait-[x]->wait{A};
reduce
atomic
laws
now
??
axioms
#[serial 1029]  <<M(check_wait) and x>> A <<M(go)>> for dc_wen:check_wait-[x]->go{A};
reduce
atomic
laws
axioms
normalize
push
#ATR::AtCounter.imp
#[serial 1142]   normalization of [serial 1126
make-an
split@
now
axioms
#[serial 1144]   normalization of [serial 1135]
split@
now
laws
substitute-post
substitute-post
normalize
split-post
normalize
laws
push
#ATR::AtCounter.imp
#[serial 1174] Law of And-Simplification:  P and P is P [serial 1166
make-an
guided-sub-equals[et]
now
axioms
#[serial 1175] Law of And-Simplification:  P and P is P [serial 1167]
guided-sub-equals[last_at]
guided-sub-equals[et]
guided-sub-equals[c]
counting
now
axioms
#[serial 1176] Law of And-Simplification:  P and P is P [serial 1172]
guided-sub-equals[last_at]
laws
now
laws
normalize
axioms
#[serial 1146]   normalization of [serial 1136]
now
??
guided-sub-equals[atCount]
guided-sub-equals[et]
counting
now
axioms
#[serial 1148]   normalization of [serial 1139]
now
laws
axioms
#[serial 1150]   normalization of [serial 1140]
now
laws
axioms
#[serial 1030]  <<M(go) and x>> -> <<M(check_go)>> for dc_gas:go-[x]->check_go{};
normalize
axioms
#[serial 1031]  <<M(check_go) and x>> A <<M(wait)>> for dc_gnen:check_go-[x]->wait{A};
reduce
atomic
normalize
laws
normalize
axioms
now
axioms
??
axioms
#[serial 1032]  <<M(check_go) and x>> A <<M(go)>> for dc_ggo:check_go-[x]->go{A};
reduce
axioms
atomic
normalize
laws
normalize
push
make-an
#[serial 1257]   normalization of [serial 1247]
now
laws
axioms
#[serial 1259]   normalization of [serial 1252]
split-post
axioms
substitute-post
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
counting
normalize
axioms
#[serial 1278] Law of And-Simplification:  P and true is P [serial 1274]
split-post
axioms
now
laws
axioms
#[serial 1279] Law of And-Simplification:  P and true is P [serial 1275]
split-post
axioms
now
laws
axioms
#[serial 1283]   normalization of [serial 1276]
substitute-post
normalize
split-post
axioms
substitute-post
normalize
guided-sub-equals[last_at]
axioms
laws
normalize
laws
normalize
guided-sub-equals[now]
axioms
#[serial 1285]   normalization of [serial 1277]
??
now
guided-sub-equals[atCount]
axioms