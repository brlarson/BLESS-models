#ascounter.ps
push
sort-by-component[ATR::AsCounter.imp]
#ATR::AsCounter.imp
#[serial 1034] <<M(wait)>> -> <<I>> from invariant I when complete state wait has Assertion <<M(wait)>> in its definition
make-an
normalize
axioms
#[serial 1035] <<M(go)>> -> <<I>> from invariant I when complete state go has Assertion <<M(go)>> in its definition.
normalize
axioms
#[serial 1036] Serban's Theorem:  disjunction of execute conditions leaving execution state check_wait, <<M(check_wait)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1037] Serban's Theorem:  disjunction of execute conditions leaving execution state check_go, <<M(check_go)>> -> <<e1 or e2 or . . . en>>
normalize
now
laws
axioms
#[serial 1038] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1039]  <<M(start)>> -> <<M(wait)>> for dc_begin:start-[ ]->wait{};
normalize
axioms
#[serial 1040]  <<M(wait) and x>> -> <<M(check_wait)>> for dc_was:wait-[x]->check_wait{};
normalize
laws
axioms
#[serial 1041]  <<M(check_wait) and x>> A <<M(wait)>> for dc_wnen:check_wait-[x]->wait{A};
reduce
atomic
normalize
laws
axioms
now
??
axioms
#[serial 1042]  <<M(check_wait) and x>> A <<M(go)>> for dc_wen:check_wait-[x]->go{A};
reduce
atomic
laws
normalize
laws
axioms
normalize
push
#ATR::AsCounter.imp
#[serial 1182] Law of And-Simplification:  P and true is P [serial 1171
make-an
split@
normalize
now
laws
axioms
#[serial 1183] Law of And-Simplification:  P and true is P [serial 1173]
now
laws
axioms
#[serial 1185]   normalization of [serial 1179]
now
axioms
#[serial 1187]   normalization of [serial 1180]
substitute-post
normalize
split-post
push
#ATR::AsCounter.imp
#[serial 1210] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1208
make-an
substitute-post
normalize
guided-sub-equals[c]
guided-sub-equals[et]
guided-sub-equals[last_as]
counting
axioms
#[serial 1211] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1208]
substitute-post
guided-sub-equals[et]
split@
laws
axioms
#[serial 1212] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1208]
substitute-post
normalize
guided-sub-equals[last_as]
laws
normalize
laws
normalize
axioms
#[serial 1189]   normalization of [serial 1181]
??
guided-sub-equals[et]
now
guided-sub-equals[asCount]
counting
now
laws
axioms
#[serial 1043]  <<M(go) and x>> -> <<M(check_go)>> for dc_gas:go-[x]->check_go{};
normalize
axioms
#[serial 1044]  <<M(check_go) and x>> A <<M(wait)>> for dc_gnen:check_go-[x]->wait{A};
normalize
reduce
atomic
laws
normalize
axioms
now
axioms
??
axioms
#[serial 1045]  <<M(check_go) and x>> A <<M(go)>> for dc_ggo:check_go-[x]->go{A};
reduce
normalize
axioms
push
#ATR::AsCounter.imp
#[serial 1286]   normalization of [serial 1280
make-an
split@
laws
axioms
#[serial 1289]   normalization of [serial 1282]
atomic
substitute-both
substitute-both
normalize
laws
normalize
counting
normalize
axioms
#[serial 1291]   normalization of [serial 1283]
substitute-both
normalize
atomic
normalize
split-post
axioms
laws
axioms
split@
laws
now
axioms
#[serial 1293]   normalization of [serial 1284]
atomic
normalize
laws
normalize
??
now
guided-sub-equals[asCount]
axioms
substitute-both
substitute-post
normalize
laws
normalize
split-post
axioms
guided-sub-equals[last_as]
laws
normalize
axioms