#  You chose proof script: /Users/brianlarson/git/BLESS-models/DDDRwE/proof-scripts/subscripts/atrcontrol.ps
sort-by-component[ATR::ATRcontrol.imp]
#ATR::ATRcontrol.imp
#[serial 1030] <<M(normal)>> -> <<I>> from invariant I when complete state normal has Assertion <<M(normal)>> in its definition
make-an
axioms
#[serial 1031] <<M(atr_duration)>> -> <<I>> from invariant I when complete state atr_duration has Assertion <<M(atr_duration)>> in its definition.
axioms
#[serial 1032] <<M(fallback)>> -> <<I>> from invariant I when complete state fallback has Assertion <<M(fallback)>> in its definition.
axioms
#[serial 1033] Serban's Theorem:  disjunction of execute conditions leaving execution state check_fallback, <<M(check_fallback)>> -> <<e1 or e2 or . . . en>>
normalize
cnf
laws
normalize
axioms
#[serial 1034] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1035] Serban's Theorem:  disjunction of execute conditions leaving execution state check_duration, <<M(check_duration)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
laws
cnf
laws
normalize
axioms
#[serial 1036] Serban's Theorem:  disjunction of execute conditions leaving execution state check_normal, <<M(check_normal)>> -> <<e1 or e2 or . . . en>>
normalize
laws
cnf
laws
normalize
axioms
#[serial 1037]  <<M(start)>> -> <<M(normal)>> for atrd_go:start-[ ]->normal{};
axioms
#[serial 1038]  <<M(normal) and x>> -> <<M(check_normal)>> for norm_as:normal-[x]->check_normal{};
normalize
replace-port
laws
axioms
#[serial 1039]  <<M(check_normal) and x>> -> <<M(normal)>> for norm_few:check_normal-[x]->normal{};
normalize
laws
axioms
#[serial 1040]  <<M(check_normal) and x>> A <<M(atr_duration)>> for norm_detect:check_normal-[x]->atr_duration{A};
reduce
normalize
laws
push
#ATR::ATRcontrol.imp
#[serial 1203]   normalization of [serial 1200
make-an
split-post
axioms
push
#ATR::ATRcontrol.imp
#[serial 1209] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1203
make-an
substitute-both
normalize
DeMorgan
replace<=
normalize
guided-sub-equals[duration_count]
axioms
#[serial 1212] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1203]
substitute-both
normalize
replace<=
normalize
DeMorgan
normalize
guided-sub-equals[(numberof t:time in detection_time .. now that AS@t )]
axioms
#[serial 1213] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1203]
guided-sub-equals[duration_count]
substitute-pre
replace-port-value
normalize
axioms
#[serial 1208] Associativity: (b.c).a = a.b.c [serial 1205]
replace-port
remove-axioms-post
laws
substitute-post
normalize
atomic
laws
substitute-pre
normalize
split-post
axioms
counting
axioms
#[serial 1041]  <<M(check_normal) and x>> -> <<M(normal)>> for norm_dis:check_normal-[x]->normal{};
normalize
laws
axioms
#[serial 1042]  <<M(atr_duration) and x>> -> <<M(check_duration)>> for dur_as:atr_duration-[x]->check_duration{};
normalize
laws
normalize
split-post
axioms
replace-port
axioms
#[serial 1043]  <<M(check_duration) and x>> A <<M(normal)>> for dur_norm:check_duration-[x]->normal{A};
normalize
laws
atomic
laws
axioms
#[serial 1044]  <<M(check_duration) and x>> A <<M(fallback)>> for dur_fb:check_duration-[x]->fallback{A};
normalize
laws
reduce
atomic
push
make-an
#ATR::ATRcontrol.imp
#[serial 1302] P -> P1 in concurrent composition for [serial 1301]
replace-port
replace-port-value
normalize
laws
remove-axioms-post
laws
axioms
#[serial 1305] applied port output <<pre>> -> <<M[atr_fallback]>> [serial 1303]
substitute-axioms
normalize
replace-port-value
replace-port
laws
equivalent
replace->
DeMorgan
normalize
and-over-or-pre
laws
normalize
or-over-and-pre
normalize
laws
normalize
laws
normalize
axioms
#[serial 1306] applied port output <<pre and M[atr_fallback]@now>> -> <<post>> [serial 1303]
replace-port
laws
split-post
axioms
substitute-post
normalize
split-post
axioms
normalize
push
make-an
#ATR::ATRcontrol.imp
#[serial 1365] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1363]
replace-port-value
transitive
equivalent