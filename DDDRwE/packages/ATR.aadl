---ATR.aadl
--atrial tachycardia response
package ATR
public
	with BLESS, BLESS_Types, PACE_Data;
	flag renames data BLESS_Types::flag;
	time renames data BLESS_Types::Time;

	annex Assertion {**
	ghost variables
	def DUR~quantity whole  --When in ATR Duration, the PG shall delay a programmed number of cardiac 
--   cycles before entering Fallback.

-- 5.6 Atrial Tachycardia Response (ATR)
-- The Atrial Tachycardia Response prevents long term pacing of a patient at 
-- unacceptably high rates during atrial tachycardia. When Atrial Tachycardia 
-- Response is enabled, the pulse generator shall declare an atrial tachycardia 
-- if the intrinsic atrial rate exceeds the URL for a sufficient amount of time.

-- 5.6.1 Atrial Tachycardia Detection
-- The atrial tachycardia (AT) detection algorithm determines onset and cessation
--   of atrial tachycardia.
-- 1. AT onset shall be detected when the intervals between atrial senses are 
--   predominately, but not exclusively, faster than URL.
-- 2. AT cessation shall be detected when the intervals between atrial senses are 
--   mostly, but not exclusively, SLOWER than URL.
-- 3. The detection period shall be short enough so ATR therapy is not unnessarily 
--   delayed nor continued.
-- 4. The detection period shall be long enough that occasional premature atrial 
--   contractions do not cause unnecessary ATR therapy, nor cease necessary ATR 
--   therapy upon occasional slow beats.	

-- ATR_DETECT interprets 5.6.1.1 that "predominantly" means at least 5 of the last 7
-- atrial senses had less then the Upper Ralte Limit Interval since the previous atrial sense
-- Atrial senses faster than URL are considered "AT" atrial tachycrdia
<<ATR_DETECT: x~time :  --at least 5 of 7 A-events were AT
  exists s~time which s<x that  --there is an earlier time s
   ((7=(numberof t~time in s..x that AS@t))  --seven atrial senses
    and (5<=(numberof t~time in s..x that (AS@t and AT@t))))>>  --five or more were faster than URL
 
-- ATR_END interprets 5.6.1.2 as 3 or fewer of the previous 7 atrial senses were AT    
<<ATR_END: x~time :  --at most 3 of 7 A-events were AT
  exists s~time which s<x that  --there is an earlier time s
   (7 = (numberof t~time in s..x that AS@t)  --seven atrial senses
    and 3 >= (numberof t~time in s..x that (AS@t and AT@t)))>>  --three or fewer were faster than URL


-- 5.6.2 ATR Duration
-- ATR Duration works as follows:
-- 1. When atrial tachycardia is detected, the ATR algorithm shall enter an 
--   ATR Duration state.
-- 2. When in ATR Duration, the PG shall delay a programmed number of cardiac 
--   cycles before entering Fallback.
-- 3. The Duration delay shall be terminated immediately and Fallback shall 
--   be avoided if, during the Duration delay, the ATR detection algorithm 
--   determines that atrial tachycardia is over.
<<ATR_DURATION: d~time, x~time:  --wait to be sure a-tachy continues
  ATR_DETECT(d) and  --detection met at time d
  (DUR > (numberof t~time in d..x that AS@t))  --cc since then is less than needed for fall-back
  and  (all t2~time in d..x are not ATR_END(t2)) >>  --not ended ATR since then
 
-- 5.6.3 ATR Fallback
-- If the atrial tachycardia condition exists after the ATR Duration delay 
--   is over, the following shall occur:
-- 1. The PG enters a Fallback state and switches to a VVIR Fallback Mode.
-- 2. The pacing rate is dropped to the lower rate limit. The fallback time is 
--   the total time required to drop the rate to the LRL.
-- 3. During Fallback, if the ATR detection algorithm determines that atrial 
--   tachycardia is over, the following shall occur:
--     Fallback is terminated immediately
--     The mode is switched back to normal
-- 4. ATR-related mode switches shall always be synchronized to a ventricular 
--   paced or sensed event. 
<<FB: d~time, x~time : 
  ATR_DETECT(d) and  --detection met at time d
  (DUR<=(numberof t~time in d..x that AS@t))  --cc since then is more than needed for fall-back
  and  (all t2~time in d..x are not ATR_END(t2)) >>  --not ended ATR since then

		
	**};

	thread group AtrialTachyResponse
		features
			atr_enable: in data port flag --is ATR prescribed?
        {BLESS::Value=>"<<returns boolean :=ATR_ENABLE>>";};
	 		dur: in data port PACE_Data::CCcount; --number of cci in duration before fallback
			fb: out data port flag --fall-back to LRL, ignore A-channel
			{BLESS::Assertion => "<<FB>>";};
			as: in event port --non-refractory atrial sense
			  {BLESS::Assertion=>"<<AS>>";};
			at: in event port --non-refractory atrial sense above URL
			  {BLESS::Assertion=>"<<AT>>";};
			atr_detect: out data port flag  --ATR detection met
			{BLESS::Assertion => "<<ATR_DETECT(now)>>";};
			atr_fallback: out event port --start fall-back to VVI; marker ATR-FB
			{BLESS::Assertion => "<<FB_START>>";};
			atr_end: out data port flag  --resume DDD; marker ATR-End
			{BLESS::Assertion => "<<ATR_END(now)>>";};

	end AtrialTachyResponse;

	thread group implementation AtrialTachyResponse.imp
		subcomponents
			atcounter: thread AtCounter.imp;
			atrcontrol: thread ATRcontrol.imp;
		connections
			atren: port atr_enable -> atrcontrol.atr_enable; --enamble ATR
			durc: port dur -> atrcontrol.dur; --CCI after detection before fall-back (duration)
			fbo: port atrcontrol.fb -> fb; --fall-back, stays on until end
			atrd: port atcounter.atr_detect -> atrcontrol.atr_detect; --A-tachy detected
			atrdo : port atcounter.atr_detect -> atr_detect;
			atrf: port atrcontrol.atr_fallback -> atr_fallback; --fall-back start
			atre:  port atcounter.atr_end -> atrcontrol.atr_end;
			atreo: port atcounter.atr_end -> atr_end; --A-tachy ended
			asatr: port as -> atrcontrol.as;
			asatc: port as -> atcounter.as;
			atiac: port at -> atcounter.at; --atrial tachycardia
	end AtrialTachyResponse.imp;

	thread AtCounter
		features
			enable: in data port flag {BLESS::Assertion => "<<ATR_ENABLE>>";};
			as: in event port {BLESS::Assertion => "<<AS>>";};
			at: in event port {BLESS::Assertion => "<<AT>>";};
			atr_detect: out data port flag {BLESS::Assertion => "<<ATR_DETECT(now)>>";};
			atr_end: out data port flag {BLESS::Assertion => "<<ATR_END(now)>>";};
		properties
			Dispatch_Protocol => Sporadic;
--    BLESS::Invariant => "<<AS_COUNT(now)>>"; 
	end AtCounter;

	thread implementation AtCounter.imp
		annex BLESS 
{**
  invariant  <<true>>
  variables
    -- timestamps for the previous 7 AS (#1 is oldest; #7 is newest)
    asTimestamp ~ array [1 .. 7] of time
      <<AS_TIMESTAMP: : all i ~ quantity whole in 1 .. 7 are AS@asTimestamp[i] >>
    --history whether the previous 7 atrial senses was faster than upper rate limit
    atHistory ~ array [1 .. 7] of boolean := false
      <<AT_HISTORY: : all i ~ quantity whole in 1 .. 7 are atHistory[i] iff AT@asTimestamp[i] >>
    --count of how many of the previous seven AS were also AT
    c ~ quantity whole:=0  --count of AT for last seven AS
      <<AT_COUNT: n ~ time : c = (numberof t~time in asTimestamp[1]..n that AT@t) >>;
    --counter to determene when at lease seven AS have been received  
    fill_count ~ quantity whole := 0
      <<FILLING: : all i ~ quantity whole in 1 .. fill_count are ( AS@asTimestamp[i] and atHistory[i] iff AT@asTimestamp[i] ) >>
  states
    start: initial state <<c=0 and fill_count=0 >>
    --fill the arrays with 7 samples
    fill : complete state 
      << FILLING() >>
    check_fill : state
      << as@now and FILLING() >>
    run : complete state 
      << AS_TIMESTAMP() and AT_HISTORY() >> 
    err : final state  --error occurred
  transitions
    atc_init: start -[ ]-> fill
    atc_fill: fill -[on dispatch as]-> check_fill
    atc_full: check_fill -[ fill_count = 7 ]-> run
    atc_serb: check_fill -[ fill_count > 7 ]-> err  --for Serban's Theorem
    atc_filling: check_fill -[ fill_count < 7 ]-> fill
      {  --still filling
      | asTimestamp[fill_count+1], atHistory[fill_count + 1], fill_count := now, at, fill_count+1 |
      }
    atc_run: run -[ on dispatch as ]-> run
      {  --have 7 samples
      declare
        tempTimestamp  ~ array [1 .. 7] of time
        tempHistory ~ array [1 .. 7] of boolean
      {
      forall j in 1 .. 6 
        { | tempTimestamp[j], tempHistory[j] := asTimestamp[j+1], atHistory[j+1] | }
       <<  (all i ~ quantity whole in 1 .. 6 are AS@tempTimestamp[i]) and 
            (all i ~ quantity whole in 1 .. 6 are tempHistory[i] iff AT@tempTimestamp[i]) >>  
      ;
      --put in new values
      | tempHistory[7], tempTimestamp[7] := at, now |
       <<  (all i ~ quantity whole in 1 .. 7 are AS@tempTimestamp[i]) and 
            (all i ~ quantity whole in 1 .. 7 are tempHistory[i] iff AT@tempTimestamp[i]) >>  
      ;      
      -- add to count if AT and subtract last atHistory
      c := c + (if at then 1 else 0) + (if atHistory[1] then -1 else 0)
      ;
      --copy back
      | atHistory, asTimestamp := tempHistory, tempTimestamp |
      }
      ;
      --ATR detected?
      atr_detect!(c>=5)
      ;
      --ATR ended?
      atr_end!(c<=3)      	     
      }  --end of atc_run
**};
	end AtCounter.imp;

	thread ATRcontrol
		features
			atr_enable: in data port flag 
			  {BLESS::Assertion => "<<ATR_ENABLE>>";};
			dur: in data port PACE_Data::CCcount --number of cci in duration before fallback
			  {BLESS::Value => "<<returns quantity whole := DUR >>";}; 
			fb: out data port flag --fall-back to LRL, ignore A-channel
			  {BLESS::Assertion => "<<FB>>";};
			atr_detect: in event data port flag --ATR detection met
			  {BLESS::Assertion => "<<ATR_DETECT(now)>>";};
			atr_end : in event  data port flag 
			  {BLESS::Assertion => "<<ATR_END(now)>>";};
			atr_fallback: out event port --start fall-back to VVI; marker ATR-FB
			  {BLESS::Assertion => "<<FB_START>>";};
			as: in event port  --atrial sense for counting AS for determining whether "Duration" has been met 5.6.2
			  {BLESS::Assertion => "<<AS>>";};
		properties
			Dispatch_Protocol => Sporadic;
	end ATRcontrol;

	thread implementation ATRcontrol.imp
		annex BLESS {**

assert
--
--<<AXIOM_ATR_DETECT:x~time: 5<=(numberof j~quantity whole in 1 .. 7 that atr_detect^(-j)) iff ATR_DETECT(x)>>
--<<AXIOM_ATR_END:x~time: 3>=(numberof j~quantity whole in 1 .. 7 that at^(-j)) iff ATR_END(x)>>
  <<NOT_ATR_END:x~time: (all t2~time in detection_time..x are not ATR_END(t2))>>
  <<AXIOM_DUR_POSITIVE: : DUR > 1>>
--<<AXIOM_FB: : FB iff FB(d:detection_time, x:now)>>
  <<AXIOM_FB_START: n~time : 
    DUR <= duration_count
    and ATR_ENABLE
    and not ATR_END(n)
    and AS@n
    and duration_count = DC(n)
    and ATR_DETECT(detection_time)
    and not ATR_END(n) 
    implies FB_START and FB>>	 
  <<AXIOM_FB_END: n~time :  ATR_END(n) or not ATR_ENABLE implies not FB >> 

  	
invariant <<true>>

variables
  duration_count ~ quantity whole := 0 --number of cardiac cycles since detection
    <<DC: x~time returns quantity whole := (numberof t~time in detection_time .. x that AS@t ) >>
  detection_time ~ time := 0.0 ms
  
states
  start : initial state 
    << duration_count = 0 and detection_time=0.0 ms >>;  
  normal : complete state  --normal pacing
    << duration_count = 0 and detection_time=0.0 ms >>;
  check_normal: state 
    << as@now and duration_count = 0 and detection_time=0.0 ms >>
  atr_duration: complete state  -- wait for duration count to not mode switch on brief AT
    << ATR_DETECT(detection_time) --detection criteria met,
       and duration_count = DC(now)  --duration_count is number of as since detection_time
       and duration_count<dur  --too few CCI since detection for mode switch
       and not ATR_END(now) --not ended or fallback
       and not FB(d:detection_time,x:now)>>;  
  check_duration: state
    << as@now 
       and ATR_DETECT(detection_time)
       and duration_count = DC(now)  --duration_count is number of as since detection_time
--       and duration_count<dur  --too few CCI since detection for mode switch
--       and not FB(d:detection_time,x:now)
       and not ATR_END(now) >> 
  fallback: complete state  --switch to ventricle-only pacing at LRL
    << ATR_DETECT(detection_time)
       and FB(d:detection_time,x:now)
       and not ATR_END(now) >> 
  check_fallback: state
    << as@now and ATR_DETECT(detection_time)
       and FB(d:detection_time,x:now)
       and not ATR_END(now) >> 
  done : final state;
  err : final state;

transitions
  atrd_go: --transition out of initial state
    start -[ ]-> normal

  norm_as: --check each atrial sense
    normal -[on dispatch as]-> check_normal
        
  norm_few: --too few AT for detection
    check_normal -[not atr_detect or atr_end]-> normal  
    
  norm_detect: --detection criteria met
    check_normal -[atr_detect and not atr_end]-> atr_duration  
      {  
      	| duration_count, detection_time := 1, now | 
      	<< duration_count = 1 and detection_time = now and as@now 
      	   and 1 = DC(now) and ATR_DETECT(detection_time) 
      	   and not ATR_END(now) and AXIOM_DUR_POSITIVE() >>
      }
    
  norm_dis:  --enable lost
    check_normal -[not atr_enable]-> normal
      
  dur_as:  --check sense while waiting for duration to be met
    atr_duration -[on dispatch as]-> check_duration
    
  dur_norm: -- too few AT to stay in duration
    check_duration -[atr_end or not atr_enable]-> normal  
      { | detection_time, duration_count := 0.0 ms, 0 | }
    
  dur_fb: -- duration condition met, commense fallback
    check_duration -[not atr_end and dur <= duration_count and atr_enable]-> fallback  
      { << as@now and ATR_DETECT(detection_time) and duration_count = DC(now) 
      	   and not atr_end and dur <= duration_count and atr_enable 
      	   and AXIOM_FB_START(now)>>
      	atr_fallback! & fb!(true)
      }
    
  dur_dur: --duration condition not met
    check_duration -[not atr_end  and dur > duration_count and atr_enable]-> atr_duration 
      { duration_count := duration_count + 1 } 
    
  fall_as: --check sense while in fallback
    fallback -[on dispatch as]-> check_fallback
    
  fall_end: --too few AT to remain in ATR fallback or enable lost
    check_fallback -[atr_end or not atr_enable]-> normal
      { << ATR_END(now) and not ATR_ENABLE and AXIOM_FB_END(now) >>
      	fb!(false)
      	&
      	| detection_time, duration_count := 0.0 ms, 0 |
      }
      
  fall_nc:  --remain in fallback
    check_fallback -[not atr_end and atr_enable]-> fallback
    
**};
	end ATRcontrol.imp;

end ATR;