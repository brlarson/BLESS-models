--PACEMAKER.aadl

package PACEMAKER
public
	with BLESS, BLESS_Types, Devices, --Base_Types, sw, 
	PACE_data, PGprocess, mark, Telemetry, History;
	T renames data BLESS_Types::Time;
	flag renames data BLESS_Types::flag;
	milliG renames data PACE_data::milliG;

	system PG
--the pulse generator, connects to atrial and ventricular leads through header
--talks with DCM through RF or inductive coupling
		features
			toDCM: requires bus access; --inductive or rf link between PG and DCM
			A_lead: requires bus access; --lead to right atrium
			V_lead: requires bus access; --lead to right ventricle
	end PG;

	system implementation PG.imp
--contains susbsystems for analog front-end, telemetry, and history
--the process holds all the threads
--full model will have (physical) processor, memory, and buses 
--just logical (software) architecture for now.
		subcomponents
			front_end: device Devices::front_end.imp;
			telemetry: system Telemetry::Telemetry.imp;
			history: system History::History.imp;
			pgp: process PGprocess::pg_process.imp;
			accelerometer: device Devices::accelerometer.imp;
			hall: device Devices::HallEffect.imp;
		connections
			--header to front-end
			abus: bus access A_lead <-> front_end.A_lead;
			vbus: bus access V_lead <-> front_end.V_lead;
			--telemetry
			tbus: bus access toDCM <-> telemetry.toDCM;
			ts: port telemetry.settings -> pgp.settings;
--  	th : port telemetry.episodes <-> history.episodes;
			--front end to pg_process
			asig: port front_end.a -> pgp.a; --atrial signal
			vsig: port front_end.v -> pgp.v; --ventricular signal
			anoise: port front_end.tna -> pgp.tna; --atrial noise detected
			vnoise: port front_end.tnv -> pgp.tnv; --ventricular noise detected
			--markers
			amarkt: port pgp.mark_A -> telemetry.mark_A;
			vmarkt: port pgp.mark_V -> telemetry.mark_V;
			xmarkt: port pgp.mark_X -> telemetry.mark_X;
			amarkh: port pgp.mark_A -> history.mark_A;
			vmarkh: port pgp.mark_V -> history.mark_V;
			xmarkh: port pgp.mark_X -> history.mark_X;
			--pg_process to front end
			pa: port pgp.ap -> front_end.ap;
			pv: port pgp.vp -> front_end.vp;
			--XL
			axl: port accelerometer.xl -> pgp.xl;
			--Hall-effect switch
			hes: port hall.magnet -> pgp.magnet;
		properties
			BLESS::Invariant => "<<LRL_A(now)>>";
	end PG.imp;



end PACEMAKER;