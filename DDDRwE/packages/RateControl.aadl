--RateControl.aadl
--determine pacing rate; this is the most important function

package rc
public
with BLESS, BLESS_Types, --Base_Types, PACEMAKER, 
  PACE_data;

flag renames data BLESS_Types::flag;
ms renames data PACE_data::ms;
milliG renames data PACE_data::milliG;
--minimum3 renames subprogram MinMax::minimum3;
--maximum3 renames subprogram MinMax::maximum3;


thread RateController  --choose minimum and maximum cardiac cycle intervals
  features
  --outputs
  min_cci: out data port ms  --minimum allowed CCI, like dynamic URLi
    {BLESS::Value=>"<<returns quantity ms :=MIN_CCI>>";};
  max_cci: out data port ms  --maximum allowed CCI, like dynamic LRLi 
    {BLESS::Value=>"<<returns quantity ms :=MAX_CCI>>";};
  atr_max_cci: out data port ms  --maximum allowed CCI, during ATR
    {BLESS::Value=>"<<returns quantity ms :=FB_MaxCCI()>>";};
  dav: out data port ms  --dynamic AV delay
    {BLESS::Value=>"<<returns quantity ms :=DAV_A()>>";};
--inputs
  cci: in event data port ms  --most recent cardiac cycle interval
    {BLESS::Value=>"<<returns quantity ms :=CCI>>";};
  xl: in data port milliG  --accelerometer measure of motion
    {BLESS::Value=>"<<returns quantity milliG :=XL>>";};
  mag: in data port flag  --magnet mode (not used)
    {BLESS::Assertion=>"<<MAG>>";};
  -- fb now handled by modes switch from normal to atr_mode
--  fb: in data port flag  --fall-back to LRL, ignore A-channel
--    {BLESS::Assertion=>"<<FB(d:detect_time, x:now)>>";};
  last_v_was_vs: in data port flag
    {BLESS::Assertion=>"<<LAST_V_WAS_VS(now)>>";};
--parameters  
  rr: in data port flag
    {BLESS::Assertion=>"<<RR>>";};  --rate responsive
  rf: in data port PACE_Data::ResponseFactor
    {BLESS::Value=>"<<returns quantity rf :=RESPONSE_FACTOR>>";};  --response factor
  rt: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=REACTION_TIME>>";};  --reaction time
  at: in data port milliG
    {BLESS::Value=>"<<returns quantity milliG :=ACTIVITY_THRESHOLD>>";};  --activity threshold
  ct: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=RECOVERY_TIME>>";};  --recovery time
  lrl: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=LRL>>";};  --lower rate limit interval 
  url: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=URL>>";};  --upper rate limit interval 
  msr: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=MSR>>";};  --maximum sensor rate interval
  av: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=AV>>";};  --AV delay (fixed)
  min_av: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=MIN_AV>>";};  --minimum AV delay
  drs: in data port PACE_data::percent
    {BLESS::Value=>"<<returns quantity percent :=DRS>>";};  --down-rate smoothing
  urs: in data port PACE_data::percent
    {BLESS::Value=>"<<returns quantity percent :=URS>>";};  --up-rate smoothing
  fb_time : in data port BLESS_Types::Time
    {BLESS::Value=>"<<returns time:=FBT>>";};  --time to ATR fall back from URL to LRL
  hy: in data port ms
    {BLESS::Value=>"<<returns quantity ms :=HY>>";};  --hysteresis delay, added to max_cci when last v was vs
  requires modes normal:mode; atr_mode:mode;
end RateController;


--normal mode behavior
thread implementation RateController.normal
annex BLESS
{**
  
	
invariant <<true>>

variables
  dur_met ~ time;  --ATR duration met, start of ATR fallback

states
first_rate : initial state;
wait : complete state;
check_zero_division : state;
err : final state;  --division by zero detected
done : final state;

transitions
RC0_init : first_rate -[ ]-> wait {} ;

RC1_cci : wait -[on dispatch cci ]-> check_zero_division{};

RC2_zero : check_zero_division -[
   ((2.0 scalar *(rt? -lrl? )) = 0.0 ms)
   or ((2.0 scalar *(ct? -lrl? )) = 0.0 ms)
   or ((lrl? -url? ) = 0.0 ms)
   ]-> err{};
   
RC3_nonzero : check_zero_division -[   
	 ((2.0 scalar *(rt? -lrl? )) <> 0.0 ms)
   and ((2.0 scalar *(ct? -lrl? )) <> 0.0 ms)
   and ((lrl? -url? ) <> 0.0 ms)
 ]-> wait
{
  <<((2.0 scalar *(REACTION_TIME - LRL)) <> 0.0 s) and ((2.0 scalar *(RECOVERY_TIME - LRL)) <> 0.0 s) 
    and ((LRL - URL) <> 0 s) >>
  declare  --transient, local variables
    siri  ~ time := (if msr? >= (lrl? - (rf? *(xl? - at? ))) 
    	then msr? else lrl? - (rf? *(xl? - at?)))  --sensor indicated rate interval
    z  ~ time := ((lrl? -msr? )*(lrl? +msr? )) / (2.0 scalar *(rt? -lrl? ))	 --up rate smoothing for reaction time (REACTION_TIME)
    y  ~ time := ((lrl? -msr? )*(lrl? +msr? )) / (2.0 scalar *(ct? -lrl? ))  --down rate smoothing for recovery time (RECOVERY_TIME)
    up_siri  ~ time := (if (cci? -z) <= siri then siri else cci? -z)  --up rate sensor interval, max of siri and cci-z
    dn_siri  ~ time := (if (cci? +y) <= siri then cci? +y else siri)  --down rate sensor interval, min of siri and cci+y
    down  ~ time :=  cci? *(1.0 scalar +(drs? /100.0 scalar ));  --down rate smoothing
    up  ~ time := cci? *(1.0 scalar -(urs? /100.0 scalar ));  --up rate smoothing
    hylrl  ~ time := (last_v_was_vs? ?? lrl? + hy? : lrl? );  --hysteresis pacing
  {  
  <<(LRL - URL) <> 0.0 s and z=Z_A() and y=Y_A()
      and siri=SIRi_A() and dn_siri=DN_SIRi_A() and up_siri=UP_SIRi_A()
      and down=DOWN_A() and up=UP_A() and hylrl=HyLRL(now)
      and AXIOM_MAX_CCI(now) and AXIOM_MIN_CCI() >>	
  dav!((cci? *((av?-min_av? )/(LRL-url? ))) + min_av? )
  &
--  min_cci!((if url >(if up_siri > up then up_siri else up) then url else (if up_siri > up then up_siri else up)))  --(maximum3($url,up_siri,up))
--  min_cci!(MinMax::maximum3( a:url, b:up_siri, c:up))
  if
  ((up_siri>=url) and (up_siri>=up))~> min_cci!(up_siri)
  []
  ((url>=up_siri) and (url>=up))~> min_cci!(url)
  []
  ((up>=url) and (up>=up_siri))~> min_cci!(up)
  fi
  &
  if
  ((dn_siri<=hylrl) and (dn_siri<=down))~> max_cci!(dn_siri)
  []
  ((hylrl<=dn_siri) and (hylrl<=down))~> max_cci!(hylrl)
  []
  ((down<=hylrl) and (down<=dn_siri))~> max_cci!(down)
  fi
--  max_cci!((if lrl <(if dn_siri<down then dn_siri else down) then lrl  else (if dn_siri<down then dn_siri else down)))  --(minimum3($dn_siri,down,lrl))
--  max_cci!(MinMax::minimum3(a:dn_siri, b:down, c:lrl))
  <<true>>
  }
};  --end of RC3_nonzero
**};
end RateController.normal;


--in ATR mode
thread implementation RateController.atr
annex BLESS 
{**
	assert
	<<AXIOM_FB_NONZERO: :FBT <> 0 s>>  --needed for fall_back rate division
--Must slow pacing from URL to LRL over fallback time,  LRL until mode switch ends
  <<FallBack_MaxCCI: dur_met~time, n~time returns time :=( if ((n-dur_met)>FBT) then LRL 
	  else URL+(((n-dur_met)*(LRL-URL))/FBT))>>  --duration met at time dur_met
  <<FB_MaxCCI: n~time returns time :=FallBack_MaxCCI(dur_met:dur_met, n:n)>>
invariant <<true>>	
variables
  dur_met ~ time;  --ATR duration met, start of ATR fallback
states
  start_atr : initial state;
  atr_fallback : complete state;
  check_atr : state;
  done : final state;
transitions
--begin atrial tachycardia response fallback from URL to LRL
ATR_RC1_start_fallback: start_atr -[ ]-> atr_fallback
  { 
  dur_met:=now
    <<dur_met=now>>
  };  --end of RC4_start_fallback
  
ATR_RC5_atr_cci: atr_fallback -[on dispatch cci]-> check_atr{};

ATR_RC6_continure_atr: check_atr -[(now-dur_met) > fb_time]-> atr_fallback
  {  <<(now-dur_met) > fb_time>>
  atr_max_cci!(lrl)
  };  --end of RC6_continure_atr
ATR_RC_fallback: check_atr -[(now-dur_met) <= fb_time]-> atr_fallback 
  {  <<(now-dur_met) <= fb_time and AXIOM_FB_NONZERO()>>
  	declare
  	  fallback_rate ~ time := url + (((now-dur_met)*(lrl-url))/fb_time);
    {
      <<fallback_rate=FB_MaxCCI(now) and (now-dur_met) <= fb_time>>
    atr_max_cci!(fallback_rate)
      <<(now-dur_met) <= fb_time>>
    }
  };   --end of RC_fallback
  
--RCX : atr_fallback -[on dispatch stop]-> done{};
  
**};
  
end RateController.atr;

end rc;