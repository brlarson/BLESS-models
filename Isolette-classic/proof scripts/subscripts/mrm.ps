# mrm.ps
push
sort-by-component[Regulate::manage_regulator_mode.impl]
#Regulate::manage_regulator_mode.impl
#[serial 1033] <<M(init)>> -> <<I>> from invariant I when complete state init has Assertion <<M(init)>> in its definitio
make-an
tautologies
#[serial 1034] <<M(normal)>> -> <<I>> from invariant I when complete state normal has Assertion <<M(normal)>> in its definition.
tautologies
#[serial 1035] Serban's Theorem:  disjunction of execute conditions leaving execution state check_init, <<M(check_init)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
cnf
laws
normalize
laws
normalize
laws
normalize
laws
DeMorgan
normalize
cnf
normalize
laws
normalize
laws
tautologies
#[serial 1036] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
tautologies
#[serial 1037] Serban's Theorem:  disjunction of execute conditions leaving execution state check_normal, <<M(check_normal)>> -> <<e1 or e2 or . . . en>>
DeMorgan
normalize
cnf
laws
normalize
laws
normalize
cnf
laws
normalize
laws
tautologies
#[serial 1038]  <<M(start)>> A <<M(init)>> for mrm1: start-[ ]->init{A};
reduce
atomic
remove-givens-post
laws
normalize
tautologies
substitute-both
normalize
guided-sub-equals[START_TIME]
guided-sub-equals[now]
normalize
remove-units
remove-units
tautologies
laws
tautologies
#[serial 1039]  <<M(init) and x>> A <<M(check_init)>> for wait_init: init-[x]->check_init{A};
reduce
atomic
laws
normalize
tautologies
remove-givens-post
laws
tautologies
#[serial 1040]  <<M(check_init) and x>> A <<M(failed)>> for mrm: check_init-[x]->failed{A};
reduce
atomic
remove-givens-post
normalize
laws
normalize
tautologies
DeMorgan
replace<=
normalize
laws
split-post
tautologies
substitute-both
DeMorgan
normalize
DeMorgan
normalize
laws
now
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
tautologies
guided-sub-equals[START_TIME]
replace<=
normalize
tautologies
#[serial 1041]  <<M(check_init) and x>> A <<M(normal)>> for mrm2: check_init-[x]->normal{A};
reduce
atomic
remove-givens-post
laws
normalize
tautologies
substitute-both
normalize
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
laws
normalize
now
guided-sub-equals[START_TIME]
tautologies
transitive
alldist^
tautologies
#[serial 1042]  <<M(check_init) and x>> -> <<M(init)>> for mrm2x: check_init-[x]->init{};
normalize
tautologies
#[serial 1043]  <<M(normal) and x>> A <<M(check_normal)>> for wait_normal: normal-[x]->check_normal{A};
reduce
atomic
remove-givens-post
normalize
laws
tautologies
laws
tautologies
#[serial 1044]  <<M(check_normal) and x>> A <<M(normal)>> for mrm3: check_normal-[x]->normal{A};
reduce
atomic
remove-givens-post
normalize
laws
normalize
tautologies
split-post
tautologies
substitute-both
normalize
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
now
tautologies
transitive
alldist^
tautologies
laws
tautologies
#[serial 1045]  <<M(check_normal) and x>> A <<M(failed)>> for mrm3x: check_normal-[x]->failed{A};
reduce
atomic
normalize
laws
tautologies
split-post
normalize
substitute-both
normalize
DeMorgan
normalize
DeMorgan
normalize
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
laws
now
tautologies
guided-sub-equals[start_time]
tautologies
guided-sub-equals[START_TIME]
tautologies
sub-equals-and
normalize
laws
tautologies
guided-sub-equals[current_temperature_status]
tautologies