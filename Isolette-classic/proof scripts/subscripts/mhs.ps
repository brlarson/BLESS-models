#  You chose proof script: /Users/brianlarson/git/BLESS-models/Isolette-classic/proof scripts/subscripts/mhs.ps
push
sort-by-component[Regulate::manage_heat_source.impl]
#Regulate::manage_heat_source.impl
#[serial 1047] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definitio
make-an
substitute-both
normalize
axioms
#[serial 1048] Serban's Theorem:  disjunction of execute conditions leaving execution state check_temp, <<M(check_temp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
cnf
laws
normalize
axioms
#[serial 1049] Serban's Theorem:  disjunction of execute conditions leaving execution state poweron, <<M(poweron)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1050] Serban's Theorem:  disjunction of execute conditions leaving execution state check_hyst, <<M(check_hyst)>> -> <<e1 or e2 or . . . en>>
substitute-pre
normalize
axioms
#[serial 1051] Serban's Theorem:  disjunction of execute conditions leaving execution state check_mode, <<M(check_mode)>> -> <<e1 or e2 or . . . en>>
normalize
cnf
normalize
laws
normalize
laws
substitute-post
normalize
replace<=
laws
normalize
axioms
#[serial 1052]  <<M(poweron)>> -> <<M(run)>> for mhsPo: poweron-[ ]->run{};
axioms
#[serial 1053]  <<M(run) and x>> -> <<M(check_mode)>> for mhsRun: run-[x]->check_mode{};
axioms
#[serial 1054]  <<M(check_mode) and x>> A <<M(run)>> for mhsFailed: check_mode-[x]->run{A};
reduce
atomic
dist^
normalize
axioms
substitute-post
normalize
laws
dist^
normalize
now
axioms
substitute-post
normalize
axioms
#[serial 1055]  <<M(check_mode) and x>> A <<M(run)>> for mhsInit: check_mode-[x]->run{A};
reduce
atomic
dist^
normalize
axioms
substitute-post
normalize
dist^
normalize
substitute-both
now
normalize
axioms
substitute-post
normalize
axioms
#[serial 1056]  <<M(check_mode) and x>> -> <<M(check_temp)>> for mhsNormal: check_mode-[x]->check_temp{};
normalize
remove-axioms-post
laws
split-post
axioms
substitute-post
normalize
axioms
#[serial 1057]  <<M(check_temp) and x>> A <<M(run)>> for mhsBelow: check_temp-[x]->run{A};
reduce
atomic
dist^
normalize
axioms
substitute-post
normalize
dist^
normalize
split-post
replace-port-value
substitute-pre
substitute-pre
normalize
laws
normalize
replace<=
now
axioms
substitute-post
substitute-post
normalize
axioms
#[serial 1058]  <<M(check_temp) and x>> A <<M(run)>> for mhsAbove: check_temp-[x]->run{A};
reduce
atomic
dist^
normalize
axioms
substitute-post
normalize
dist^
normalize
split-post
replace-port-value
substitute-both
substitute-pre
normalize
replace<=
laws
now
axioms
substitute-post
normalize
axioms
#[serial 1059]  <<M(check_temp) and x>> -> <<M(check_hyst)>> for mhsHys: check_temp-[x]->check_hyst{};
remove-axioms-post
substitute-both
normalize
laws
replace-port-value
normalize
axioms
#[serial 1060]  <<M(check_hyst) and x>> A <<M(run)>> for mhsHysOn: check_hyst-[x]->run{A};
reduce
atomic
normalize
remove-axioms-post
axioms
dist^
normalize
laws
substitute-post
normalize
dist^
normalize
now
axioms
laws
normalize
substitute-both
normalize
laws
substitute-pre
normalize
laws
normalize
sub-equals
replace<=
range-exp
normalize
laws
cnf
laws
normalize
laws
split-post
normalize
axioms
guided-sub-equals[heat_control^-1]
axioms
guided-sub-equals[HEAT_CONTROL^-1]
axioms
#[serial 1061]  <<M(check_hyst) and x>> A <<M(run)>> for mhsHysOff: check_hyst-[x]->run{A};
reduce
atomic
remove-axioms-post
laws
normalize
axioms
dist^
normalize
now
axioms
substitute-post
normalize
dist^
normalize
now
axioms
substitute-both
normalize
laws
normalize
range-exp
equivalent
equivalent
normalize
laws
axioms