#  You chose proof script: /Users/brianlarson/git/BLESS-models/Isolette-classic/proof scripts/subscripts/ma.ps
push
sort-by-component[Monitor::manage_alarm.impl]
#Monitor::manage_alarm.impl
#[serial 1017] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definitio
make-an
substitute-both
normalize
axioms
#[serial 1018] Serban's Theorem:  disjunction of execute conditions leaving execution state check_temp, <<M(check_temp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
normalize
cnf
laws
normalize
axioms
#[serial 1019] Serban's Theorem:  disjunction of execute conditions leaving execution state poweron, <<M(poweron)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1020] Serban's Theorem:  disjunction of execute conditions leaving execution state check_hyst, <<M(check_hyst)>> -> <<e1 or e2 or . . . en>>
substitute-pre
normalize
axioms
#[serial 1021] Serban's Theorem:  disjunction of execute conditions leaving execution state check_mode, <<M(check_mode)>> -> <<e1 or e2 or . . . en>>
normalize
substitute-post
normalize
replace<=
normalize
laws
normalize
and-over-or-post
laws
normalize
laws
DeMorgan
normalize
laws
normalize
axioms
#[serial 1022]  <<M(poweron)>> -> <<M(run)>> for maPo: poweron-[ ]->run{};
axioms
#[serial 1023]  <<M(run) and x>> -> <<M(check_mode)>> for maRun: run-[x]->check_mode{};
axioms
#[serial 1024]  <<M(check_mode) and x>> A <<M(run)>> for maFailed: check_mode-[x]->run{A};
reduce
atomic
dist^
normalize
axioms
substitute-post
normalize
laws
dist^
normalize
now
axioms
substitute-post
normalize
axioms
#[serial 1025]  <<M(check_mode) and x>> A <<M(run)>> for maInit: check_mode-[x]->run{A};
reduce
atomic
normalize
axioms
now
axioms
substitute-post
normalize
alldist^
substitute-pre
now
normalize
axioms
substitute-post
substitute-post
normalize
axioms
#[serial 1026]  <<M(check_mode) and x>> -> <<M(check_temp)>> for maNormal: check_mode-[x]->check_temp{};
remove-axioms-post
laws
axioms
#[serial 1027]  <<M(check_temp) and x>> A <<M(run)>> for maOor: check_temp-[x]->run{A};
normalize
reduce
atomic
normalize
axioms
substitute-post
normalize
laws
normalize
dist^
normalize
split-post
now
axioms
push
#Monitor::manage_alarm.impl
#[serial 1367] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 135
make-an
normalize
substitute-pre
normalize
replace<=
replace-port-value
axioms
#[serial 1368] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1352]
substitute-post
normalize
axioms
#[serial 1369] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1352]
substitute-post
normalize
substitute-post
substitute-pre
normalize
replace<=
normalize
axioms
#[serial 1028]  <<M(check_temp) and x>> A <<M(run)>> for maIr: check_temp-[x]->run{A};
reduce
atomic
remove-axioms-post
laws
normalize
axioms
split-post
axioms
substitute-post
dist^
normalize
now
axioms
split-post
substitute-post
normalize
axioms
replace-port-value
range-exp
normalize
axioms
substitute-post
substitute-pre
normalize
replace<=
axioms
#[serial 1029]  <<M(check_temp) and x>> -> <<M(check_hyst)>> for maHys: check_temp-[x]->check_hyst{};
split-post
axioms
substitute-post
replace-port-value
range-exp
normalize
axioms
#[serial 1030]  <<M(check_hyst) and x>> A <<M(run)>> for maHysOn: check_hyst-[x]->run{A};
reduce
atomic
normalize
axioms
now
axioms
split-post
axioms
remove-axioms-post
axioms
push
#Monitor::manage_alarm.impl
#[serial 1498]   normalization of [serial 148
make-an
substitute-post
alldist^
now
axioms
#[serial 1500]   normalization of [serial 1492]
and-over-or-post
split-post
normalize
axioms
substitute-pre
guided-sub-equals[cntrl'O_n]
guided-sub-equals[ALARM_CONTROL^-1]
axioms
#[serial 1514] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1496]
substitute-both
normalize
split-post
axioms
substitute-post
normalize
substitute-post
normalize
axioms
#[serial 1031]  <<M(check_hyst) and x>> A <<M(run)>> for maHysOff: check_hyst-[x]->run{A};
reduce
atomic
normalize
axioms
laws
push
make-an
#Monitor::manage_alarm.impl
#[serial 1557]   normalization of [serial 1549] 
remove-axioms-post
laws
split-post
axioms
substitute-both
normalize
split-post
normalize
axioms
substitute-post
substitute-post
normalize
axioms
#[serial 1559]   normalization of [serial 1550]
substitute-post
alldist^
now
axioms
#[serial 1561]   normalization of [serial 1553]
and-over-or-post
split-post
normalize
axioms
substitute-pre
normalize
guided-sub-equals[cntrl'Off]
guided-sub-equals[ALARM_CONTROL^-1]
normalize
axioms
#[serial 1571] Associativity: (b.c).a = a.b.c [serial 1563]
now
axioms