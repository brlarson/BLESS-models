#  ma.ps
push
sort-by-component[Monitor::manage_alarm.impl]
#Monitor::manage_alarm.impl
#[serial 1017] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definitio
make-an
substitute-both
normalize
tautologies
#[serial 1018] Serban's Theorem:  disjunction of execute conditions leaving execution state check_temp, <<M(check_temp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
normalize
cnf
laws
normalize
laws
tautologies
#[serial 1019] Serban's Theorem:  disjunction of execute conditions leaving execution state poweron, <<M(poweron)>> -> <<e1 or e2 or . . . en>>
tautologies
#[serial 1020] Serban's Theorem:  disjunction of execute conditions leaving execution state check_hyst, <<M(check_hyst)>> -> <<e1 or e2 or . . . en>>
substitute-pre
normalize
tautologies
#[serial 1021] Serban's Theorem:  disjunction of execute conditions leaving execution state check_mode, <<M(check_mode)>> -> <<e1 or e2 or . . . en>>
normalize
substitute-post
normalize
replace<=
normalize
laws
normalize
and-over-or-post
laws
normalize
laws
DeMorgan
normalize
laws
normalize
laws
normalize
laws
tautologies
#[serial 1022]  <<M(poweron)>> -> <<M(run)>> for maPo: poweron-[ ]->run{};
tautologies
#[serial 1023]  <<M(run) and x>> -> <<M(check_mode)>> for maRun: run-[x]->check_mode{};
tautologies
#[serial 1024]  <<M(check_mode) and x>> A <<M(run)>> for maFailed: check_mode-[x]->run{A};
reduce
atomic
dist^
normalize
tautologies
substitute-post
normalize
laws
dist^
normalize
now
tautologies
substitute-post
normalize
tautologies
#[serial 1025]  <<M(check_mode) and x>> A <<M(run)>> for maInit: check_mode-[x]->run{A};
reduce
atomic
normalize
tautologies
now
tautologies
substitute-post
normalize
alldist^
substitute-pre
now
normalize
tautologies
substitute-post
substitute-post
normalize
tautologies
#[serial 1026]  <<M(check_mode) and x>> -> <<M(check_temp)>> for maNormal: check_mode-[x]->check_temp{};
remove-givens-post
laws
laws
tautologies
#[serial 1027]  <<M(check_temp) and x>> A <<M(run)>> for maOor: check_temp-[x]->run{A};
normalize
reduce
atomic
normalize
tautologies
substitute-post
normalize
laws
normalize
dist^
normalize
split-post
now
tautologies
push
#Monitor::manage_alarm.impl
#[serial 1623] Join consequents with conjunction. (3jca)
make-an
normalize
substitute-pre
normalize
replace<=
replace-port-value
tautologies
#[serial 1624] Join consequents with conjunction. (3jca)
substitute-post
normalize
tautologies
#[serial 1625] Join consequents with conjunction. (3jca)
substitute-post
normalize
substitute-post
substitute-pre
normalize
replace<=
normalize
tautologies
#[serial 1626] Assume Present:  P = P@now = P^0   [serial 1620]
normalize
tautologies
#[serial 1028]  <<M(check_temp) and x>> A <<M(run)>> for maIr: check_temp-[x]->run{A};
reduce
atomic
remove-givens-post
laws
normalize
tautologies
split-post
laws
normalize
tautologies
substitute-post
dist^
normalize
now
tautologies
split-post
substitute-post
normalize
tautologies
replace-port-value
range-exp
normalize
tautologies
substitute-post
substitute-pre
normalize
replace<=
tautologies
#[serial 1029]  <<M(check_temp) and x>> -> <<M(check_hyst)>> for maHys: check_temp-[x]->check_hyst{};
split-post
tautologies
substitute-post
replace-port-value
range-exp
normalize
tautologies
#[serial 1030]  <<M(check_hyst) and x>> A <<M(run)>> for maHysOn: check_hyst-[x]->run{A};
reduce
atomic
normalize
tautologies
now
tautologies
split-post
tautologies
remove-givens-post
tautologies
push
#Monitor::manage_alarm.impl
#[serial 1748]   normalization of [serial 173
make-an
substitute-post
alldist^
now
normalize
tautologies
#[serial 1750]   normalization of [serial 1742]
and-over-or-post
split-post
normalize
tautologies
substitute-pre
guided-sub-equals[cntrl'O_n]
guided-sub-equals[ALARM_CONTROL^-1]
tautologies
#[serial 1759] Join consequents with conjunction. (3jca)
substitute-both
normalize
split-post
tautologies
substitute-post
normalize
substitute-post
normalize
tautologies
#[serial 1031]  <<M(check_hyst) and x>> A <<M(run)>> for maHysOff: check_hyst-[x]->run{A};
reduce
atomic
normalize
tautologies
laws
push
#Monitor::manage_alarm.impl
#[serial 1798]   normalization of [serial 179
make-an
remove-givens-post
laws
split-post
tautologies
substitute-both
normalize
split-post
normalize
tautologies
substitute-post
substitute-post
normalize
tautologies
#[serial 1800]   normalization of [serial 1791]
substitute-post
alldist^
now
normalize
tautologies
#[serial 1802]   normalization of [serial 1794]
and-over-or-post
split-post
normalize
tautologies
substitute-pre
normalize
guided-sub-equals[cntrl'Off]
guided-sub-equals[ALARM_CONTROL^-1]
normalize
tautologies
#[serial 1807] laws applied to [serial 1804]
now
tautologies