#  You chose proof script: /Users/brianlarson/git/BLESS-models/Isolette-classic/proof scripts/subscripts/mmm.ps
push
sort-by-component[Monitor::manage_monitor_mode.impl]
#Monitor::manage_monitor_mode.impl
#[serial 1003] <<M(init)>> -> <<I>> from invariant I when complete state init has Assertion <<M(init)>> in its definitio
make-an
axioms
#[serial 1004] <<M(normal)>> -> <<I>> from invariant I when complete state normal has Assertion <<M(normal)>> in its definition.
axioms
#[serial 1005] Serban's Theorem:  disjunction of execute conditions leaving execution state check_init, <<M(check_init)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
DeMorgan
normalize
laws
cnf
laws
normalize
axioms
#[serial 1006] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state check_normal, <<M(check_normal)>> -> <<e1 or e2 or . . . en>>
normalize
DeMorgan
laws
normalize
cnf
laws
normalize
axioms
#[serial 1008]  <<M(start)>> A <<M(init)>> for mmm1: start-[ ]->init{A};
reduce
atomic
laws
remove-axioms-post
normalize
axioms
substitute-both
normalize
laws
guided-sub-equals[START_TIME]
guided-sub-equals[start_time]
normalize
remove-units
remove-units
axioms
#[serial 1009]  <<M(init) and x>> A <<M(check_init)>> for wait_init: init-[x]->check_init{A};
reduce
atomic
normalize
axioms
laws
axioms
remove-axioms-post
laws
normalize
axioms
#[serial 1010]  <<M(check_init) and x>> A <<M(failed)>> for mmm: check_init-[x]->failed{A};
normalize
laws
normalize
reduce
atomic
axioms
remove-axioms-post
now
laws
DeMorgan
normalize
laws
DeMorgan
normalize
split-post
normalize
replace<=
normalize
axioms
substitute-both
normalize
laws
axioms
replace<=
DeMorgan
normalize
DeMorgan
normalize
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
guided-sub-equals[START_TIME]
axioms
#[serial 1011]  <<M(check_init) and x>> A <<M(normal)>> for mmm2: check_init-[x]->normal{A};
reduce
atomic
push
#Monitor::manage_monitor_mode.impl
#[serial 1332] as <<P>> -> <<pre>> in <<P>> { <<pre>> S <<post>> } <<Q>> for [serial 101
make-an
substitute-both
normalize
laws
normalize
DeMorgan
normalize
laws
now
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
split-post
axioms
guided-sub-equals[START_TIME]
axioms
#[serial 1333] as <<post>> -> <<Q>> in <<P>> { <<pre>> S <<post>> } <<Q>> [serial 1011]
substitute-both
normalize
transitive
dist^
normalize
dist^
normalize
axioms
#[serial 1335] applied port output of enumeration type  monitor_mode!(') [serial 1334]
axioms
#[serial 1336] applied port output <<pre and (monitor_mode=mmode'Normal)^0>> -> <<post>> [serial 1334]
remove-axioms-post
laws
axioms
#[serial 1012]  <<M(check_init) and x>> -> <<M(init)>> for mmm2x: check_init-[x]->init{};
normalize
axioms
#[serial 1013]  <<M(normal) and x>> A <<M(check_normal)>> for wait_normal: normal-[x]->check_normal{A};
reduce
atomic
laws
normalize
axioms
remove-axioms-post
laws
axioms
#[serial 1014]  <<M(check_normal) and x>> A <<M(normal)>> for mmm3: check_normal-[x]->normal{A};
reduce
atomic
remove-axioms-post
laws
normalize
axioms
push
#Monitor::manage_monitor_mode.impl
#[serial 1406]   normalization of [serial 139
make-an
substitute-post
substitute-pre
alldist^
transitive
axioms
#[serial 1409]   normalization of [serial 1402]
split-post
axioms
substitute-post
normalize
split-post
now
axioms
substitute-pre
normalize
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
axioms
#[serial 1015]  <<M(check_normal) and x>> A <<M(failed)>> for mmm3x: check_normal-[x]->failed{A};
reduce
atomic
remove-axioms-post
normalize
laws
normalize
axioms
DeMorgan
normalize
split-post
laws
axioms
substitute-post
normalize
replace<=
normalize
substitute-pre
normalize
guided-sub-equals[START_TIME]
axioms
now
DeMorgan
normalize
DeMorgan
normalize
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
axioms
replace<=
guided-sub-equals[start_time]
axioms