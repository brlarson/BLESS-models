#manage_monitor_mode_mmm.impl
push
sort-by-component[Monitor::manage_monitor_mode.impl]
#[serial 1003] <<M(init)>> -> <<I>> from invariant I when complete state init has Assertion <<M(init)>> in its definition
make-an
axioms
#[serial 1004] <<M(normal)>> -> <<I>> from invariant I when complete state normal has Assertion <<M(normal)>> in its definition.
axioms
#[serial 1005] Serban's Theorem:  disjunction of execute conditions leaving execution state check_init, <<M(check_init)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
cnf
laws
normalize
laws
normalize
cnf
normalize
laws
normalize
axioms
#[serial 1006] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state check_normal, <<M(check_normal)>> -> <<e1 or e2 or . . . en>>
normalize
DeMorgan
normalize
cnf
laws
normalize
laws
normalize
cnf
laws
normalize
axioms
#[serial 1008]  <<M(start)>> A <<M(init)>> for mmm1:start-[ ]->init{A};
normalize
reduce
atomic
laws
remove-axioms-post
normalize
axioms
substitute-both
normalize
laws
guided-sub-equals[START_TIME]
guided-sub-equals[start_time]
normalize
axioms
#[serial 1009]  <<M(init) and x>> A <<M(check_init)>> for wait_init:init-[x]->check_init{A};
reduce
atomic
normalize
axioms
laws
axioms
remove-axioms-post
laws
normalize
axioms
#[serial 1010]  <<M(check_init) and x>> A <<M(failed)>> for mmm:check_init-[x]->failed{A};
reduce
atomic
axioms
remove-axioms-post
now
normalize
laws
DeMorgan
normalize
laws
DeMorgan
normalize
split-post
normalize
axioms
replace<=
normalize
axioms
substitute-both
normalize
guided-sub-equals[START_TIME]
replace<=
normalize
axioms
DeMorgan
normalize
DeMorgan
normalize
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
normalize
axioms
#[serial 1011]  <<M(check_init) and x>> A <<M(normal)>> for mmm2:check_init-[x]->normal{A};
reduce
atomic
remove-axioms-post
now
laws
normalize
axioms
substitute-post
normalize
dist^
normalize
substitute-pre
normalize
transitive
axioms
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
guided-sub-equals[START_TIME]
normalize
axioms
#[serial 1012]  <<M(check_init) and x>> -> <<M(init)>> for mmm2x:check_init-[x]->init{};
normalize
axioms
#[serial 1013]  <<M(normal) and x>> A <<M(check_normal)>> for wait_normal:normal-[x]->check_normal{A};
reduce
remove-axioms-post
laws
axioms
atomic
normalize
laws
normalize
axioms
#[serial 1014]  <<M(check_normal) and x>> A <<M(normal)>> for mmm3:check_normal-[x]->normal{A};
reduce
atomic
remove-axioms-post
laws
normalize
axioms
split-post
laws
axioms
substitute-post
substitute-pre
normalize
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
now
axioms
dist^
normalize
dist^
normalize
transitive
axioms
#[serial 1015]  <<M(check_normal) and x>> A <<M(failed)>> for mmm3x:check_normal-[x]->failed{A};
reduce
atomic
normalize
DeMorgan
normalize
axioms
split-post
normalize
laws
normalize
axioms
push
#Monitor::manage_monitor_mode.impl
#[serial 1414] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1403
make-an
substitute-both
now
DeMorgan
normalize
DeMorgan
normalize
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
replace<=
normalize
split-post
axioms
guided-sub-equals[start_time]
axioms
#[serial 1415] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1405]
substitute-both
normalize
replace<=
normalize
guided-sub-equals[START_TIME]
axioms