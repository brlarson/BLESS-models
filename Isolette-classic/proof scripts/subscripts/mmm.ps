#  mmm.ps
push
sort-by-component[Monitor::manage_monitor_mode.impl]
#Monitor::manage_monitor_mode.impl
#[serial 1003] <<M(init)>> -> <<I>> from invariant I when complete state init has Assertion <<M(init)>> in its definitio
make-an
tautologies
#[serial 1004] <<M(normal)>> -> <<I>> from invariant I when complete state normal has Assertion <<M(normal)>> in its definition.
tautologies
#[serial 1005] Serban's Theorem:  disjunction of execute conditions leaving execution state check_init, <<M(check_init)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
DeMorgan
normalize
laws
cnf
laws
normalize
laws
tautologies
#[serial 1006] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
tautologies
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state check_normal, <<M(check_normal)>> -> <<e1 or e2 or . . . en>>
normalize
DeMorgan
laws
normalize
cnf
laws
normalize
laws
tautologies
#[serial 1008]  <<M(start)>> A <<M(init)>> for mmm1: start-[ ]->init{A};
reduce
atomic
laws
remove-givens-post
normalize
laws
tautologies
substitute-both
normalize
guided-sub-equals[START_TIME]
guided-sub-equals[start_time]
normalize
remove-units
remove-units
tautologies
#[serial 1009]  <<M(init) and x>> A <<M(check_init)>> for wait_init: init-[x]->check_init{A};
reduce
atomic
normalize
tautologies
laws
tautologies
remove-givens-post
laws
normalize
tautologies
#[serial 1010]  <<M(check_init) and x>> A <<M(failed)>> for mmm: check_init-[x]->failed{A};
normalize
laws
reduce
atomic
tautologies
remove-givens-post
now
laws
DeMorgan
normalize
laws
normalize
DeMorgan
normalize
split-post
normalize
replace<=
normalize
laws
tautologies
substitute-both
normalize
replace<=
DeMorgan
normalize
DeMorgan
normalize
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
guided-sub-equals[START_TIME]
tautologies
#[serial 1011]  <<M(check_init) and x>> A <<M(normal)>> for mmm2: check_init-[x]->normal{A};
reduce
atomic
push
#Monitor::manage_monitor_mode.impl
#[serial 1293] as <<P>> -> <<pre>> in <<P>> { <<pre>> S <<post>> } <<Q>> for [serial 101
make-an
substitute-both
normalize
laws
normalize
DeMorgan
normalize
laws
now
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
split-post
tautologies
guided-sub-equals[START_TIME]
tautologies
#[serial 1294] as <<post>> -> <<Q>> in <<P>> { <<pre>> S <<post>> } <<Q>> [serial 1011]
substitute-both
normalize
transitive
dist^
normalize
dist^
normalize
tautologies
#[serial 1296] applied port output of enumeration type  monitor_mode!(') [serial 1295]
tautologies
#[serial 1297] applied port output <<pre and (monitor_mode=mmode'Normal)^0>> -> <<post>> [serial 1295]
remove-givens-post
laws
normalize
laws
tautologies
#[serial 1012]  <<M(check_init) and x>> -> <<M(init)>> for mmm2x: check_init-[x]->init{};
normalize
tautologies
#[serial 1013]  <<M(normal) and x>> A <<M(check_normal)>> for wait_normal: normal-[x]->check_normal{A};
reduce
atomic
laws
normalize
tautologies
remove-givens-post
laws
tautologies
#[serial 1014]  <<M(check_normal) and x>> A <<M(normal)>> for mmm3: check_normal-[x]->normal{A};
reduce
atomic
remove-givens-post
laws
normalize
tautologies
push
#Monitor::manage_monitor_mode.impl
#[serial 1358]   normalization of [serial 135
make-an
substitute-post
substitute-pre
alldist^
transitive
tautologies
#[serial 1361]   normalization of [serial 1355]
split-post
tautologies
substitute-post
normalize
split-post
now
tautologies
substitute-pre
normalize
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
tautologies
#[serial 1363]   normalization of [serial 1356]
laws
tautologies
#[serial 1015]  <<M(check_normal) and x>> A <<M(failed)>> for mmm3x: check_normal-[x]->failed{A};
reduce
atomic
remove-givens-post
normalize
laws
normalize
tautologies
DeMorgan
normalize
split-post
laws
normalize
tautologies
substitute-post
normalize
replace<=
normalize
substitute-pre
normalize
guided-sub-equals[START_TIME]
tautologies
now
DeMorgan
normalize
DeMorgan
normalize
laws
guided-sub-equals[CURRENT_TEMPERATURE_STATUS]
tautologies
replace<=
guided-sub-equals[start_time]
tautologies