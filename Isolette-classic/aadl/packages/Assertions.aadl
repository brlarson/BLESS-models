--Assertions.aadl
--collected Assertions for isolette example

package Assertions
  public
  with Iso_Properties;
	
annex Assertion  -- define labels for Assertions used elsewhere 
{**
 --define monitored and controlled variables
ghost variables
  def CURRENT_TEMP ~ currentTemperature --current temperature of air in isolette
  def LOWER_DESIRED_TEMP ~ quantity F  --desired temperature, lower-bound
  def UPPER_DESIRED_TEMP ~ quantity F  --desired temperature, upper-bound
  def LOWER_ALARM_TEMP ~ quantity F  --alarm temperature, lower-bound
  def UPPER_ALARM_TEMP ~ quantity F  --alarm temperature, upper-bound
  def ALARM_CONTROL ~ cntrl  --alarm signal to operator interface (On Off)
  def MONITOR_INTERFACE_FAILURE ~ boolean
  def REGULATOR_INTERFACE_FAILURE ~ boolean
  def INTERNAL_FAILURE ~ boolean
  def CURRENT_TEMPERATURE_STATUS ~ status
  def START_TIME ~ time
  def HEAT_CONTROL ~ cntrl
  

--essential safety property  
--alarm when out of alarm range
--SR-2: The Isolette shall include an independent monitor function that 
-- activates an Alarm within a maximum of 5 seconds whenever:
-- the Current Temperature falls below or rises above the Alarm Temperature Range,
-- the Current Temperature or the Alarm Temperature Range is flagged as invalid, 
-- or an internal failure has been detected in the monitor function.

--temp out of alarm range, produced by thread manage_alaem_ma
<<TEMP_OUT_OF_RANGE:x~cntrl+=>
  O_n ->  REQMA2() or --out of range
         REQMA5() or  --monitor failed
         (REQMA3() and (ALARM_CONTROL^-1 = cntrl'O_n)),  --hysteresis, previously alarm
  Off -> REQMA1() or --initialization
         REQMA4() or --in range
         (REQMA3() and (ALARM_CONTROL^-1 = cntrl'Off))  --hysteresis, previously no alarm
	 >> 		
--REQ-MA-1: If the Monitor Mode is Init, the Alarm Control shall be set to Off.
  <<REQMA1: : MONITOR_MODE(x:mmode'Init)>>
--REQ-MA-2: If the Monitor Mode is Normal and the Current Temperature is less 
-- than the Lower Alarm Temperature or greater than the Upper Alarm Temperature, 
-- the Alarm Control shall be set to On.
  <<REQMA2: :MONITOR_MODE(x:mmode'Normal) and 
    (CURRENT_TEMP.t < LOWER_ALARM_TEMP or CURRENT_TEMP.t > UPPER_ALARM_TEMP)>>
--REQ-MA-3: If the Monitor Mode is Normal and the Current Temperature is greater 
--  than or equal to the Lower Alarm Temperature and less than the Lower Alarm 
--  Temperature +0.5°, or the Current Temperature is greater than the Upper 
--  Alarm Temperature -0.5° and less than or equal to the Upper Alarm Temperature, 
--  the value of the Alarm Control shall not be changed.
  <<REQMA3: :MONITOR_MODE(x:mmode'Normal) and 
    (CURRENT_TEMP.t in LOWER_ALARM_TEMP ., (LOWER_ALARM_TEMP + 0.5 F) or 
    	CURRENT_TEMP.t in (UPPER_ALARM_TEMP - 0.5 F) ,. UPPER_ALARM_TEMP)>>
--REQ-MA-4: If the Monitor Mode is Normal and the value of the Current 
--  Temperature is greater than or equal to the Lower Alarm Temperature +0.5° 
--  and less than or equal to the Upper Alarm Temperature -0.5°, the Alarm 
--  Control shall be set to Off.
  <<REQMA4: :MONITOR_MODE(x:mmode'Normal) and 
    (CURRENT_TEMP.t in (LOWER_ALARM_TEMP + 0.5 F) .. (UPPER_ALARM_TEMP - 0.5 F))>>
--REQ-MA-5: If the Monitor Mode is Failed, the Alarm Control shall be set to On.
  <<REQMA5: :MONITOR_MODE(x:mmode'Failed)>>

--monitor status Table A-15
<<MONITOR_STATUS: returns cntrl := (if MONITOR_OK() then cntrl'O_n else cntrl'Failed)>>  --return type of Iso_Variables::status
<<MONITOR_OK: : not (MONITOR_INTERFACE_FAILURE or INTERNAL_FAILURE)
  and (CURRENT_TEMPERATURE_STATUS = status'Valid) >>

--monitor mode
--Assertion-function returning monitor_mode enumeration type IDs
--  Init -> sooner than 1.0 second since start_time
--  Normal -> all okay, and later than 1.0 second since start_time
--  Failed -> not all okay, and later than 1.0 second since start_time)
<<MONITOR_MODE:x~mmode+=>  --return type of Iso_Variables::monitor_mode
  Init   -> INI(),
  Normal -> MONITOR_OK() and RUN(),  
  Failed -> not MONITOR_OK() and RUN() >>

--before timeout, initializing
<<INI: :(now-START_TIME) < #Iso_Properties::Initialization_Timeout s>>
--after timeout, running
<<RUN: :(now-START_TIME) >= #Iso_Properties::Initialization_Timeout s>>

--essential efficacy property
--heat control is On when temp is at most Lower Desired Temperature
--  and temp is less than Upper Desired Temperature and it was On previously; Off o.w.
-- SR-1: The Isolette shall include an independent regulator function that 
--   maintains the Current Temperature inside the Isolette within the
--   Desired Temperature Range.

--A.5.1.3 Manage Heat Source Function
<<HEAT_CONTROL_A:x~cntrl+=>
  O_n ->  REQMHS2() or --below desired range
         (REQMHS4() and (HEAT_CONTROL^-1 = cntrl'O_n)),  --hysteresis, previously alarm
  Off -> REQMHS1() or --initialization
         REQMHS3() or --above desired range
         REQMHS5() or --failed
         (REQMHS4() and (HEAT_CONTROL^-1 = cntrl'Off))  --hysteresis, previously no alarm
	 >> 		
--• REQ-MHS-1: If the Regulator Mode is Init, the Heat Control shall be set to Off. 
<<REQMHS1: :REGULATOR_MODE(x:mmode'Init)>>
--• REQ-MHS-2: If the Regulator Mode is Normal and the Current Temperature is 
--  *at most* the Lower Desired Temperature, the Heat Control shall be set to On.
--this is different from flawed original requirements that forced the temperature out-or-range to turn On or Off the heat source
<<REQMHS2: :CURRENT_TEMP.t <= LOWER_DESIRED_TEMP>>
--• REQ-MHS-3: If the Regulator Mode is Normal and the Current Temperature is 
--  *at least* the Upper Desired Temperature, the Heat Control shall be set to Off.
--this is different from flawed original requirements that forced the temperature out-or-range to turn On or Off the heat source
<<REQMHS3: :CURRENT_TEMP.t >= UPPER_DESIRED_TEMP>>
--• REQ-MHS-4: If the Regulator Mode is Normal and the Current Temperature is 
--  greater than the Lower Desired Temperature and less than the Upper Desired Temperature, 
--  the value of the Heat Control shall not be changed. 
--this is different from flawed original requirements that forced the temperature out-or-range to turn On or Off the heat source
<<REQMHS4: :CURRENT_TEMP.t in LOWER_DESIRED_TEMP ,, UPPER_DESIRED_TEMP>> --note open interval ,,
--• REQ-MHS-5: If the Regulator Mode is Failed, the Heat Control shall be set to Off.
<<REQMHS5: :REGULATOR_MODE(x:mmode'Failed)>>  

			
--regulator status Table A-10
<<REGULATOR_STATUS:x~status +=>  --enumeration value
  Init   -> INI(), 
  O_n     -> (REGULATOR_OK() and RUN()),
  Failed -> (not REGULATOR_OK() and RUN())>>  --return type of Iso_Variables::status
  
<<REGULATOR_OK: : not (REGULATOR_INTERFACE_FAILURE or INTERNAL_FAILURE)
  and (CURRENT_TEMPERATURE_STATUS = status'Valid) >>
  
--regulator mode Figure A-4. Regulate Temperature Mode Transition Diagram
<<REGULATOR_MODE:x~mmode +=>
  Init   -> INI(),
  Normal -> REGULATOR_OK() and RUN(),  
  Failed -> not REGULATOR_OK() and RUN() >>

<<AXIOM_PAST_INIT: : (now-START_TIME) <= (now-START_TIME)^1>>	
<<AXIOM_TOGT0: :0 < #Iso_Properties::Initialization_Timeout>>

**};  --end of Assertion annex library


end Assertions;