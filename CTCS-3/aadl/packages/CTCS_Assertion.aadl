package CTCS_Assertion
public

with
  CTCS_Types, CTCS_Property;
	
annex Assertion
{**
	ghost variables
	  def POSITION ~ quantity m    		-- measured position
	  def VELOCITY ~ quantity kph  		-- measured velocity
	  def RMA ~ movementAuthorization  		-- received movement authority
	  def CMA ~ movementAuthorization  		-- currently active movement authority
	  def NEXT_MA ~ movementAuthorization -- movment authority following IMA if granted
	  def OPERATOR_XL ~ quantity mpss	--operator commanded acceleration 
	
-- brake intervention
-- current velocity is at least the current segment velocity limit
-- or must slow down for next segment
<<BRAKE: cv~quantity kph, -- current velocity
  v_l~quantity kph,   -- current segment  brake velocity limit
  next_v_l~quantity kph,  -- next segment brake velocity limit
  br~quantity mpss,  -- braking acceleration (negative is slowing)
  pos~quantity m,    --current position
  e~quantity m :
  cv >= v_l or (cv*cv + 2*br*pos) >= (next_v_l*next_v_l + 2*br*e) >>

--train acceleration conditions
<<TRAIN_XL: returns quantity mpss := [                               			
	(SB() and not EB() )-> #CTCS_Property::SB_Rate mpss, -- deceleration rate when service brake is applied 
	(EB() )-> #CTCS_Property::EB_Rate mpss, -- deceleration rate when emergency brake is applied  			
	(not SB() and not EB()  )-> OPERATOR_XL   --use train operator acceleration
	] >> 

--normal (service) brake velocity < emergency brake velocity	
 <<AXIOM_V:seg~segment : seg.v_n < seg.v_e >>

-- every Movement Authority will have more than one segment
<<AXIOM_NUM_SEG: ma~movementAuthorization : 1 < ma.num_segments>>

-- next negment when in the last segment of a movement aurthority
-- but the next movement authority has not been received
-- this will cause the train to automatically stop at the end of the last segment
-- if a new movement authority is not received
<<NULL_SEGMENT: returns segment := 
  [ segment :
     v_n => 0 kph 
     v_e => 0 kph
     e => CMA.ea
     m => trainModes'FS ] >>

-- when a movement authority is received by the train it is a received movement authority (RMA)

-- when the RMA becomes the current movement authority (CMA);
-- this happens when the train receives its firt MA
<<AXIOM_CMA_IS_RMA: : CMA = RMA >>
-- when the RMA is saved to be the next movement authority (NEXT_MA);
-- this happens when the train gets a new movement authority before ending the current movement authority
<<AXIOM_NEXT_MA_IS_RMA: : NEXT_MA = RMA >>
-- when NEXT_MA becomes CMA;
-- this happens when the train crosses into the new movement authority
<<AXIOM_CMA_IS_NEXT_MA: : CMA = NEXT_MA >>
	
**};		
	
end CTCS_Assertion;