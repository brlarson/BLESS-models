package CTCS_Assertion
public

with
  CTCS_Types;
 
annex Assertion
{**
 ghost variables
  def POSITION ~ quantity m      -- measured position
  def VELOCITY ~ quantity mps    -- measured velocity
  def RMA ~ movementAuthorization    -- requested movement authorization
  def CMA ~ movementAuthorization    -- currently active movement authorization
  def NEXT_MA ~ movementAuthorization -- movment authority following IMA if granted
  def OPERATOR_XL ~ quantity mpss --operator commanded acceleration 
 
-- brake intervention
-- current velocity is at least the current segment velocity limit
-- or must slow down for next segment
--<<BRAKE: vel~quantity mps, -- current velocity
-- v_lim~quantity mps,   -- current segment  brake velocity limit
-- next_v_lim~quantity mps,  -- next segment brake velocity limit
-- ba~quantity mpss,  -- braking acceleration (negative is slowing)
-- pos~quantity m,    --current position
-- en~quantity m :     --end of segment
-- vel >= v_lim or vel*vel >= next_v_lim*next_v_lim + 2*ba*(en-pos) >>


--the train acceleration is chosen by the operator, unless automaticly braking
--SB() service braking and EB() emergency braking are defined in thread AutoBrake.i
--because they use values of local variables to determine speed limits based on current segmant
<<TRAIN_XL: returns quantity mpss :=
  [ ( SB() or EB() )-> 0 mpss,
  	( not SB() and not EB() )-> OPERATOR_XL
  ] >>

-- next negment when in the last segment of a movement aurthority
-- but the next movement authorization has not been received
-- this will cause the train to automatically stop at the end of the last segment
-- if a new movement authorization is not received
<<NULL_SEGMENT: returns segment := 
  [ segment :
     v_n => 0 mps 
     v_e => 0 mps
     e => CMA.ea ] >>

-- when a movement authorization is received by the train it is a received movement authorization (RMA)

-- when the RMA becomes the current movement authorization (CMA);
-- this happens when the train receives its firt MA
<<AXIOM_CMA_IS_RMA: : CMA = RMA >>
-- when the RMA is saved to be the next movement authorization (NEXT_MA);
-- this happens when the train gets a new movement authorization before ending the current movement authorization
<<AXIOM_NEXT_MA_IS_RMA: : NEXT_MA = RMA >>
-- when NEXT_MA becomes CMA;
-- this happens when the train crosses into the new movement authorization
<<AXIOM_CMA_IS_NEXT_MA: : CMA = NEXT_MA >>

--normal (service) brake velocity < emergency brake velocity 
<<AXIOM_V:seg~segment : seg.v_n < seg.v_e >>

-- every Movement Authority will have more than one segment
<<AXIOM_NUM_SEG: ma~movementAuthorization : 1 < ma.num_segments>>
 
**};  
 
end CTCS_Assertion;