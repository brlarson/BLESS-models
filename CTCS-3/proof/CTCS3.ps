#This file, script.txt, was produced the BLESS Proof Assistant v3.2.0
#  at Wed Jun 14 16:14:36 CDT 2023 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/CTCS-3/proof/CTCS3.ps
#Threads::AutoBrake.i
#[serial 1003] <<M(MoveForwardLastSegment)>> -> <<I>> from invariant I when complete state MoveForwardLastSegment has Assertion <<M(MoveForwardLastSegment)>> in its definitio
make-an
axioms
#[serial 1004] <<M(WaitFirstMA)>> -> <<I>> from invariant I when complete state WaitFirstMA has Assertion <<M(WaitFirstMA)>> in its definition.
axioms
#[serial 1005] <<M(MoveForward)>> -> <<I>> from invariant I when complete state MoveForward has Assertion <<M(MoveForward)>> in its definition.
axioms
#[serial 1006] <<M(GotNewMA)>> -> <<I>> from invariant I when complete state GotNewMA has Assertion <<M(GotNewMA)>> in its definition.
normalize
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckMoveForward, <<M(CheckMoveForward)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckMoveForwardLastSegment, <<M(CheckMoveForwardLastSegment)>> -> <<e1 or e2 or . . . en>>
laws
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state Start, <<M(Start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckForLastSegment, <<M(CheckForLastSegment)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckFirstMA, <<M(CheckFirstMA)>> -> <<e1 or e2 or . . . en>>
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckMATransition, <<M(CheckMATransition)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1013]  <<M(Start)>> A <<M(WaitFirstMA)>> for GoStart-[ ]->WaitFirstMA{A};
reduce
atomic
axioms
#[serial 1014]  <<M(WaitFirstMA) and x>> -> <<M(CheckFirstMA)>> for FirstMAWaitFirstMA-[x]->CheckFirstMA{};
axioms
#[serial 1015]  <<M(CheckFirstMA) and x>> -> <<M(WaitFirstMA)>> for NotYetCheckFirstMA-[x]->WaitFirstMA{};
axioms
#[serial 1016]  <<M(CheckFirstMA) and x>> A <<M(MoveForward)>> for GotFirstMACheckFirstMA-[x]->MoveForward{A};
reduce
remove-axioms-post
laws
normalize
push
#Threads::AutoBrake.i
#[serial 1075]  add user-defined axioms to postconditi
make-an
axioms
#[serial 1081]   normalization of [serial 1070]
split-post
axioms
substitute-pre
guided-sub-equals[CMA]
normalize
guided-sub-equals[i]
normalize
guided-sub-equals[ma]
axioms
#[serial 1083]   normalization of [serial 1071]
atomic
substitute-pre
normalize
guided-sub-equals[CMA]
axioms
#[serial 1085]   normalization of [serial 1072]
atomic
normalize
laws
normalize
axioms
#[serial 1088]   normalization of [serial 1078]
atomic
split-post
axioms
guided-sub-equals[CMA]
guided-sub-equals[i]
normalize
laws
axioms
#[serial 1090]   normalization of [serial 1079]
guided-sub-equals[i]
normalize
guided-sub-equals[CMA]
atomic
laws
normalize
guided-sub-equals[ma]
normalize
guided-sub-equals[1]
axioms
#[serial 1017]  <<M(MoveForward) and x>> A <<M(CheckMoveForward)>> for CheckSpeedMoveForward-[x]->CheckMoveForward{A};
laws
reduce
reduce
reduce
push
#Threads::AutoBrake.i
#[serial 1152] as <<P>> -> <<pre>> in <<P>> { <<pre>> S <<post>> } <<Q>> for [serial 115
make-an
remove-axioms-post
laws
axioms
#[serial 1154]   <<P>> -> <<B1 or B2 or ... or Bn>> in alternative for [serial 1153]
normalize
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1160] <<P>> T <<Q>> in existential lattice quantification for [serial 1155]
laws
normalize
reduce
atomic
laws
axioms
DeMorgan
normalize
substitute-both
normalize
laws
axioms
#[serial 1161] <<P>> T <<Q>> in existential lattice quantification for [serial 1156]
laws
normalize
reduce
atomic
laws
axioms
substitute-both
normalize
axioms
DeMorgan
normalize
DeMorgan
normalize
laws
axioms
#[serial 1162] <<P>> T <<Q>> in existential lattice quantification for [serial 1157]
reduce
atomic
laws
normalize
axioms
substitute-both
normalize
replace<=
normalize
DeMorgan
normalize
axioms
laws
split-post
axioms
normalize
axioms
#[serial 1163] <<P>> T <<Q>> in existential lattice quantification for [serial 1158]
reduce
atomic
laws
normalize
axioms
substitute-both
normalize
replace<=
normalize
DeMorgan
normalize
axioms
laws
split-post
normalize
axioms
#[serial 1164] <<P>> T <<Q>> in existential lattice quantification for [serial 1159]
normalize
reduce
laws
atomic
laws
axioms
DeMorgan
normalize
substitute-both
normalize
laws
replace<=
normalize
DeMorgan
normalize
axioms
transitive
split-post
axioms
#[serial 1018]  <<M(CheckMoveForward) and x>> -> <<M(MoveForward)>> for SameSegmentCheckMoveForward-[x]->MoveForward{};
normalize
axioms
#[serial 1019]  <<M(CheckMoveForward) and x>> A <<M(CheckForLastSegment)>> for NextSegmentCheckMoveForward-[x]->CheckForLastSegment{A};
reduce
atomic
normalize
axioms
#[serial 1020]  <<M(CheckForLastSegment) and x>> A <<M(MoveForward)>> for NotLastSegmentCheckForLastSegment-[x]->MoveForward{A};
atomic
normalize
split-post
axioms
guided-sub-equals[CMA]
axioms
laws
axioms
#[serial 1021]  <<M(CheckForLastSegment) and x>> A <<M(MoveForwardLastSegment)>> for IsLastSegmentCheckForLastSegment-[x]->MoveForwardLastSegment{A};
reduce
atomic
normalize
laws
split-post
axioms
normalize
axioms
guided-sub-equals[CMA]
normalize
axioms
substitute-post
guided-sub-equals[CMA]
laws
axioms
#[serial 1022]  <<M(CheckForLastSegment) and x>> -> <<M(FAIL)>> for PastLastSegmentCheckForLastSegment-[x]->FAIL{};
axioms
#[serial 1023]  <<M(MoveForwardLastSegment) and x>> A <<M(CheckMoveForwardLastSegment)>> for LastSegmentMoveForwardLastSegment-[x]->CheckMoveForwardLastSegment{A};
reduce
reduce
reduce
normalize
laws
remove-axioms-post
laws
axioms
push
#Threads::AutoBrake.i
#[serial 1559]   normalization of [serial 154
make-an
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1578] Associativity: (b.c).a = a.b.c [serial 1561]
reduce
atomic
laws
axioms
substitute-both
normalize
axioms
DeMorgan
normalize
DeMorgan
normalize
laws
axioms
#[serial 1579] Associativity: (b.c).a = a.b.c [serial 1563]
reduce
atomic
normalize
laws
axioms
DeMorgan
normalize
substitute-both
normalize
laws
normalize
axioms
#[serial 1580] Associativity: (b.c).a = a.b.c [serial 1565]
reduce
atomic
laws
axioms
substitute-both
normalize
replace<=
normalize
DeMorgan
normalize
axioms
laws
split-post
axioms
normalize
axioms
#[serial 1581] Associativity: (b.c).a = a.b.c [serial 1567]
reduce
atomic
laws
axioms
substitute-both
normalize
replace<=
normalize
DeMorgan
normalize
axioms
laws
split-post
axioms
normalize
axioms
#[serial 1582] Associativity: (b.c).a = a.b.c [serial 1569]
reduce
atomic
laws
axioms
DeMorgan
normalize
substitute-both
normalize
replace<=
normalize
DeMorgan
laws
normalize
axioms
split-post
axioms
transitive
axioms
#[serial 1024]  <<M(CheckMoveForwardLastSegment) and x>> -> <<M(MoveForwardLastSegment)>> for NoMAYetCheckMoveForwardLastSegment-[x]->MoveForwardLastSegment{};
axioms
#[serial 1025]  <<M(CheckMoveForwardLastSegment) and x>> A <<M(GotNewMA)>> for GetNewMACheckMoveForwardLastSegment-[x]->GotNewMA{A};
reduce
normalize
remove-axioms-post
laws
axioms
push
#Threads::AutoBrake.i
#[serial 1857]   normalization of [serial 185
make-an
split-post
axioms
guided-sub-equals[i]
axioms
#[serial 1859]   normalization of [serial 1852]
atomic
normalize
split-post
laws
axioms
substitute-pre
normalize
guided-sub-equals[NEXT_MA]
axioms
guided-sub-equals[CMA.num_segments]
axioms
#[serial 1861]   normalization of [serial 1853]
atomic
split-post
axioms
guided-sub-equals[NEXT_MA]
laws
axioms
#[serial 1026]  <<M(GotNewMA) and x>> -> <<M(CheckMATransition)>> for LastBitOfMaGotNewMA-[x]->CheckMATransition{};
laws
axioms
#[serial 1027]  <<M(CheckMATransition) and x>> -> <<M(GotNewMA)>> for NotEndOfMACheckMATransition-[x]->GotNewMA{};
axioms
#[serial 1028]  <<M(CheckMATransition) and x>> A <<M(MoveForward)>> for StartNextMaCheckMATransition-[x]->MoveForward{A};
reduce
push
#Threads::AutoBrake.i
#[serial 1905] <<P>> -> <<P1>> in sequential composition for [serial 102
make-an
remove-axioms-post
laws
normalize
axioms
#[serial 1906] <<Q4>> -> <<Q>> in sequential composition for [serial 1028]
substitute-pre
normalize
split-post
axioms
guided-sub-equals[i]
guided-sub-equals[CMA]
normalize
axioms
#[serial 1907] <<P1>> S1 <<Q1 and P2>> in sequential composition for [serial 1028]
atomic
substitute-pre
normalize
guided-sub-equals[CMA]
axioms
#[serial 1908] <<Q1 and P2>> S2 <<Q2 and P3>> in sequential composition for [serial 1028]
atomic
normalize
laws
normalize
axioms
#[serial 1909] <<Q2 and P3>> S3 <<Q3 and P4>> in sequential composition for [serial 1028]
atomic
split-post
axioms
guided-sub-equals[CMA]
guided-sub-equals[i]
normalize
laws
axioms
#[serial 1910] <<Q3 and P4>> S4 <<Q4>> in sequential composition for [serial 1028]
remove-axioms-post
laws
atomic
split-post
axioms
guided-sub-equals[i]
normalize
guided-sub-equals[CMA]
laws
axioms
#[serial 1029] Composition of Subcomponents via Directional Connection driver.xl -> motor.xl:
axioms
#[serial 1030] Composition of Subcomponents via Directional Connection sensor.p -> controller.control.p:
axioms
#[serial 1031] Composition of Subcomponents via Directional Connection sensor.v -> controller.control.v:
axioms
#[serial 1032] Composition of Subcomponents via Directional Connection controller.control.sb -> sbrake.brake:
axioms
#[serial 1033] Composition of Subcomponents via Directional Connection controller.control.eb -> ebrake.brake:
axioms
#[serial 1034] Composition of Subcomponents via Directional Connection rbc.ma -> train.controller.control.m_a:
axioms
#[serial 1035] Composition of Subcomponents via Directional Connection CTCS::MovementAuthority.i.ma:
axioms
#[serial 1036] Composition of Subcomponents via Directional Connection Train::Train.i.auth:
axioms
#[serial 1037] Composition of Subcomponents via Directional Connection Train::Train.i.pos:
axioms
#[serial 1038] Composition of Subcomponents via Directional Connection Train::Train.i.vel:
axioms
#[serial 1039] Composition of Subcomponents via Directional Connection Train::Train.i.dxl:
axioms
#[serial 1040] Composition of Subcomponents via Directional Connection Train::Train.i.cpsb:
axioms
#[serial 1041] Composition of Subcomponents via Directional Connection Train::Train.i.cpeb:
axioms
#[serial 1042] Composition of Subcomponents via Directional Connection Train::ControllerProcess.i.conn_s:
axioms
#[serial 1043] Composition of Subcomponents via Directional Connection Train::ControllerProcess.i.conn_v:
axioms
#[serial 1044] Composition of Subcomponents via Directional Connection Train::ControllerProcess.i.conn_ma:
axioms
#[serial 1045] Composition of Subcomponents via Directional Connection Train::ControllerProcess.i.conn_sb:
axioms
#[serial 1046] Composition of Subcomponents via Directional Connection Train::ControllerProcess.i.conn_eb:
axioms
#Q.E.D.