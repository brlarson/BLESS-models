#Threads::AutoBrake.i
#[serial 1003] <<M(MoveForwardLastSegment)>> -> <<I>> from invariant I when complete state MoveForwardLastSegment has Assertion <<M(MoveForwardLastSegment)>> in its definition
make-an
axioms
#[serial 1004] <<M(GetFirstMA)>> -> <<I>> from invariant I when complete state GetFirstMA has Assertion <<M(GetFirstMA)>> in its definition.
axioms
#[serial 1005] <<M(MoveForward)>> -> <<I>> from invariant I when complete state MoveForward has Assertion <<M(MoveForward)>> in its definition.
axioms
#[serial 1006] <<M(GotNewMA)>> -> <<I>> from invariant I when complete state GotNewMA has Assertion <<M(GotNewMA)>> in its definition.
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckMoveForward, <<M(CheckMoveForward)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckMoveForwardLastSegment, <<M(CheckMoveForwardLastSegment)>> -> <<e1 or e2 or . . . en>>
laws
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state Start, <<M(Start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckForLastSegment, <<M(CheckForLastSegment)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckFirstMA, <<M(CheckFirstMA)>> -> <<e1 or e2 or . . . en>>
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state CheckMATransition, <<M(CheckMATransition)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1013]  <<M(Start)>> A <<M(GetFirstMA)>> for Go:Start-[ ]->GetFirstMA{A};
atomic
axioms
#[serial 1014]  <<M(GetFirstMA) and x>> -> <<M(CheckFirstMA)>> for GetFirstMA:GetFirstMA-[x]->CheckFirstMA{};
axioms
#[serial 1015]  <<M(CheckFirstMA) and x>> -> <<M(GetFirstMA)>> for NotYet:CheckFirstMA-[x]->GetFirstMA{};
axioms
#[serial 1016]  <<M(CheckFirstMA) and x>> A <<M(MoveForward)>> for GotFirstMA:CheckFirstMA-[x]->MoveForward{A};
reduce
normalize
remove-axioms-post
laws
push
#Threads::AutoBrake.i
#[serial 1073]   normalization of [serial 1066
make-an
substitute-pre
normalize
split-post
axioms
guided-sub-equals[i]
axioms
#[serial 1075]   normalization of [serial 1067]
atomic
#Threads::AutoBrake.i
#[serial 1077]   normalization of [serial 1068
make-an
atomic
substitute-pre
laws
normalize
guided-sub-equals[CMA]
axioms
laws
axioms
#[serial 1087]  add user-defined axioms to postcondition:
axioms
#[serial 1090] Law of And-Simplification:  P and true is P [serial 1088]
atomic
normalize
split-post
guided-sub-equals[i]
guided-sub-equals[CMA]
laws
axioms
#[serial 1091] Law of And-Simplification:  P and true is P [serial 1089]
atomic
normalize
split-post
axioms
guided-sub-equals[CMA]
guided-sub-equals[i]
normalize
laws
axioms
#[serial 1017]  <<M(MoveForward) and x>> A <<M(CheckMoveForward)>> for CheckSpeed:MoveForward-[x]->CheckMoveForward{A};
reduce
reduce
remove-axioms-post
normalize
laws
normalize
push
#Threads::AutoBrake.i
#[serial 1157]   normalization of [serial 1149
make-an
replace<=
cnf
laws
normalize
axioms
#[serial 1181] Associativity: (b.c).a = a.b.c [serial 1167]
atomic
axioms
#[serial 1186]   normalization of [serial 1177]
atomic
laws
axioms
substitute-both
normalize
axioms
#[serial 1188]   normalization of [serial 1178]
atomic
laws
axioms
substitute-both
normalize
guided-sub-equals[#CTCS_Property::EB_Rate]
normalize
axioms
#[serial 1190]   normalization of [serial 1179]
atomic
laws
axioms
substitute-both
normalize
guided-sub-equals[#CTCS_Property::EB_Rate]
guided-sub-equals[#CTCS_Property::SB_Rate]
split-post
normalize
axioms
replace<=
normalize
DeMorgan
normalize
split-post
axioms
#[serial 1192]   normalization of [serial 1180]
atomic
laws
axioms
split-post
substitute-both
normalize
guided-sub-equals[#CTCS_Property::SB_Rate]
normalize
axioms
guided-sub-equals[#CTCS_Property::EB_Rate]
replace<=
normalize
DeMorgan
normalize
axioms
#[serial 1195]   normalization of [serial 1183]
axioms
#[serial 1018]  <<M(CheckMoveForward) and x>> -> <<M(MoveForward)>> for SameSegment:CheckMoveForward-[x]->MoveForward{};
normalize
axioms
#[serial 1019]  <<M(CheckMoveForward) and x>> A <<M(CheckForLastSegment)>> for NextSegment:CheckMoveForward-[x]->CheckForLastSegment{A};
normalize
laws
reduce
atomic
normalize
axioms
#[serial 1020]  <<M(CheckForLastSegment) and x>> A <<M(MoveForward)>> for NotLastSegment:CheckForLastSegment-[x]->MoveForward{A};
normalize
laws
atomic
normalize
split-post
axioms
guided-sub-equals[CMA]
axioms
laws
axioms
#[serial 1021]  <<M(CheckForLastSegment) and x>> A <<M(MoveForwardLastSegment)>> for IsLastSegment:CheckForLastSegment-[x]->MoveForwardLastSegment{A};
normalize
laws
reduce
atomic
normalize
laws
axioms
normalize
split-post
axioms