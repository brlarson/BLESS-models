#This file, script.txt, was produced the BLESS Proof Assistant v3.1
#  at Fri May 07 11:51:31 CDT 2021 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/VVI/proof script/VVI.ps
#vvi_mode::VVI.i
#[serial 1003] <<I>> -> BLESS::Invariant of thread VVI.
make-an
substitute-both
normalize
axioms
#[serial 1004] <<M(pace)>> -> <<I>> from invariant I when complete state pace has Assertion <<M(pace)>> in its definition.
substitute-pre
normalize
split-quant
axioms
#[serial 1005] <<M(sense)>> -> <<I>> from invariant I when complete state sense has Assertion <<M(sense)>> in its definition.
substitute-pre
normalize
load
#  You chose proof script: /Users/brianlarson/git/BLESS-models/VVI/proof script/VVI.ps
#vvi_mode::VVI.i
#[serial 1003] <<I>> -> BLESS::Invariant of thread VVI.
make-an
substitute-both
normalize
axioms
#[serial 1004] <<M(pace)>> -> <<I>> from invariant I when complete state pace has Assertion <<M(pace)>> in its definition.
substitute-pre
normalize
split-quant
axioms
#[serial 1005] <<M(sense)>> -> <<I>> from invariant I when complete state sense has Assertion <<M(sense)>> in its definition.
substitute-pre
normalize
split-quant
axioms
#[serial 1006] Serban's Theorem:  disjunction of execute conditions leaving execution state power_on, <<M(power_on)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state check_pace_vrp, <<M(check_pace_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state check_sense_vrp, <<M(check_sense_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1009]  <<M(power_on)>> A <<M(sense)>> for T1_POWER_ON:power_on-[ ]->sense{A};
reduce
axioms
atomic
laws
normalize
axioms
push
#vvi_mode::VVI.i
#[serial 1057]   normalization of [serial 1049
make-an
substitute-post
normalize
split-post
guided-sub-equals[last_beat]
axioms
normalize
quant
axioms
#[serial 1061]   normalization of [serial 1053]
replace-port
normalize
axioms
#[serial 1010]  <<M(pace) and x>> -> <<M(off)>> for T2_STOP:pace-[x]->off{};
axioms
#[serial 1011]  <<M(sense) and x>> -> <<M(off)>> for T2_STOP:sense-[x]->off{};
axioms
#[serial 1012]  <<M(pace) and x>> A <<M(pace)>> for T3_PACE_LRL_AFTER_VP:pace-[x]->pace{A};
substitute-both
normalize
laws
normalize
reduce
atomic
laws
axioms
normalize
split-post
normalize
push
#vvi_mode::VVI.i
#[serial 1091] P -> P1 in concurrent composition for [serial 1089
make-an
substitute-post
normalize
axioms
#[serial 1103]   normalization of [serial 1096]
replace-port
axioms
#[serial 1106] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1101]
guided-sub-equals[last_beat]
axioms
#[serial 1112]   normalization of [serial 1107]
quant
axioms
#[serial 1013]  <<M(pace) and x>> -> <<M(check_pace_vrp)>> for T4_VS_AFTER_VP:pace-[x]->check_pace_vrp{};
normalize
axioms
#[serial 1014]  <<M(check_pace_vrp) and x>> -> <<M(pace)>> for T5_VS_AFTER_VP_IN_VRP:check_pace_vrp-[x]->pace{};
normalize
laws
axioms
#[serial 1015]  <<M(check_pace_vrp) and x>> A <<M(sense)>> for T6_VS_AFTER_VP_IS_NR:check_pace_vrp-[x]->sense{A};
reduce
atomic
laws
normalize
axioms
push
#vvi_mode::VVI.i
#[serial 1137]   normalization of [serial 1128
make-an
substitute-both
normalize
laws
substitute-post
normalize
laws
split-post
axioms
split@
normalize
axioms
#[serial 1139]   normalization of [serial 1129]
substitute-post
normalize
split-post
guided-sub-equals[last_beat]
axioms
normalize
quant
axioms
#[serial 1143]   normalization of [serial 1133]
replace-port
normalize
axioms
#[serial 1016]  <<M(sense) and x>> A <<M(pace)>> for T7_PACE_LRL_AFTER_VS:sense-[x]->pace{A};
reduce
atomic
laws
normalize
axioms
push
#vvi_mode::VVI.i
#[serial 1193]   normalization of [serial 1184
make-an
substitute-post
laws
normalize
axioms
#[serial 1195]   normalization of [serial 1185]
substitute-post
normalize
split-post
guided-sub-equals[last_beat]
axioms
normalize
quant
axioms
#[serial 1198]   normalization of [serial 1189]
replace-port
axioms
#[serial 1017]  <<M(sense) and x>> -> <<M(check_sense_vrp)>> for T8_VS_AFTER_VS:sense-[x]->check_sense_vrp{};
normalize
axioms
#[serial 1018]  <<M(check_sense_vrp) and x>> -> <<M(sense)>> for T9_VS_AFTER_VS_IN_VRP:check_sense_vrp-[x]->sense{};
normalize
laws
axioms
#[serial 1019]  <<M(check_sense_vrp) and x>> A <<M(sense)>> for T10_VS_AFTER_VS_IS_NR:check_sense_vrp-[x]->sense{A};
reduce
atomic
laws
normalize
axioms
push
#vvi_mode::VVI.i
#[serial 1238]   normalization of [serial 1229
make-an
substitute-post
normalize
split-post
laws
axioms
substitute-post
normalize
split-post
axioms
substitute-pre
split@
normalize
laws
axioms
#[serial 1240]   normalization of [serial 1230]
substitute-post
normalize
split-post
guided-sub-equals[last_beat]
axioms
normalize
quant
axioms
#[serial 1244]   normalization of [serial 1234]
replace-port
normalize
axioms
#Q.E.D.
