--IoMTwin.aadl
--Internet of Medical Things with Imperfect Network
package IoMTwin
public

	with IoMT, BLESS, BLESS_Types, IoMT_Properties, Physical_Types, IoMT_Types;

	annex Assertion {**
  ghost variables
    def PAUSE_INFUSION_ECHO ~ boolean  --echo returned from PCA pump
    def RM_ALARM_ECHO ~ boolean -- echo returned from ICE Resource
--define and add this to Lost_Confirmation port    
--  <<LOST_CONFIRMATION: : >>   
**};

	system SysIoMT
		properties
			BLESS::Invariant => "<< IS_SAFE() >>";
	end SysIoMT;

	system implementation SysIoMT.impl
	subcomponents
		pca_pump: system PCA_Pump;
		pulse_oximeter: system Pulse_Oximeter.impl;
		resp_monitor: system Respiration_Monitor.impl;
		supervisor: system ICE_Supervisor.impl;
		network: virtual bus IoMT::Network_Bus;
		patient: abstract IoMT::Patient;
		nurse_station: system Nurse_Station;

	connections
		--primary signals
		pause_infusion: port supervisor.Pause_Infusion -> pca_pump.Pause_infusion {Actual_Connection_Binding => (
				reference (network));};
		po_alarm: port pulse_oximeter.PO_Alarm -> supervisor.PO_Alarm {Actual_Connection_Binding => (
				reference (network));};
		rm_alarm: port resp_monitor.RM_Alarm -> supervisor.RM_Alarm {Actual_Connection_Binding => (
				reference (network));};

		--confirmation signals
		pause_infusion_echo: port pca_pump.Pause_Infusion_Echo -> supervisor.Pause_Infusion_Echo {
			Actual_Connection_Binding => (reference (network));};
		po_alarm_echo: port supervisor.PO_Alarm_Echo -> pulse_oximeter.PO_Alarm_Echo {Actual_Connection_Binding => (
				reference (network));};
		rm_alarm_echo: port supervisor.RM_Alarm_Echo -> resp_monitor.RM_Alarm_Echo {Actual_Connection_Binding => (
				reference (network));};

		--tube and needle between pump and patient
		infusion_set: feature pca_pump.Infused_Drug -> patient.Infused_Drug;

		--alarms to nurse's station
		poa_ns: port pulse_oximeter.PO_Alarm -> nurse_station.Patient_Alarm;
		rma_ns: port resp_monitor.RM_Alarm -> nurse_station.Patient_Alarm;
		lcm: port pulse_oximeter.Lost_confirmation -> nurse_station.Patient_Lost_Confirmation;

		--virtual bus connection
		network2pca: virtual bus access network <-> pca_pump.network_conn;
		po2network: virtual bus access network <-> pulse_oximeter.network_conn;
		rm2network: virtual bus access network <-> resp_monitor.network_conn;
		ca2network: virtual bus access network <-> supervisor.network_conn;
		SysIoMT_impl_new_connection: port resp_monitor.Lost_Confirmation -> nurse_station.Patient_Lost_Confirmation;
		SysIoMT_impl_new_connection2: port supervisor.Lost_Confirmation -> nurse_station.Patient_Lost_Confirmation;
end SysIoMT.impl;

-- PCA Pump  using event data messages
	system PCA_Pump
		features
			Pause_Infusion: in data port BLESS_Types::Boolean {BLESS::Assertion => "<<PO_ALARM() or RM_ALARM()>>";};
			Infused_Drug: out feature Physical_Types::Fluid_Flow --abstract AADL feature modeling drug delivery
			{BLESS::Assertion => "<< returns quantity mlph:=PUMP_RATE() >>";};
			Pause_Infusion_Echo: out event data port BLESS_Types::Boolean;
			network_conn: requires virtual bus access IoMT::Network_Bus;
		properties
			BLESS::Invariant => "<< Pause_Infusion iff (PUMP_RATE$() = KVO_RATE_property or HALT()) >>";
	end PCA_Pump;
	
	system implementation PCA_Pump.impl
		subcomponents
			pcp: process PCA_Pump_Process.impl;
			
		connections
			pif: port Pause_Infusion -> pcp.Pause_Infusion;
 			ifd: feature pcp.Infused_Drug -> Infused_Drug;
 			pie: port pcp.Pause_Infusion_Echo -> Pause_Infusion_Echo;
			
	end PCA_Pump.impl;
	
 process PCA_Pump_Process
 	features
 		Pause_Infusion: in data port BLESS_Types::Boolean {BLESS::Assertion => "<<PO_ALARM() or RM_ALARM()>>";};
		Infused_Drug: out feature Physical_Types::Fluid_Flow --abstract AADL feature modeling drug delivery
		{BLESS::Assertion => "<< returns quantity mlph:=PUMP_RATE() >>";};
		Pause_Infusion_Echo: out event data port BLESS_Types::Boolean;
 end PCA_Pump_Process;
 
 process implementation PCA_Pump_Process.impl
 	subcomponents
 		pct: thread PCA_Pump_Thread.impl;
 	
 	connections
 		pif: port Pause_Infusion -> pct.Pause_Infusion;
 		ifd: feature pct.Infused_Drug -> Infused_Drug;
 		pie: port pct.Pause_Infusion_Echo -> Pause_Infusion_Echo;
 		
 end PCA_Pump_Process.impl;
 
 thread PCA_Pump_Thread
 	features
 		Pause_Infusion: in data port BLESS_Types::Boolean {BLESS::Assertion => "<<PO_ALARM() or RM_ALARM()>>";};
		Infused_Drug: out feature Physical_Types::Fluid_Flow --abstract AADL feature modeling drug delivery
		{BLESS::Assertion => "<< returns quantity mlph:=PUMP_RATE() >>";};
		Pause_Infusion_Echo: out event data port BLESS_Types::Boolean;
 		
 end PCA_Pump_Thread;
 
 thread implementation PCA_PUMP_Thread.impl
 	
 end PCA_PUMP_Thread.impl;

-- Pulse Oximeter using event data messages
	system Pulse_Oximeter
		features
			Lost_Confirmation: out event port; --report to nurse's station that alarm signal to supervisor was not confirmed in time
			network_conn: requires virtual bus access IoMT::Network_Bus;
			PO_Alarm: out event data port BLESS_Types::Boolean {BLESS::Assertion => "<< PO_ALARM() >>";};
			PO_Alarm_Echo: in event data port BLESS_Types::Boolean;
		properties
			BLESS::Invariant => "<< PO_Alarm iff PO_ALARM() >>";
	end Pulse_Oximeter;
	
	system implementation Pulse_Oximeter.impl
		subcomponents
			poc: process Pulse_Oximeter_Process.impl;
			pos: device Pulse_Oximeter_Sensor;
			
		connections
			lcc: port  poc.Lost_Confirmation -> Lost_Confirmation;
			poa: port poc.PO_Alarm -> PO_Alarm;
			poe: port PO_Alarm_Echo -> poc.PO_Alarm_Echo;
			spc: port  pos.Spo2_Level -> poc.Spo2_Level;
			hrr: port  pos.heart_rate -> poc.heart_rate;
		
	end Pulse_Oximeter.impl;
	
	process Pulse_Oximeter_Process
		features
			Spo2_Level: in data port IoMT_Types::Spo2_Rate;
			Heart_Rate: in data port IoMT_Types::Heart_Rate;
			Lost_Confirmation: out event port;
			PO_Alarm: out event data port BLESS_Types::Boolean {BLESS::Assertion => "<< PO_ALARM() >>";};
			PO_Alarm_Echo: in event data port BLESS_Types::Boolean;
					 
	end Pulse_Oximeter_Process;

	process implementation Pulse_Oximeter_Process.impl
		subcomponents
			pot: thread Pulse_Oximeter_Thread.impl;
			
		connections
			lcc: port  pot.Lost_Confirmation -> Lost_Confirmation;
			pol: port  pot.PO_Alarm -> PO_Alarm;
			poe: port PO_Alarm_Echo -> pot.PO_Alarm_Echo;
			spc: port Spo2_Level -> pot.Spo2_Level;
			hrr: port  heart_rate -> pot.heart_rate;
		
	end Pulse_Oximeter_Process.impl;
	
	thread Pulse_Oximeter_Thread
		features
			Spo2_Level: in data port IoMT_Types::Spo2_Rate
			 { BLESS::Value => "<< returns quantity percent := SPO2 >>";};
			Heart_Rate: in data port IoMT_Types::Heart_Rate
			 { BLESS::Value => "<< returns quantity bpm := HEART_RATE >>";};
			Lost_Confirmation: out event port;
			PO_Alarm: out event data port BLESS_Types::Boolean {BLESS::Assertion => "<< PO_ALARM() >>";};
			PO_Alarm_Echo: in event data port BLESS_Types::Boolean;
			
		properties
			--Dispatch protocol is Timed because we want to dispatch every period to get heart_rate and spo2 and arrival of PO_Alarm_Echo event
			Dispatch_Protocol => Timed; 
			Period => 200 ms;
	end Pulse_Oximeter_Thread;
	
	thread implementation Pulse_Oximeter_Thread.impl
		annex BLESS{**
			assert
				<< LOW_SPO2_HR: :HEART_RATE < MINIMUM_HEART_RATE or SPO2 < PROGRAMMED_SPO2 >>
				<< LOW_HR: :HEART_RATE < MINIMUM_HEART_RATE >>
				<< LOW_SPO2: :sp < PROGRAMMED_SPO2 >>
			
			invariant 
				<< INV_PO: :MHR_A() and PSPO2_A() and POA_A() >>
				
			variables
				hrr~quantity bpm; --heart rate
				mhr~quantity bpm := 60.0 bpm -- minimum heart rate
				 << MHR_A: : mhr  = MINIMUM_HEART_RATE >> ;
				sp~quantity percent; -- spo2
				psp~quantity percent -- programmed spo2
				 << PSPO2_A: : psp  = PROGRAMMED_SPO2 >> ;
				poa~boolean := false
				  <<POA_A: : poa iff LOW_SPO2_HR() >> -- <<POA: : pao iff (LOW_HR() or LOW_SPO2()) >> 
								
			states
				start: initial state << INV_PO() >>
				run: complete state << INV_PO() >>
				--check_hrr: state << INV_PO() >>
				--check_spo2: state << INV_PO() >>
				check_echo: complete state <<INV_PO() >> 
				
			transitions
				go: start -[ ]-> run
				
				got_hrr_spo2: run -[on dispatch]-> check_echo
				{
					 << INV_PO() >>
					Heart_Rate?(hrr) 
					; << hrr = HEART_RATE and INV_PO() >>
					Spo2_Level?(sp)
					 << hrr = HEART_RATE and INV_PO() and sp = SPO2 >>
					;
					if(hrr >= mhr and sp >= psp)~>
						{
							 << hrr = HEART_RATE and hrr >= mhr and sp = SPO2 and sp >= psp and INV_PO() >>
							poa:=false & PO_Alarm!(false)
							 << INV_PO() >>
						}
					[] (hrr < mhr)~> --no need to check  sp < psp
						{
							 << hrr = HEART_RATE and hrr < mhr and INV_PO() >>
							poa:=true & PO_Alarm!(true)
							 << INV_PO() >>
						}
					[] (sp < psp)~> --no need to check hrr < mhr
						{
							 << sp = psp and sp < psp and INV_PO() >>
							poa:=true & PO_Alarm!(true)
							 << INV_PO() >>
						}
					fi
					<< INV_PO() >>
				}--end got_spo2
				
				
				got_echo: check_echo -[on dispatch PO_Alarm_Echo]-> run
				{
					 << INV_PO() and PO_Alarm_Echo@now >>
			   		declare echo_val~boolean := PO_Alarm_Echo?
			   			{ 
			   				 << INV_PO() and (echo_val iff PO_Alarm_Echo) >>
			   				if (echo_val = poa)~> skip  --echo was same
					  		[]
					  		(echo_val <> poa)~> Lost_Confirmation!  --echo was different
					  		fi
					 	 	 << INV_PO() >>	
						} 
							<< INV_PO()  >>
				}--end got_echo
				
				late_echo: check_echo -[on dispatch timeout (PO_Alarm or PO_Alarm_Echo) IoMT_Properties::PO_Echo_Limit s]-> run
					{ Lost_Confirmation!}
				
				
		**};
	
	end Pulse_Oximeter_Thread.impl;
	
	device Pulse_Oximeter_Sensor
		features 
			Spo2_Level: out data port IoMT_Types::Spo2_Rate;
			Heart_Rate: out data port IoMT_Types::Heart_Rate;
	end Pulse_Oximeter_Sensor;

-- Respiration Monitor using event data messages
	system Respiration_Monitor
		features
			Lost_Confirmation: out event port; --do we have any time limit here
			RM_Alarm: out event data port BLESS_Types::Boolean {BLESS::Assertion => "<< RM_ALARM() >>";};
			RM_Alarm_Echo: in event data port BLESS_Types::Boolean;
			network_conn: requires virtual bus access IoMT::Network_Bus; -- no assertion on the network connection
		properties
			
			BLESS::Invariant => "<< RM_Alarm iff RM_ALARM() >>";
	end Respiration_Monitor;

	system implementation Respiration_Monitor.impl
	subcomponents
		rmp: process Respiration_Monitor_Process.impl;
		rss: device Respiration_Sensor;
	connections
		lsc: port rmp.Lost_Confirmation -> Lost_Confirmation;
		rma: port rmp.RM_ALARM -> RM_ALARM;
		rme: port RM_Alarm_Echo -> rmp.RM_Alarm_Echo;
		rpr: port rss.RP_Rate -> rmp.RP_Rate;
end Respiration_Monitor.impl;
	
	process Respiration_Monitor_Process
		features
			
			Lost_Confirmation: out event port;
			RM_Alarm: out event data port BLESS_Types::Boolean {BLESS::Assertion => "<< RM_ALARM() >>";};
			RM_Alarm_Echo: in event data port BLESS_Types::Boolean;
			RP_Rate: in data port IoMT_Types::Respiration_Rate;
			
	end Respiration_Monitor_Process;
	
	process implementation Respiration_Monitor_Process.impl
		subcomponents
			rmt: thread Respiration_Monitor_Thread.impl;
			
		connections
			lsc: port rmt.Lost_Confirmation -> Lost_Confirmation;
			rma: port rmt.RM_ALARM -> RM_ALARM;
			rme: port RM_Alarm_Echo -> rmt.RM_Alarm_Echo;
			rsr: port RP_Rate -> rmt.RP_Rate;
			
	end Respiration_Monitor_Process.impl;


	thread Respiration_Monitor_Thread
		features
			Lost_Confirmation: out event port; --add some assertion
			RM_Alarm: out event data port BLESS_Types::Boolean 
				{BLESS::Assertion => "<< RM_ALARM() >>";};
			RM_Alarm_Echo: in event data port BLESS_Types::Boolean; --add some assertion
			RP_Rate: in data port IoMT_Types::Respiration_Rate 
				{BLESS::Assertion => "<< returns quantity brpm := RESPIRATION_RATE >>";}; -- respiration rate 
		properties
			Dispatch_Protocol => Timed;
			Period => 200 ms;
 end Respiration_Monitor_Thread;
	
	thread implementation Respiration_Monitor_Thread.impl
		annex BLESS{**
			assert
			<<LOW_RP: : RESPIRATION_RATE < MINIMUM_RESPIRATION_RATE >>
			
			invariant
			 << RA() and MRP_A()>>
			
			variables
				rpr~quantity brpm; 
				mrp~quantity brpm := 2.0 brpm 
				<< MRP_A: : mrp = MINIMUM_RESPIRATION_RATE >>; -- what is the initial value for resp_rate
				rma~boolean := false
				 <<RA: : rma iff LOW_RP()>>; -- we could have used RM_Alarm
				
			 states
			   start: initial state << RA() and MRP_A() >>
			   run: complete state << RA() and MRP_A() >>
				check_echo:   complete state << RA() and MRP_A() >>
			--   check_alarm:  state
			   
			  transitions
			  	go: start -[ ]-> run 
			  	
			  	got_rp: run -[ on dispatch ]-> check_echo
			   	{
			   	 RP_Rate?(rpr)
			   	 << rpr = RESPIRATION_RATE and MRP_A() and RA() >>
			   	 ;
			   	 if(rpr >= mrp)~> 
			   	 	{ 
			   	 		<< rpr = RESPIRATION_RATE and rpr >= mrp and MRP_A() and RA() >> 
			   	 		rma:=false & RM_Alarm!(false)
			   	 		<< RA() and MRP_A() >>
			   		 } 
			   	 []
			   	 (rpr < mrp)~> 
			   	 	{ 
			   	 		<< rpr = RESPIRATION_RATE and rpr < mrp and MRP_A() and RA() >> 
			   	 		rma:=true & RM_Alarm!(true) 
			   	 		<< RA() and MRP_A() >>
			   	 	}
			   	 fi
			   	} -- end got_rp
			   	
			   	got_echo:  check_echo -[ on dispatch  RM_Alarm_Echo]-> run
			   	{
			 		<< RA() and MRP_A() and RM_Alarm_Echo@now >>
			   		declare echo_val~boolean := RM_Alarm_Echo?
			   			{ << RA() and MRP_A() and (echo_val iff RM_Alarm_Echo) >>
			   				if (echo_val = rma)~> skip  --echo was same
					  		[]
					  		(echo_val <> rma)~> Lost_Confirmation!  --echo was different
					  		fi
					 	 	<< RA() and MRP_A() >>	
						} 
							<< RA() and MRP_A()  >>
			   	 }-- end got_echo
			   	 
			   	 late_echo: check_echo -[on dispatch timeout (RM_Alarm  or RM_Alarm_Echo) IoMT_Properties::RM_Echo_Limit s ]-> run
			   			{ Lost_Confirmation! }
			**};
	end Respiration_Monitor_Thread.impl;

 device Respiration_Sensor
 	features
 		RP_Rate:out data port IoMT_Types::Respiration_Rate; --IoMT::RESPIRATION_RATE, it should be in the properties not as a ghost variable
 end Respiration_Sensor;

--Nurse's Station notified if message confirmation is lost
	system Nurse_Station
		features
			Patient_Lost_Confirmation: in event port;
			Patient_Alarm: in event data port BLESS_Types::Boolean;
	--expected to have ports for each patient supervised by the nurse's station
	end Nurse_Station;

	system ICE_Supervisor
		features
			RM_Alarm_Echo: out event data port BLESS_Types::Boolean --send back RM alarm
			{BLESS::Assertion => "<<RM_ALARM()>>";};
			Lost_Confirmation: out event port; --confirmation of Pause_Infusion not arrived in time
			network_conn: requires virtual bus access IoMT::Network_Bus;
			PO_Alarm: in event data port BLESS_Types::Boolean {BLESS::Assertion => "<<PO_ALARM()>>";};
			RM_Alarm: in event data port BLESS_Types::Boolean {BLESS::Assertion => "<<RM_ALARM()>>";};
			Pause_Infusion: out event data port BLESS_Types::Boolean {
				BLESS::Assertion => "<<PO_ALARM() or RM_ALARM()>>";};
			PO_Alarm_Echo: out event data port BLESS_Types::Boolean --send back PO alarm
			{BLESS::Assertion => "<<PO_ALARM()>>";};
			Pause_Infusion_Echo: in event data  port BLESS_Types::Boolean {
				BLESS::Assertion => "<<PAUSE_INFUSION_ECHO>>";};
		properties
			BLESS::Invariant => "<< (PO_ALARM() or RM_ALARM()) implies Pause_Infusion >>";
	end ICE_Supervisor;

	system implementation ICE_Supervisor.impl
		subcomponents
			spp: process Supervise_PCA_Process.impl;
		connections
			poa: port PO_Alarm -> spp.PO_Alarm;
			rma: port RM_Alarm -> spp.RM_Alarm;
			pi: port spp.Pause_Infusion -> Pause_Infusion;
			pie: port Pause_Infusion_Echo -> spp.Pause_Infusion_Echo;
			lc: port spp.Lost_Confirmation -> Lost_Confirmation;
			icp: port spp.PO_Alarm_Echo -> PO_Alarm_Echo;
			icr: port spp.RM_Alarm_Echo -> RM_Alarm_Echo;
	end ICE_Supervisor.impl;

	process Supervise_PCA_Process
		features
			RM_Alarm_Echo: out event data port BLESS_Types::Boolean --send back RM alarm
			{BLESS::Assertion => "<<RM_ALARM()>>";};
			Lost_Confirmation: out event port; --confirmation of Pause_Infusion not arrived in time
			PO_Alarm: in event data port BLESS_Types::Boolean {BLESS::Assertion => "<<PO_ALARM()>>";};
			RM_Alarm: in event data port BLESS_Types::Boolean {BLESS::Assertion => "<<RM_ALARM()>>";};
			Pause_Infusion: out event data port BLESS_Types::Boolean {
				BLESS::Assertion => "<<PO_ALARM() or RM_ALARM()>>";};
			PO_Alarm_Echo: out event data port BLESS_Types::Boolean --send back PO alarm
			{BLESS::Assertion => "<<PO_ALARM()>>";};
			Pause_Infusion_Echo: in event data  port BLESS_Types::Boolean {
				BLESS::Assertion => "<<PAUSE_INFUSION_ECHO>>";};
		properties
			BLESS::Invariant => "<< (PO_ALARM() or RM_ALARM()) implies Pause_Infusion >>";
	end Supervise_PCA_Process;

	process implementation Supervise_PCA_Process.impl
		subcomponents
			spt: thread Supervise_PCA_Thread.echo;
		connections
			poa: port PO_Alarm -> spt.PO_Alarm;
			rma: port RM_Alarm -> spt.RM_Alarm;
			pi: port spt.Pause_Infusion -> Pause_Infusion;
			pie: port Pause_Infusion_Echo -> spt.Pause_Infusion_Echo;
			lc: port spt.Lost_Confirmation -> Lost_Confirmation;
			srp: port spt.RM_Alarm_Echo -> RM_Alarm_Echo;
			spp: port spt.PO_Alarm_Echo -> PO_Alarm_Echo;
	end Supervise_PCA_Process.impl;

	thread Supervise_PCA_Thread
		features
			RM_Alarm_Echo: out event data port BLESS_Types::Boolean --send back RM alarm
			{BLESS::Assertion => "<<RM_ALARM()>>";};
			Lost_Confirmation: out event port; --confirmation of Pause_Infusion not arrived in time
			PO_Alarm: in event data port BLESS_Types::Boolean {BLESS::Assertion => "<<PO_ALARM()>>";};
			RM_Alarm: in event data port BLESS_Types::Boolean {BLESS::Assertion => "<<RM_ALARM()>>";};
			Pause_Infusion: out event data port BLESS_Types::Boolean {
				BLESS::Assertion => "<<PO_ALARM() or RM_ALARM()>>";};
			PO_Alarm_Echo: out event data port BLESS_Types::Boolean --send back PO alarm
			{BLESS::Assertion => "<<PO_ALARM()>>";};
			Pause_Infusion_Echo: in event data  port BLESS_Types::Boolean {
				BLESS::Assertion => "<<PAUSE_INFUSION_ECHO>>";};
		properties
			Dispatch_Protocol => Sporadic;
	end Supervise_PCA_Thread;

	thread implementation Supervise_PCA_Thread.echo
		annex BLESS {**
				invariant 
					<<INV_E: :INV()  --same invariant as IoMT::Supervise_PCA_Thread.simple
					  and POA() and RMA() and PI() >>
				variables
				  po_alarm_active~boolean := false
				    <<POA: :po_alarm_active iff PO_ALARM()>>
				  rm_alarm_active~boolean := false
				    <<RMA: : rm_alarm_active iff RM_ALARM() >>
				  pause_inf~boolean := false
				    <<PI: : pause_inf iff (RM_ALARM() or PO_ALARM())>>
				  last_po_ts~time := 0.0s
				  last_rm_ts~time := 0.0s
				  last_pi_ts~time := 0.0s		  
							
				states
					start: initial state << INV_E() >>	--start here
					run: complete state << INV_E() >>   --waiting for RM and PO
--					check_alarm: state << INV() and POA() and RMA() >>    --decide whether to pause infusion
					check_echo: complete state  << INV_E() >>  --wait for echo form PCA pump
					--done: final state
					
				transitions
					go: start -[ ]-> run
					
					got_po: run -[on dispatch PO_Alarm]-> check_echo
					  { 
					  	<< INV() and RMA() >>  --assume RMA(), to re-establish POA()
					  	PO_Alarm?(po_alarm_active)  --save value of PO_Alarm
					  	;  << INV() and RMA() and (po_alarm_active iff PO_ALARM()) >>
					  	PO_Alarm_Echo!(po_alarm_active)  --echo value back to PO
					  	;  << INV() and RMA() and POA() >>
					  	pause_inf := po_alarm_active or rm_alarm_active
					  	; << INV_E() >>
					  	Pause_Infusion!(pause_inf)
					  }
					  
					got_rm: run -[on dispatch RM_Alarm]-> check_echo
					  {  << INV() and POA() >>
					  	RM_Alarm?(rm_alarm_active)  --save value of RM_Alarm
					  	;   << INV() and POA()  and (rm_alarm_active iff RM_ALARM())  >>
					  	RM_Alarm_Echo!(rm_alarm_active)  --echo value back to PO
					  	;  << INV() and RMA() and POA() >>
					  	pause_inf := po_alarm_active or rm_alarm_active
					  	; << INV_E() >>
					  	Pause_Infusion!(pause_inf)
					  }
					  					 	
					got_echo: check_echo -[on dispatch Pause_Infusion_Echo]-> run
					  {
					  declare echo_val~boolean := Pause_Infusion_Echo?
					    {  << (echo_val iff PAUSE_INFUSION_ECHO) and INV_E() >>
					    if (echo_val = pause_inf)~> skip  --echo was same
					    []
					    (echo_val <> pause_inf)~> Lost_Confirmation!  --echo was different
					    fi	
					    << INV_E() >>
					    }
					  } 
					  
					--start timeout duration upon Pause_Infusion!, expires if Pause_Infusion_Echo not received within time limit
					late_echo: check_echo -[on dispatch timeout (Pause_Infusion  or Pause_Infusion_Echo) IoMT_Properties::PCA_Echo_Limit s ]-> run
					  { Lost_Confirmation! }
					  
--					po_late: check_po_rm_delay -[ now - last_po_ts > IoMT_Properties::PO_Delay_Limit s]-> run
--					  { Pause_Infusion!(true) & Lost_Confirmation! }
--					rm_late: check_po_rm_delay -[ now - last_rm_ts > IoMT_Properties::RM_Delay_Limit s]-> run
--					  { Pause_Infusion!(true) & Lost_Confirmation! & pause_inf:=true }
--					not_late: check_po_rm_delay -[ (now - last_rm_ts <= IoMT_Properties::RM_Delay_Limit s) 
--							and (now - last_rm_ts <= IoMT_Properties::RM_Delay_Limit s)	]-> run
					
			**};
	end Supervise_PCA_Thread.echo;

end IoMTwin;