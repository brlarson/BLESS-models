package IoMT_Assertions
public

annex Assertion
{**
  ghost variables
    def PAUSE_INFUSION ~ boolean 
    def HEART_RATE ~ quantity bpm -- bpm beats per minute
    def MINIMUM_HEART_RATE ~ quantity bpm
    def SPO2 ~ quantity percent
    def PROGRAMMED_SPO2 ~ quantity percent
    def RESPIRATION_RATE ~ quantity brpm --brpm breaths per minute
    def MINIMUM_RESPIRATION_RATE ~ quantity brpm 
    def PATIENT_BOLUS_RATE ~ quantity mlph
    def SQUARE_BOLUS_RATE ~ quantity mlph
    def BASAL_RATE ~ quantity mlph
    def LAST_ACTION_A ~ last_action 
    def KVO_RATE_property ~ quantity mlph
    def PAUSE_INFUSION_ECHO ~ boolean  --echo returned from PCA pump
    def RM_ALARM_ECHO ~ boolean -- echo returned from Coordinator to Respiration Mnitor
    def PO_ALARM_ECHO ~ boolean -- echo returned from Coordinator to Pulse Oximeter
      
      -- kludge because ANTLR-generated lexer of AADL property strings won't handle "::" properly
    << GIVEN_KVO_RATE: :KVO_RATE_property = #IoMT_Properties::KVO_Rate mlph >> -- can we use def for consistancy
    
    <<PO_ALARM: : HEART_RATE < MINIMUM_HEART_RATE or SPO2 < PROGRAMMED_SPO2 >>
    <<RM_ALARM: : RESPIRATION_RATE < MINIMUM_RESPIRATION_RATE >>
    <<HALT : :(LAST_ACTION_A = last_action'SafetyStopPump) or 
      (LAST_ACTION_A = last_action'StopButton) or (LAST_ACTION_A = last_action'EndPriming)>>  --pump at 0 if stop button, or safety architecture says, or done priming
    <<PB_RATE: :LAST_ACTION_A = last_action'PatientButton >>  --patient button pressed, and allowed
    <<CCB_RATE: :(LAST_ACTION_A = last_action'StartSquareBolus) or 
      (LAST_ACTION_A = last_action'ResumeSquareBolus)>>  --clinician-commanded bolus start or resumption after patient bolus
    <<PRIME_RATE: :LAST_ACTION_A = last_action'StartPriming>>  --priming pump
    <<BASAL_RATE_A: :(LAST_ACTION_A = last_action'StartButton) or 
      (LAST_ACTION_A = last_action'ResumeBasal) or (LAST_ACTION_A = last_action'SquareBolusDone)>>  --regular infusion
    
   -- <<PCA_KVO_FAULT: : BASAL_OVERINFUSION or BOLUS_OVERINFUSION or SQUARE_OVERINFUSION or MAX_DOSE_WARNING or LOW_BATTERY>>
    <<KVO_RATE: : not HALT() and (PO_ALARM() or RM_ALARM()) >> 
  
    <<PUMP_RATE : returns quantity mlph := 
     [
     ( HALT() )-> 0.0 mlph,                                    --no flow
     ( KVO_RATE() )-> KVO_RATE_property,         --KVO rate
     ( PB_RATE() )-> PATIENT_BOLUS_RATE,       --maximum infusion upon patient request
     ( CCB_RATE() )-> SQUARE_BOLUS_RATE,                --square bolus rate=vtbi/duration, from data port
     ( PRIME_RATE() )-> #IoMT_Properties::Prime_Rate,     --pump priming
     ( BASAL_RATE_A() )-> BASAL_RATE                      --basal rate, from data port
     ]
     >>
   
   <<IS_SAFE: : ((HEART_RATE < MINIMUM_HEART_RATE
      or SPO2 < PROGRAMMED_SPO2 
      or RESPIRATION_RATE < MINIMUM_RESPIRATION_RATE)
      implies PUMP_RATE$() = KVO_RATE_property) or HALT() >>
**};
end IoMT_Assertions;