#This file, script.txt, was produced the BLESS Proof Assistant v3.2.0
#  at Thu Jun 15 16:43:26 CDT 2023 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/DDD/proof script/DDD.ps
#ddd_mode::DDD.i
#[serial 1003] <<I>> -> BLESS::Invariant of thread DDD
make-an
axioms
#[serial 1004] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
substitute-pre
axioms
#[serial 1005] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
substitute-pre
axioms
#[serial 1006] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
substitute-pre
normalize
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
and-over-or-post
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1013]  <<M(start)>> A <<M(va)>> for T0_GO: start-[ ]->va{A};
reduce
atomic
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1099]   normalization of [serial 108
make-an
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1126] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 112
make-an
guided-sub-equals[last_ap_or_as]
laws
normalize
axioms
#[serial 1127] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1124]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1134]   normalization of [serial 1128]
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1136]   normalization of [serial 1129]
guided-sub-equals[last_ap_or_as]
axioms
#[serial 1138]   normalization of [serial 1130]
guided-sub-equals[last_vp_or_vs]
axioms
#[serial 1113] Associativity: (b.c).a = a.b.c [serial 1102]
replace-port
axioms
#[serial 1114] Associativity: (b.c).a = a.b.c [serial 1106]
replace-port
axioms
#[serial 1014]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL: va-[x]->va{A};
reduce
atomic
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1181]   normalization of [serial 116
make-an
substitute-pre
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1183]   normalization of [serial 1169]
substitute-post
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1242]   normalization of [serial 123
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1244]   normalization of [serial 1240]
substitute-pre
normalize
laws
normalize
substitute-post
normalize
axioms
#[serial 1185]   normalization of [serial 1177]
split-post
substitute-pre
normalize
laws
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
#[serial 1187]   normalization of [serial 1178]
split-post
axioms
replace-port
normalize
substitute-pre
substitute-pre
laws
axioms
#[serial 1189]   normalization of [serial 1179]
split-post
axioms
replace-port
normalize
axioms
#[serial 1015]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL: sav-[x]->va{A};
reduce
atomic
normalize
laws
axioms
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1354]   normalization of [serial 1345
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1356]   normalization of [serial 1348]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1422] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1420
make-an
substitute-pre
normalize
extend-eqr
replace-qv
axioms
#[serial 1426]   normalization of [serial 1423]
substitute-post
normalize
axioms
#[serial 1377]   normalization of [serial 1372]
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1379]   normalization of [serial 1373]
split-post
axioms
replace-port
normalize
axioms
#[serial 1016]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
reduce
atomic
laws
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1468]   normalization of [serial 1457
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1470]   normalization of [serial 1460]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1527] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1525
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1531]   normalization of [serial 1528]
substitute-post
normalize
axioms
#[serial 1480] Associativity: (b.c).a = a.b.c [serial 1466]
remove-axioms-post
laws
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1481] Associativity: (b.c).a = a.b.c [serial 1472]
split-post
axioms
replace-port
normalize
axioms
#[serial 1017]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
normalize
laws
axioms
#[serial 1018]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T3_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
normalize
laws
axioms
#[serial 1019]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T4_VS_AFTER_AS_AFTER_VRP:sav_check_vrp-[x]->va{A};
reduce
atomic
laws
axioms
normalize
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1587]   normalization of [serial 1577
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1596] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1585]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1597] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1585]
substitute-post
normalize
split-post
laws
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1598] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1589]
replace-port
axioms
#[serial 1599] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1589]
laws
axioms
#[serial 1020]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T5a_EXPIRED_SENSED_AV_DELAY:sav-[x]->sav_check_url{};
normalize
laws
axioms
#[serial 1021]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP:sav_check_url-[x]->sav{};
normalize
substitute-both
normalize
laws
normalize
axioms
#[serial 1022]  <<M(sav_check_url) and x>> A <<M(va)>> for T5c_TRACKED_VP_AFTER_AS:sav_check_url-[x]->va{A};
reduce
atomic
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1707] Associativity: (b.c).a = a.b.c [serial 1693
make-an
substitute-post
normalize
split-post
axioms
substitute-post
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1710] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1695]
substitute-post
normalize
substitute-pre
normalize
laws
substitute-both
normalize
laws
normalize
axioms
#[serial 1711] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1695]
substitute-both
normalize
laws
substitute-post
substitute-pre
normalize
laws
normalize
axioms
#[serial 1713] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1706]
substitute-post
substitute-pre
normalize
laws
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
normalize
replace-qv
extend-eqr
axioms
#[serial 1714] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1706]
substitute-pre
normalize
laws
axioms
#[serial 1715] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1709]
dist^
replace-port
dist^
normalize
axioms
#[serial 1023]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T6_VS_AFTER_AP:pav-[x]->pav_check_vrp{};
normalize
laws
axioms
#[serial 1024]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T7_VS_AFTER_AP_IN_VRP:pav_check_vrp-[x]->pav{};
normalize
laws
axioms
#[serial 1025]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T8_VS_AFTER_AP_AFTER_VRP:pav_check_vrp-[x]->va{A};
normalize
laws
reduce
reduce
reduce
atomic
laws
axioms
normalize
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1811] as <<post>> -> <<Q>> in <<P>> { <<pre>> S <<post>> } <<Q>> [serial 1809
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1834] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1810]
substitute-pre
normalize
laws
axioms
#[serial 1835] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1810]
substitute-pre
normalize
laws
substitute-pre
normalize
laws
substitute-post
normalize
split-post
axioms
substitute-both
normalize
extend-eqr
laws
normalize
replace-qv
axioms
#[serial 1836] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1814]
substitute-both
normalize
laws
normalize
split-post
normalize
substitute-pre
normalize
laws
normalize
axioms
#[serial 1841] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1827]
substitute-post
guided-sub-equals[last_vp_or_vs]
normalize
split-post
quant
normalize
axioms
#[serial 1842] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1833]
replace-port
axioms
#[serial 1026]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T10_AS_AFTER_VS_OR_VP:va-[x]->check_atrial_refractories{};
normalize
axioms
#[serial 1027]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T11_PVARP_EXPIRED:check_atrial_refractories-[x]->sav{A};
reduce
atomic
remove-axioms-post
normalize
laws
normalize
axioms
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1981]   normalization of [serial 1973
make-an
substitute-post
normalize
split-post
substitute-pre
substitute-pre
normalize
laws
substitute-pre
normalize
laws
axioms
#[serial 1985] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1967]
substitute-post
normalize
split-post
axioms
substitute-both
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1986] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1967]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1987] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1967]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1988] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1967]
substitute-pre
normalize
laws
axioms
#[serial 1989] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1977]
substitute-post
normalize
split-post
axioms
substitute-post
normalize
axioms
#[serial 1990] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1977]
substitute-post
substitute-pre
normalize
quant
axioms
#[serial 1991] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1979]
replace-port
axioms
#[serial 1028]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T12_STILL_IN_PVARP:check_atrial_refractories-[x]->va{};
normalize
laws
axioms
#[serial 1029]  <<M(va) and x>> -> <<M(check_vrp)>> for T13_VS_AFTER_VS_OR_VP:va-[x]->check_vrp{};
normalize
axioms
#[serial 1030]  <<M(check_vrp) and x>> -> <<M(va)>> for T14_STILL_IN_VRP:check_vrp-[x]->va{};
normalize
laws
axioms
#[serial 1031]  <<M(check_vrp) and x>> A <<M(va)>> for T15_VRP_EXPIRED:check_vrp-[x]->va{A};
reduce
push
#ddd_mode::DDD.i
#[serial 2104] P -> P1 in concurrent composition for [serial 1031
make-an
substitute-pre
substitute-pre
normalize
laws
split-post
axioms
substitute-post
substitute-post
normalize
split-post
axioms
substitute-pre
normalize
extend-eqr
laws
replace-qv
axioms
#[serial 2105] Q1 and Q2 and  . . . and Qn -> Q in concurrent composition for [serial 1031]
substitute-both
normalize
laws
substitute-post
substitute-post
normalize
laws
normalize
split-post
axioms
split@
split-quant
normalize
quant
normalize
axioms
#[serial 2106] <<P1>> S1 <<Q1>> in concurrent composition for [serial 1031]
atomic
axioms
normalize
laws
replace-port
axioms
#[serial 2107] <<P>> S2 <<Q2>> in concurrent composition for [serial 1031]
atomic
laws
normalize
laws
normalize
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1032]  <<M(va) and x>> A <<M(pav)>> for T16_AP_AFTER_TIMEOUT_VS_OR_VP:va-[x]->pav{A};
reduce
reduce
reduce
atomic
laws
normalize
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 2207]   normalization of [serial 2194
make-an
substitute-post
normalize
split-post
axioms
split@
split-quant
normalize
DeMorgan
laws
normalize
split-post
axioms
substitute-pre
normalize
extend-eqr
split@
normalize
split-quant
laws
normalize
DeMorgan
normalize
laws
replace-qv
DeMorgan
normalize
axioms
#[serial 2229]   normalization of [serial 2220]
substitute-pre
normalize
laws
axioms
#[serial 2243] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2199]
substitute-post
substitute-post
normalize
laws
split-post
axioms
substitute-pre
normalize
laws
normalize
axioms
#[serial 2244] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2199]
substitute-post
normalize
quant
axioms
#[serial 2250] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2231]
replace-qv
axioms
#[serial 2251] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2233]
replace-port
axioms
#[serial 2254] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2233]
replace-qv
axioms
#[serial 2256] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2242]
substitute-post
normalize
substitute-pre
make-an
#ddd_mode::DDD.i
#[serial 2257] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2242]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 2258] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2242]
replace-qv
axioms
#[serial 1033] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cap:
axioms
#[serial 1034] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cvp:
axioms
#[serial 1035] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cvs:
axioms
#[serial 1036] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cas:
axioms
#Q.E.D.