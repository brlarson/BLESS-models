#  You chose proof script: /Users/brianlarson/git/BLESS-models/DDD/proof script/DDD.ps
#ddd_mode::DDD.i
#[serial 1003] <<I>> -> BLESS::Invariant of thread DDD.
make-an
axioms
#[serial 1004] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
substitute-pre
axioms
#[serial 1005] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
substitute-pre
axioms
#[serial 1006] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
substitute-pre
normalize
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
and-over-or-post
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1013]  <<M(start)>> A <<M(va)>> for T0_GO:start-[ ]->va{A};
reduce
atomic
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1100]   normalization of [serial 1086
make-an
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1136] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1134
make-an
guided-sub-equals[last_ap_or_as]
laws
normalize
axioms
#[serial 1137] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1134]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1144]   normalization of [serial 1138]
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1146]   normalization of [serial 1139]
guided-sub-equals[last_ap_or_as]
axioms
#[serial 1148]   normalization of [serial 1140]
guided-sub-equals[last_vp_or_vs]
axioms
#[serial 1121] Associativity: (b.c).a = a.b.c [serial 1104]
replace-port
axioms
#[serial 1123] Associativity: (b.c).a = a.b.c [serial 1110]
replace-port
axioms
#[serial 1014]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:va-[x]->va{A};
reduce
atomic
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1189]   normalization of [serial 1176
make-an
substitute-pre
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1191]   normalization of [serial 1179]
substitute-post
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1250]   normalization of [serial 1247
make-an
substitute-pre
normalize
extend-eqr
replace-qv
axioms
#[serial 1252]   normalization of [serial 1248]
substitute-pre
normalize
laws
normalize
substitute-post
normalize
axioms
#[serial 1193]   normalization of [serial 1185]
split-post
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1195]   normalization of [serial 1186]
split-post
laws
axioms
split@
laws
replace-port
split@
normalize
axioms
#[serial 1197]   normalization of [serial 1187]
laws
split-post
axioms
#[serial 1015]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:sav-[x]->va{A};
reduce
atomic
normalize
laws
axioms
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1334]   normalization of [serial 1325
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1336]   normalization of [serial 1328]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1403] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1401
make-an
substitute-pre
normalize
extend-eqr
replace-qv
axioms
#[serial 1407]   normalization of [serial 1404]
substitute-post
normalize
axioms
#[serial 1357]   normalization of [serial 1352]
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1359]   normalization of [serial 1353]
split-post
axioms
replace-port
normalize
axioms
#[serial 1016]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
reduce
atomic
laws
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1449]   normalization of [serial 1438
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1451]   normalization of [serial 1441]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1508] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1506
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1512]   normalization of [serial 1509]
substitute-post
normalize
axioms
#[serial 1461] Associativity: (b.c).a = a.b.c [serial 1447]
remove-axioms-post
laws
split-post
axioms
normalize
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1461] Associativity: (b.c).a = a.b.c [serial 1452]
normalize
split-post
axioms
replace-port
normalize
axioms
#[serial 1017]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
normalize
laws
axioms
#[serial 1018]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T3_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
normalize
laws
axioms
#[serial 1019]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T4_VS_AFTER_AS_AFTER_VRP:sav_check_vrp-[x]->va{A};
reduce
atomic
laws
axioms
normalize
axioms
laws
normalize
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1587]   normalization of [serial 1583
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1595] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1582]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1596] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1582]
substitute-post
normalize
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1597] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1589]
replace-port
axioms
#[serial 1020]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T5a_EXPIRED_SENSED_AV_DELAY:sav-[x]->sav_check_url{};
normalize
laws
normalize
axioms
#[serial 1021]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP:sav_check_url-[x]->sav{};
normalize
substitute-both
normalize
laws
normalize
axioms
#[serial 1022]  <<M(sav_check_url) and x>> A <<M(va)>> for T5c_TRACKED_VP_AFTER_AS:sav_check_url-[x]->va{A};
reduce
atomic
laws
normalize
axioms
remove-axioms-post
laws
normalize
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1708]   normalization of [serial 1701
make-an
substitute-post
normalize
split-post
axioms
substitute-post
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1714] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1689]
substitute-post
normalize
substitute-pre
normalize
laws
axioms
#[serial 1715] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1689]
substitute-both
substitute-post
normalize
laws
normalize
substitute-both
axioms
#[serial 1717] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1706]
substitute-post
normalize
split-post
axioms
substitute-both
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1718] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1706]
substitute-pre
normalize
laws
axioms
#[serial 1719] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1710]
replace-port
normalize
axioms
#[serial 1023]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T6_VS_AFTER_AP:pav-[x]->pav_check_vrp{};
normalize
laws
axioms
#[serial 1024]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T7_VS_AFTER_AP_IN_VRP:pav_check_vrp-[x]->pav{};
normalize
laws
axioms
#[serial 1025]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T8_VS_AFTER_AP_AFTER_VRP:pav_check_vrp-[x]->va{A};
reduce
reduce
reduce
atomic
laws
axioms
normalize
axioms
laws
normalize
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1810]   normalization of [serial 1796
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1839] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1812]
substitute-pre
normalize
laws
axioms
#[serial 1841] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1825]
substitute-pre
normalize
laws
axioms
#[serial 1842] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1825]
substitute-pre
normalize
laws
substitute-post
normalize
split-post
axioms
substitute-both
normalize
extend-eqr
substitute-pre
laws
normalize
replace-qv
laws
axioms
#[serial 1846] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1832]
substitute-both
normalize
laws
normalize
split-post
guided-sub-equals[last_vp_or_vs]
normalize
axioms
laws
normalize
axioms
#[serial 1847] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1838]
replace-port
axioms
#[serial 1026]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T10_AS_AFTER_VS_OR_VP:va-[x]->check_atrial_refractories{};
normalize
axioms
#[serial 1027]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T11_PVARP_EXPIRED:check_atrial_refractories-[x]->sav{A};
reduce
atomic
remove-axioms-post
laws
normalize
axioms
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1952] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1938
make-an
substitute-pre
laws
substitute-post
normalize
split-post
substitute-post
normalize
axioms
laws
normalize
extend-eqr
substitute-pre
substitute-pre
normalize
laws
normalize
replace-qv
axioms
#[serial 1953] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1938]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1954] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1938]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1955] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1938]
substitute-pre
normalize
laws
axioms
#[serial 1956] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1940]
substitute-post
normalize
split-post
laws
axioms
substitute-post
normalize
split-post
axioms
#[serial 1957] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1940]
substitute-post
substitute-pre
normalize
laws
normalize
quant
axioms
#[serial 1958] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1944]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1960] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1946]
replace-port
axioms
#[serial 1961] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1946]
laws
axioms
#[serial 1962] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1946]
laws
axioms
#[serial 1028]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T12_STILL_IN_PVARP:check_atrial_refractories-[x]->va{};
normalize
laws
axioms
#[serial 1029]  <<M(va) and x>> -> <<M(check_vrp)>> for T13_VS_AFTER_VS_OR_VP:va-[x]->check_vrp{};
normalize
axioms
#[serial 1030]  <<M(check_vrp) and x>> -> <<M(va)>> for T14_STILL_IN_VRP:check_vrp-[x]->va{};
normalize
laws
axioms
#[serial 1031]  <<M(check_vrp) and x>> A <<M(va)>> for T15_VRP_EXPIRED:check_vrp-[x]->va{A};
reduce
atomic
laws
normalize
axioms
laws
normalize
split-post
push
#ddd_mode::DDD.i
#[serial 2110]   normalization of [serial 2103
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 2114]   normalization of [serial 2106]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 2119] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2108]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 2120] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2108]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 2121] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2108]
substitute-post
normalize
split-post
axioms
substitute-both
normalize
extend-eqr
substitute-pre
substitute-pre
normalize
laws
normalize
replace-qv
axioms
#[serial 2122] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2112]
replace-port
axioms
#[serial 2123] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2112]
axioms
#[serial 1032]  <<M(va) and x>> A <<M(pav)>> for T16_AP_AFTER_TIMEOUT_VS_OR_VP:va-[x]->pav{A};
reduce
reduce
reduce
atomic
laws
normalize
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 2210]   normalization of [serial 2197
make-an
substitute-both
normalize
split-post
axioms
split@
normalize
split-quant
DeMorgan
normalize
laws
normalize
split-post
axioms
replace-qv
extend-eqr
axioms
#[serial 2232]   normalization of [serial 2223]
substitute-pre
normalize
laws
axioms
#[serial 2246] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2202]
substitute-post
normalize
split-post
axioms
substitute-post
normalize
axioms
#[serial 2247] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2202]
substitute-both
normalize
quant
axioms
#[serial 2253] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2234]
replace-qv
axioms
#[serial 2254] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2236]
replace-port
axioms
#[serial 2257] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2236]
replace-qv
axioms
#[serial 2259] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2245]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 2260] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2245]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 2261] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2245]
replace-qv
axioms
#[serial 1033]  <<M(sav) and x>> -> <<M(off)>> for T17_STOP:sav-[x]->off{};
axioms
#[serial 1034]  <<M(pav) and x>> -> <<M(off)>> for T17_STOP:pav-[x]->off{};
axioms
#[serial 1035]  <<M(va) and x>> -> <<M(off)>> for T17_STOP:va-[x]->off{};
axioms
#Q.E.D.