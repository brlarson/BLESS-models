#This file, script.txt, was produced the BLESS Proof Assistant v3.2.0
#  at Tue Jul 25 15:20:58 CDT 2023 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/DDD/proof script/DDD.ps
#ddd_mode::DDD.i
#[serial 1003] <<I>> -> BLESS::Invariant of thread DDD
make-an
axioms
#[serial 1004] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
substitute-pre
axioms
#[serial 1005] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
substitute-pre
axioms
#[serial 1006] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
substitute-pre
normalize
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
and-over-or-post
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1013]  <<M(start)>> A <<M(va)>> for T0_GO: start-[ ]->va{A};
reduce
atomic
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1099]   normalization of [serial 108
make-an
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1125] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 112
make-an
guided-sub-equals[last_ap_or_as]
laws
normalize
axioms
#[serial 1126] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1120]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1128]   normalization of [serial 1122]
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1130]   normalization of [serial 1123]
guided-sub-equals[last_ap_or_as]
axioms
#[serial 1132]   normalization of [serial 1124]
guided-sub-equals[last_vp_or_vs]
axioms
#[serial 1107] Associativity: (b.c).a = a.b.c [serial 1092]
replace-port
axioms
#[serial 1109] Associativity: (b.c).a = a.b.c [serial 1095]
replace-port
axioms
#[serial 1014]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL: va-[x]->va{A};
reduce
atomic
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1177]   normalization of [serial 116
make-an
substitute-pre
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1179]   normalization of [serial 1165]
substitute-post
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1238]   normalization of [serial 123
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1240]   normalization of [serial 1236]
substitute-pre
normalize
laws
normalize
substitute-post
normalize
axioms
#[serial 1181]   normalization of [serial 1173]
split-post
substitute-pre
normalize
laws
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
#[serial 1183]   normalization of [serial 1174]
split-post
axioms
replace-port
normalize
substitute-pre
substitute-pre
laws
axioms
#[serial 1185]   normalization of [serial 1175]
split-post
axioms
replace-port
normalize
axioms
#[serial 1015]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL: sav-[x]->va{A};
reduce
atomic
normalize
laws
axioms
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1331]   normalization of [serial 132
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1333]   normalization of [serial 1325]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1400] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 139
make-an
substitute-pre
normalize
extend-eqr
replace-qv
axioms
#[serial 1402]   normalization of [serial 1399]
substitute-post
normalize
axioms
#[serial 1354]   normalization of [serial 1349]
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1356]   normalization of [serial 1350]
split-post
axioms
replace-port
normalize
axioms
#[serial 1016]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL: pav-[x]->va{A};
reduce
atomic
laws
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1445]   normalization of [serial 143
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1447]   normalization of [serial 1437]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1505] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 150
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1507]   normalization of [serial 1504]
substitute-post
normalize
axioms
#[serial 1449]   normalization of [serial 1440]
remove-axioms-post
laws
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1451]   normalization of [serial 1441]
split-post
axioms
replace-port
normalize
axioms
#[serial 1017]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS: sav-[x]->sav_check_vrp{};
normalize
laws
axioms
#[serial 1018]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T3_VS_AFTER_AS_IN_VRP: sav_check_vrp-[x]->sav{};
normalize
axioms
#[serial 1019]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T4_VS_AFTER_AS_AFTER_VRP: sav_check_vrp-[x]->va{A};
reduce
atomic
laws
axioms
normalize
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1564]   normalization of [serial 155
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1570] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1562]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1571] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1562]
substitute-post
normalize
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1572] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1566]
replace-port
axioms
#[serial 1020]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T5a_EXPIRED_SENSED_AV_DELAY: sav-[x]->sav_check_url{};
laws
axioms
#[serial 1021]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP: sav_check_url-[x]->sav{};
normalize
axioms
#[serial 1022]  <<M(sav_check_url) and x>> A <<M(va)>> for T5c_TRACKED_VP_AFTER_AS: sav_check_url-[x]->va{A};
reduce
atomic
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1651]   normalization of [serial 164
make-an
substitute-post
normalize
split-post
axioms
substitute-post
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1666] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1649]
substitute-post
normalize
substitute-pre
normalize
laws
substitute-both
normalize
laws
normalize
substitute-pre
laws
normalize
split-post
axioms
extend-eqr
replace-qv
axioms
#[serial 1667] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1649]
substitute-both
normalize
laws
substitute-post
substitute-pre
normalize
laws
normalize
substitute-pre
laws
normalize
axioms
#[serial 1668] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1653]
substitute-post
substitute-pre
normalize
laws
axioms
#[serial 1669] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1653]
substitute-post
normalize
axioms
#[serial 1670] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1664]
dist^
laws
normalize
replace-port
dist^
normalize
axioms
#[serial 1023]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T6_VS_AFTER_AP: pav-[x]->pav_check_vrp{};
normalize
laws
axioms
#[serial 1024]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T7_VS_AFTER_AP_IN_VRP: pav_check_vrp-[x]->pav{};
normalize
axioms
#[serial 1025]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T8_VS_AFTER_AP_AFTER_VRP: pav_check_vrp-[x]->va{A};
normalize
reduce
reduce
reduce
atomic
laws
axioms
normalize
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1767] as <<post>> -> <<Q>> in <<P>> { <<pre>> S <<post>> } <<Q>> [serial 176
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1790] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1766]
substitute-pre
normalize
laws
axioms
#[serial 1791] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1766]
substitute-pre
normalize
laws
substitute-pre
normalize
laws
substitute-post
normalize
split-post
axioms
substitute-both
normalize
extend-eqr
laws
normalize
replace-qv
axioms
#[serial 1792] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1770]
substitute-both
normalize
laws
normalize
split-post
normalize
substitute-pre
normalize
laws
normalize
axioms
#[serial 1797] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1783]
substitute-post
guided-sub-equals[last_vp_or_vs]
normalize
split-post
quant
normalize
axioms
#[serial 1798] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1789]
replace-port
axioms
#[serial 1026]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T10_AS_AFTER_VS_OR_VP: va-[x]->check_atrial_refractories{};
normalize
axioms
#[serial 1027]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T11_PVARP_EXPIRED: check_atrial_refractories-[x]->sav{A};
reduce
atomic
remove-axioms-post
normalize
laws
normalize
axioms
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1935]   normalization of [serial 192
make-an
substitute-post
normalize
split-post
substitute-pre
substitute-pre
normalize
laws
substitute-pre
normalize
laws
axioms
#[serial 1938] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1911]
substitute-post
normalize
split-post
axioms
substitute-both
normalize
laws
normalize
replace-qv
substitute-post
normalize
laws
normalize
split-post
axioms
replace-qv
axioms
#[serial 1939] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1911]
substitute-pre
normalize
laws
substitute-post
normalize
quant
axioms
#[serial 1940] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1923]
substitute-post
normalize
split-post
axioms
substitute-both
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1941] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1923]
substitute-pre
substitute-pre
laws
axioms
#[serial 1942] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1923]
substitute-pre
substitute-pre
laws
axioms
#[serial 1943] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1923]
substitute-pre
laws
axioms
#[serial 1944] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1933]
replace-port
axioms
#[serial 1028]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T12_STILL_IN_PVARP: check_atrial_refractories-[x]->va{};
axioms
#[serial 1029]  <<M(va) and x>> -> <<M(check_vrp)>> for T13_VS_AFTER_VS_OR_VP: va-[x]->check_vrp{};
normalize
axioms
#[serial 1030]  <<M(check_vrp) and x>> -> <<M(va)>> for T14_STILL_IN_VRP: check_vrp-[x]->va{};
axioms
#[serial 1031]  <<M(check_vrp) and x>> A <<M(va)>> for T15_VRP_EXPIRED: check_vrp-[x]->va{A};
reduce
push
#ddd_mode::DDD.i
#[serial 2063] P -> P1 in concurrent composition for [serial 103
make-an
substitute-pre
substitute-pre
normalize
laws
split-post
axioms
substitute-post
substitute-post
normalize
split-post
axioms
substitute-pre
normalize
extend-eqr
laws
replace-qv
axioms
#[serial 2064] Q1 and Q2 and  . . . and Qn -> Q in concurrent composition for [serial 1031]
substitute-both
normalize
laws
substitute-post
substitute-post
normalize
laws
normalize
split-post
axioms
split@
split-quant
normalize
quant
normalize
axioms
#[serial 2065] <<P1>> S1 <<Q1>> in concurrent composition for [serial 1031]
atomic
axioms
normalize
laws
replace-port
axioms
#[serial 2066] <<P>> S2 <<Q2>> in concurrent composition for [serial 1031]
atomic
laws
normalize
laws
normalize
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1032]  <<M(va) and x>> A <<M(pav)>> for T16_AP_AFTER_TIMEOUT_VS_OR_VP: va-[x]->pav{A};
reduce
reduce
reduce
atomic
laws
normalize
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 2163]   normalization of [serial 215
make-an
substitute-post
normalize
split-post
axioms
split@
split-quant
DeMorgan
laws
normalize
split-post
axioms
substitute-pre
normalize
extend-eqr
split@
normalize
split-quant
laws
normalize
DeMorgan
normalize
laws
replace-qv
DeMorgan
normalize
axioms
#[serial 2167]   normalization of [serial 2155]
substitute-pre
normalize
laws
axioms
#[serial 2191] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2159]
substitute-post
substitute-post
normalize
laws
split-post
axioms
substitute-pre
normalize
laws
normalize
axioms
#[serial 2192] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2159]
substitute-post
normalize
quant
axioms
#[serial 2198] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2161]
replace-qv
axioms
#[serial 2199] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2169]
replace-port
axioms
#[serial 2202] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2169]
replace-qv
axioms
#[serial 2204] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2190]
substitute-post
normalize
substitute-pre
#ddd_mode::DDD.i
#[serial 2205] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 219
make-an
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 2206] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2190]
replace-qv
axioms
#[serial 1033] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cap:
axioms
#[serial 1034] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cvp:
axioms
#[serial 1035] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cvs:
axioms
#[serial 1036] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cas:
axioms
#Q.E.D.