#This file, script.txt, was produced the BLESS Proof Assistant v3.1.5
#  at Tue Feb 21 18:23:06 CST 2023 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/DDD/proof script/DDD.ps
#ddd_mode::DDD.i
#[serial 1003] <<I>> -> BLESS::Invariant of thread DDD.
make-an
substitute-pre
normalize
axioms
#[serial 1004] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
normalize
axioms
#[serial 1005] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
normalize
axioms
#[serial 1006] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
cnf
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1013]  <<M(start)>> A <<M(va)>> for T0_GO:start-[ ]->va{A};
reduce
axioms
normalize
push
#ddd_mode::DDD.i
#[serial 1088]   normalization of [serial 1082
make-an
substitute-post
substitute-post
normalize
laws
substitute-post
normalize
laws
normalize
split-post
split@
normalize
push
#ddd_mode::DDD.i
#[serial 1127]   normalization of [serial 1121
make-an
guided-sub-equals[last_ap_or_as]
axioms
#[serial 1129]   normalization of [serial 1122]
guided-sub-equals[last_vp_or_vs]
axioms
#[serial 1131]   normalization of [serial 1123]
guided-sub-equals[last_ap_or_as]
laws
normalize
axioms
#[serial 1133]   normalization of [serial 1124]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1135]   normalization of [serial 1125]
split-quant
quant
normalize
axioms
#[serial 1090]   normalization of [serial 1083]
atomic
replace-port
axioms
#[serial 1092]   normalization of [serial 1084]
atomic
laws
axioms
#[serial 1094]   normalization of [serial 1085]
atomic
replace-port
axioms
#[serial 1096]   normalization of [serial 1086]
atomic
laws
axioms
#[serial 1014]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:va-[x]->va{A};
reduce
normalize
laws
normalize
push
make-an
#[serial 1175]   normalization of [serial 1169]
substitute-post
substitute-post
normalize
laws
split-post
axioms
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
split@
normalize
axioms
split-quant
quant
normalize
axioms
#[serial 1177]   normalization of [serial 1170]
atomic
laws
normalize
split-post
axioms
push
make-an
#[serial 1237] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1232]
substitute-post
substitute-pre
normalize
laws
normalize
DeMorgan
normalize
replace-qv
contract-uqr
axioms
#[serial 1238] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1232]
substitute-post
substitute-post
normalize
axioms
#[serial 1239] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1234]
split@
laws
replace-port
split@
normalize
axioms
#[serial 1179]   normalization of [serial 1171]
atomic
laws
axioms
#[serial 1189]   normalization of [serial 1184]
remove-axioms-post
laws
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1015]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:sav-[x]->va{A};
reduce
normalize
laws
normalize
push
make-an
#[serial 1298]   normalization of [serial 1292]
substitute-post
substitute-post
normalize
laws
split-post
axioms
split@
split-quant
normalize
quant
normalize
axioms
substitute-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
split@
normalize
axioms
#[serial 1300]   normalization of [serial 1293]
atomic
split-post
normalize
laws
normalize
axioms
push
make-an
#[serial 1355] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1353]
substitute-post
substitute-post
normalize
axioms
#[serial 1356] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1353]
substitute-post
normalize
DeMorgan
normalize
substitute-pre
normalize
laws
normalize
contract-uqr
replace-qv
axioms
#[serial 1387]   normalization of [serial 1379]
replace-port
normalize
axioms
#[serial 1302]   normalization of [serial 1294]
atomic
laws
axioms
#[serial 1312]   normalization of [serial 1307]
remove-axioms-post
laws
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1016]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
reduce
normalize
laws
normalize
push
make-an
#[serial 1456]   normalization of [serial 1450]
substitute-post
substitute-post
normalize
laws
split-post
axioms
split@
split-quant
normalize
quant
normalize
axioms
substitute-post
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
split@
normalize
axioms
#[serial 1458]   normalization of [serial 1451]
atomic
laws
normalize
split-post
axioms
substitute-post
normalize
push
make-an
#ddd_mode::DDD.i
#[serial 1518] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1513]
replace-port
normalize
axioms
#[serial 1527]   normalization of [serial 1523]
substitute-pre
normalize
laws
normalize
DeMorgan
normalize
contract-uqr
replace-qv
axioms
#[serial 1529]   normalization of [serial 1524]
substitute-post
normalize
axioms
#[serial 1460]   normalization of [serial 1452]
atomic
laws
axioms
#[serial 1470]   normalization of [serial 1465]
remove-axioms-post
laws
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1017]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
normalize
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1588] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1586
make-an
remove-axioms-post
axioms
#[serial 1018]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T3_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
normalize
laws
substitute-both
normalize
laws
normalize
split-post
axioms
normalize
