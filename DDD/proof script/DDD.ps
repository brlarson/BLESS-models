#This file, script.txt, was produced the BLESS Proof Assistant v3.1.5
#  at Sat Apr 08 04:31:18 CDT 2023 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/DDD/proof script/DDD.ps
#ddd_mode::DDD.i
#[serial 1003] <<I>> -> BLESS::Invariant of thread DDD.
make-an
axioms
#[serial 1004] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
substitute-pre
axioms
#[serial 1005] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
substitute-pre
axioms
#[serial 1006] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
substitute-pre
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
and-over-or-post
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
laws
axioms
#[serial 1013]  <<M(start)>> A <<M(va)>> for T0_GOstart-[ ]->va{A};
reduce
atomic
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1097]   normalization of [serial 1084
make-an
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1124] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1122
make-an
guided-sub-equals[last_ap_or_as]
laws
normalize
axioms
#[serial 1125] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1122]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1132]   normalization of [serial 1126]
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1134]   normalization of [serial 1127]
guided-sub-equals[last_ap_or_as]
axioms
#[serial 1136]   normalization of [serial 1128]
guided-sub-equals[last_vp_or_vs]
axioms
#[serial 1111] Associativity: (b.c).a = a.b.c [serial 1100]
replace-port
axioms
#[serial 1112] Associativity: (b.c).a = a.b.c [serial 1104]
replace-port
axioms
#[serial 1014]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRLva-[x]->va{A};
reduce
atomic
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1179]   normalization of [serial 1164
make-an
substitute-pre
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1181]   normalization of [serial 1167]
substitute-post
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1240]   normalization of [serial 1237
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1242]   normalization of [serial 1238]
substitute-pre
normalize
laws
normalize
substitute-post
normalize
axioms
#[serial 1183]   normalization of [serial 1175]
split-post
substitute-pre
normalize
laws
normalize
axioms
substitute-post
normalize
axioms
#[serial 1185]   normalization of [serial 1176]
split-post
axioms
substitute-post
normalize
substitute-pre
laws
normalize
substitute-pre
substitute-pre
laws
normalize
axioms
#[serial 1187]   normalization of [serial 1177]
split@
normalize
laws
split-post
axioms
replace-port
split@
normalize
axioms
#[serial 1015]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRLsav-[x]->va{A};
reduce
atomic
normalize
laws
axioms
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1341]   normalization of [serial 1332
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1343]   normalization of [serial 1335]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1409] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1407
make-an
substitute-pre
normalize
extend-eqr
replace-qv
axioms
#[serial 1413]   normalization of [serial 1410]
substitute-post
normalize
axioms
#[serial 1364]   normalization of [serial 1359]
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1366]   normalization of [serial 1360]
split-post
axioms
replace-port
normalize
axioms
#[serial 1016]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRLpav-[x]->va{A};
reduce
atomic
laws
normalize
laws
axioms
push
#ddd_mode::DDD.i
#[serial 1455]   normalization of [serial 1444
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1457]   normalization of [serial 1447]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1514] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1512
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1518]   normalization of [serial 1515]
substitute-post
normalize
axioms
#[serial 1459]   normalization of [serial 1450]
remove-axioms-post
laws
split-post
axioms
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1461]   normalization of [serial 1451]
split-post
axioms
replace-port
normalize
axioms
#[serial 1017]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_ASsav-[x]->sav_check_vrp{};
normalize
laws
axioms
#[serial 1018]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T3_VS_AFTER_AS_IN_VRPsav_check_vrp-[x]->sav{};
normalize
axioms
#[serial 1019]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T4_VS_AFTER_AS_AFTER_VRPsav_check_vrp-[x]->va{A};
reduce
atomic
laws
axioms
normalize
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1574]   normalization of [serial 1563
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
#[serial 1580] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1572]
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1581] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1572]
substitute-post
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1582] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1576]
replace-port
axioms
#[serial 1020]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T5a_EXPIRED_SENSED_AV_DELAYsav-[x]->sav_check_url{};
normalize
laws
normalize
axioms
#[serial 1021]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VPsav_check_url-[x]->sav{};
normalize
substitute-both
normalize
laws
normalize
axioms
#[serial 1022]  <<M(sav_check_url) and x>> A <<M(va)>> for T5c_TRACKED_VP_AFTER_ASsav_check_url-[x]->va{A};
reduce
atomic
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1672]   normalization of [serial 1661
make-an
substitute-post
split-post
axioms
substitute-post
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1687] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1670]
substitute-post
normalize
substitute-pre
normalize
laws
substitute-both
normalize
laws
normalize
substitute-both
normalize
split-post
axioms
laws
extend-eqr
replace-qv
axioms
#[serial 1688] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1670]
substitute-pre
substitute-pre
substitute-post
laws
axioms
#[serial 1689] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1674]
substitute-both
laws
axioms
#[serial 1690] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1674]
substitute-post
axioms
#[serial 1691] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1685]
replace-port
normalize
axioms
#[serial 1023]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T6_VS_AFTER_APpav-[x]->pav_check_vrp{};
normalize
laws
axioms
#[serial 1024]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T7_VS_AFTER_AP_IN_VRPpav_check_vrp-[x]->pav{};
axioms
#[serial 1025]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T8_VS_AFTER_AP_AFTER_VRPpav_check_vrp-[x]->va{A};
reduce
reduce
reduce
atomic
laws
axioms
normalize
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1767]   normalization of [serial 1752
make-an
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1781] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1765]
substitute-pre
laws
axioms
#[serial 1782] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1765]
substitute-pre
laws
substitute-pre
normalize
laws
substitute-post
normalize
split-post
axioms
substitute-both
normalize
extend-eqr
laws
normalize
replace-qv
axioms
#[serial 1783] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1769]
substitute-both
normalize
laws
normalize
split-post
normalize
substitute-pre
laws
normalize
axioms
#[serial 1788] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1771]
substitute-post
guided-sub-equals[last_vp_or_vs]
split-post
quant
normalize
axioms
#[serial 1789] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1780]
replace-port
axioms
#[serial 1026]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T10_AS_AFTER_VS_OR_VPva-[x]->check_atrial_refractories{};
axioms
#[serial 1027]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T11_PVARP_EXPIREDcheck_atrial_refractories-[x]->sav{A};
reduce
atomic
remove-axioms-post
laws
normalize
axioms
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 1901] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1887
make-an
substitute-post
split-post
axioms
substitute-post
axioms
#[serial 1902] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1887]
substitute-post
quant
axioms
#[serial 1903] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1891]
substitute-post
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1904] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1891]
substitute-pre
substitute-pre
laws
axioms
#[serial 1905] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1891]
substitute-pre
substitute-pre
laws
axioms
#[serial 1906] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1891]
substitute-pre
laws
axioms
#[serial 1907] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1893]
substitute-pre
substitute-pre
laws
axioms
#[serial 1909] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1895]
replace-port
axioms
#[serial 1028]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T12_STILL_IN_PVARPcheck_atrial_refractories-[x]->va{};
axioms
#[serial 1029]  <<M(va) and x>> -> <<M(check_vrp)>> for T13_VS_AFTER_VS_OR_VPva-[x]->check_vrp{};
normalize
axioms
#[serial 1030]  <<M(check_vrp) and x>> -> <<M(va)>> for T14_STILL_IN_VRPcheck_vrp-[x]->va{};
axioms
#[serial 1031]  <<M(check_vrp) and x>> A <<M(va)>> for T15_VRP_EXPIREDcheck_vrp-[x]->va{A};
reduce
push
#ddd_mode::DDD.i
#[serial 1968] P -> P1 in concurrent composition for [serial 1031
make-an
substitute-pre
substitute-pre
laws
split-post
axioms
substitute-post
substitute-post
split-post
axioms
substitute-pre
normalize
extend-eqr
laws
replace-qv
axioms
#[serial 1969] Q1 and Q2 and  . . . and Qn -> Q in concurrent composition for [serial 1031]
substitute-both
normalize
laws
substitute-post
substitute-post
normalize
laws
normalize
split-post
axioms
split@
split-quant
normalize
quant
axioms
#[serial 1970] <<P1>> S1 <<Q1>> in concurrent composition for [serial 1031]
atomic
axioms
laws
replace-port
axioms
#[serial 1971] <<P>> S2 <<Q2>> in concurrent composition for [serial 1031]
atomic
laws
normalize
laws
normalize
substitute-pre
substitute-pre
laws
axioms
#[serial 1032]  <<M(va) and x>> A <<M(pav)>> for T16_AP_AFTER_TIMEOUT_VS_OR_VPva-[x]->pav{A};
reduce
reduce
reduce
atomic
laws
normalize
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
#ddd_mode::DDD.i
#[serial 2053]   normalization of [serial 2041
make-an
substitute-post
split-post
axioms
split@
split-quant
normalize
DeMorgan
laws
normalize
split-post
axioms
#ddd_mode::DDD.i
#[serial 2057]   normalization of [serial 2045
make-an
push
#ddd_mode::DDD.i
#[serial 2110] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2108
make-an
substitute-pre
laws
normalize
split@
split-quant
DeMorgan
laws
normalize
DeMorgan
normalize
contract-uqr
replace-qv
axioms
#[serial 2111] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2108]
substitute-pre
laws
DeMorgan
split@
normalize
DeMorgan
normalize
split-quant
laws
contract-uqr
replace-qv
axioms
#[serial 2057]   normalization of [serial 2045]
substitute-pre
laws
axioms
#[serial 2081] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2049]
substitute-post
split-post
axioms
substitute-post
axioms
#[serial 2082] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2049]
substitute-post
quant
axioms
#[serial 2088] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2051]
replace-qv
axioms
#[serial 2089] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2059]
replace-port
axioms
#[serial 2092] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2059]
replace-qv
axioms
#[serial 2094] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2080]
substitute-pre
substitute-pre
laws
axioms
#[serial 2095] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2080]
substitute-pre
substitute-pre
laws
axioms
#[serial 2096] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2080]
replace-qv
axioms
#[serial 1033] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cap:
axioms
#[serial 1034] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cvp:
axioms
#[serial 1035] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cvs:
axioms
#[serial 1036] Composition of Subcomponents via Directional Connection PG::DDDprocess.imp.cas:
axioms
#Q.E.D.