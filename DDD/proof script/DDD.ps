#ddd.ps
#This file, script.txt, was produced the BLESS Proof Assistant v3.1
#  at Sun Feb 28 11:32:58 CST 2021 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/DDD/proof script/DDD.ps
#[serial 1003] <<I>> -> BLESS::Invariant of thread DDD.
make-an
axioms
#[serial 1004] <<M(pav)>> -> <<I>> from invariant I when complete state pav has Assertion <<M(pav)>> in its definition.
substitute-pre
axioms
#[serial 1005] <<M(sav)>> -> <<I>> from invariant I when complete state sav has Assertion <<M(sav)>> in its definition.
substitute-pre
axioms
#[serial 1006] <<M(va)>> -> <<I>> from invariant I when complete state va has Assertion <<M(va)>> in its definition.
substitute-pre
normalize
axioms
#[serial 1007] Serban's Theorem:  disjunction of execute conditions leaving execution state pav_check_vrp, <<M(pav_check_vrp)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
laws
axioms
#[serial 1008] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1009] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_vrp, <<M(sav_check_vrp)>> -> <<e1 or e2 or . . . en>>
replace<=
laws
axioms
#[serial 1010] Serban's Theorem:  disjunction of execute conditions leaving execution state check_atrial_refractories, <<M(check_atrial_refractories)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
and-over-or-post
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state check_vrp, <<M(check_vrp)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state sav_check_url, <<M(sav_check_url)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
laws
axioms
#[serial 1013]  <<M(start)>> A <<M(va)>> for T0_GO:start-[ ]->va{A};
reduce
atomic
normalize
laws
axioms
push
#[serial 1084]   normalization of [serial 1071
make-an
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
push
#[serial 1111] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1109
make-an
guided-sub-equals[last_ap_or_as]
laws
normalize
axioms
#[serial 1112] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1109]
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1119]   normalization of [serial 1113]
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1121]   normalization of [serial 1114]
equivalent
axioms
#[serial 1123]   normalization of [serial 1115]
equivalent
axioms
#[serial 1098] Associativity: (b.c).a = a.b.c [serial 1087]
replace-port
axioms
#[serial 1099] Associativity: (b.c).a = a.b.c [serial 1091]
replace-port
axioms
#[serial 1014]  <<M(va) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:va-[x]->va{A};
reduce
atomic
remove-axioms-post
laws
normalize
push
#[serial 1151] Q1 -> Q in sequential composition for [serial 1014
make-an
substitute-pre
substitute-post
substitute-post
substitute-post
normalize
laws
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1162] Law of And-Simplification:  P and P is P [serial 1159]
substitute-post
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1220] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1219
make-an
substitute-pre
normalize
axioms
#[serial 1224]   normalization of [serial 1221]
substitute-pre
normalize
laws
normalize
split-post
normalize
axioms
#[serial 1167]   normalization of [serial 1154]
substitute-post
normalize
split-post
substitute-post
normalize
axioms
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1170]   normalization of [serial 1163]
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1172]   normalization of [serial 1164]
now
split-post
axioms
replace-port
normalize
axioms
#[serial 1015]  <<M(sav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:sav-[x]->va{A};
reduce
atomic
normalize
laws
axioms
remove-axioms-post
laws
normalize
push
#ddd_mode::DDD.i
#[serial 1290] Q1 -> Q in sequential composition for [serial 1015
make-an
substitute-post
substitute-post
laws
normalize
split-post
normalize
axioms
split@
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1299]   normalization of [serial 1293]
substitute-post
normalize
split-post
normalize
push
#ddd_mode::DDD.i
#[serial 1361] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1359
make-an
substitute-pre
normalize
extend-eqr
replace-qv
axioms
#[serial 1365]   normalization of [serial 1362]
substitute-post
normalize
axioms
#[serial 1316]   normalization of [serial 1311]
split-post
axioms
substitute-pre
substitute-pre
laws
axioms
#[serial 1318]   normalization of [serial 1312]
split-post
axioms
replace-port
normalize
axioms
#[serial 1016]  <<M(pav) and x>> A <<M(va)>> for T1_PACE_AFTER_LRL:pav-[x]->va{A};
reduce
atomic
laws
normalize
axioms
push
#ddd_mode::DDD.i
#[serial 1393] Q1 -> Q in sequential composition for [serial 1016
make-an
substitute-post
substitute-post
normalize
laws
split-post
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
substitute-post
normalize
split-post
normalize
axioms
guided-sub-equals[last_vp_or_vs]
laws
normalize
axioms
#[serial 1405]   normalization of [serial 1396]
substitute-post
normalize
split-post
normalize
push
#[serial 1458] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1456
make-an
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1462]   normalization of [serial 1459]
substitute-post
normalize
axioms
#[serial 1407]   normalization of [serial 1399]
remove-axioms-post
laws
split-post
axioms
substitute-pre
substitute-pre
laws
axioms
#[serial 1409]   normalization of [serial 1400]
remove-axioms-post
laws
split-post
axioms
replace-port
normalize
axioms
#[serial 1017]  <<M(sav) and x>> -> <<M(sav_check_vrp)>> for T2_VS_AFTER_AS:sav-[x]->sav_check_vrp{};
laws
axioms
#[serial 1018]  <<M(sav_check_vrp) and x>> -> <<M(sav)>> for T3_VS_AFTER_AS_IN_VRP:sav_check_vrp-[x]->sav{};
axioms
#[serial 1019]  <<M(sav_check_vrp) and x>> A <<M(va)>> for T4_VS_AFTER_AS_AFTER_VRP:sav_check_vrp-[x]->va{A};
reduce
atomic
laws
axioms
normalize
split-post
axioms
push
make-an
#[serial 1511]   normalization of [serial 1501]
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
substitute-post
normalize
guided-sub-equals[last_vp_or_vs]
laws
normalize
laws
normalize
axioms
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1516] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1500]
substitute-pre
substitute-pre
laws
axioms
#[serial 1517] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1500]
substitute-post
normalize
split-post
axioms
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
extend-eqr
replace-qv
axioms
#[serial 1518] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1513]
replace-port
axioms
#[serial 1020]  <<M(sav) and x>> -> <<M(sav_check_url)>> for T5a_EXPIRED_SENSED_AV_DELAY:sav-[x]->sav_check_url{};
laws
normalize
split-post
axioms
#[serial 1021]  <<M(sav_check_url) and x>> -> <<M(sav)>> for T5b_TRACKED_VP_TOO_SOON_AFTER_PREVIOUS_VS_OR_VP:sav_check_url-[x]->sav{};
axioms
#[serial 1022]  <<M(sav_check_url) and x>> A <<M(va)>> for T5c_TRACKED_VP_AFTER_AS:sav_check_url-[x]->va{A};
reduce
atomic
laws
axioms
remove-axioms-post
laws
normalize
split-post
axioms
push
make-an
#[serial 1609]   normalization of [serial 1597]
substitute-post
normalize
split-post
axioms
substitute-post
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1618] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1596]
substitute-post
normalize
split-post
axioms
extend-eqr
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
replace-qv
axioms
#[serial 1619] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1596]
substitute-pre
laws
axioms
#[serial 1620] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1611]
substitute-both
normalize
laws
axioms
#[serial 1621] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1611]
substitute-post
normalize
axioms
#[serial 1622] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1613]
replace-port
normalize
axioms
#[serial 1023]  <<M(pav) and x>> -> <<M(pav_check_vrp)>> for T6_VS_AFTER_AP:pav-[x]->pav_check_vrp{};
laws
axioms
#[serial 1024]  <<M(pav_check_vrp) and x>> -> <<M(pav)>> for T7_VS_AFTER_AP_IN_VRP:pav_check_vrp-[x]->pav{};
axioms
#[serial 1025]  <<M(pav_check_vrp) and x>> A <<M(va)>> for T8_VS_AFTER_AP_AFTER_VRP:pav_check_vrp-[x]->va{A};
reduce
reduce
reduce
atomic
laws
axioms
normalize
remove-axioms-post
laws
split-post
axioms
push
make-an
#[serial 1688] as <<post>> -> <<Q>> in <<P>> { <<pre>> S <<post>> } <<Q>> [serial 1025]
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1711] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1687]
substitute-pre
substitute-pre
laws
substitute-post
normalize
axioms
#[serial 1712] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1687]
substitute-both
normalize
split-post
axioms
substitute-post
normalize
extend-eqr
substitute-pre
substitute-pre
laws
normalize
replace-qv
axioms
#[serial 1713] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1691]
substitute-pre
laws
axioms
#[serial 1718] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1704]
substitute-both
normalize
split-post
normalize
guided-sub-equals[last_vp_or_vs]
axioms
laws
normalize
axioms
#[serial 1719] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1710]
replace-port
axioms
#[serial 1026]  <<M(va) and x>> -> <<M(check_atrial_refractories)>> for T10_AS_AFTER_VS_OR_VP:va-[x]->check_atrial_refractories{};
axioms
#[serial 1027]  <<M(check_atrial_refractories) and x>> A <<M(sav)>> for T11_PVARP_EXPIRED:check_atrial_refractories-[x]->sav{A};
reduce
atomic
remove-axioms-post
laws
normalize
axioms
split-post
axioms
push
make-an
#[serial 1823]   normalization of [serial 1814]
substitute-pre
substitute-pre
laws
axioms
#[serial 1828] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1816]
substitute-post
normalize
split-post
axioms
substitute-post
normalize
axioms
#[serial 1829] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1816]
substitute-post
normalize
quant
axioms
#[serial 1830] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1819]
substitute-post
normalize
split-post
axioms
substitute-post
normalize
extend-eqr
substitute-pre
substitute-pre
substitute-pre
laws
normalize
replace-qv
axioms
#[serial 1831] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1819]
substitute-pre
substitute-pre
laws
axioms
#[serial 1832] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1819]
substitute-pre
substitute-pre
laws
axioms
#[serial 1833] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1819]
substitute-pre
laws
axioms
#[serial 1834] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1821]
replace-port
axioms
#[serial 1028]  <<M(check_atrial_refractories) and x>> -> <<M(va)>> for T12_STILL_IN_PVARP:check_atrial_refractories-[x]->va{};
axioms
#[serial 1029]  <<M(va) and x>> -> <<M(check_vrp)>> for T13_VS_AFTER_VS_OR_VP:va-[x]->check_vrp{};
axioms
#[serial 1030]  <<M(check_vrp) and x>> -> <<M(va)>> for T14_STILL_IN_VRP:check_vrp-[x]->va{};
axioms
#[serial 1031]  <<M(check_vrp) and x>> A <<M(va)>> for T15_VRP_EXPIRED:check_vrp-[x]->va{A};
reduce
atomic
laws
normalize
axioms
split-post
push
make-an
#[serial 1924]   normalization of [serial 1913]
substitute-post
substitute-post
normalize
laws
split-post
axioms
normalize
split@
normalize
split-quant
quant
normalize
axioms
#[serial 1929]   normalization of [serial 1921]
substitute-pre
substitute-pre
laws
axioms
#[serial 1933] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1912]
substitute-pre
substitute-pre
laws
axioms
#[serial 1934] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1912]
substitute-pre
substitute-pre
laws
axioms
#[serial 1935] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1912]
substitute-post
normalize
split-post
axioms
substitute-both
normalize
extend-eqr
substitute-pre
substitute-pre
normalize
laws
normalize
replace-qv
axioms
#[serial 1936] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1927]
replace-port
axioms
#[serial 1937] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1927]
axioms
#[serial 1032]  <<M(va) and x>> A <<M(pav)>> for T16_AP_AFTER_TIMEOUT_VS_OR_VP:va-[x]->pav{A};
reduce
reduce
reduce
atomic
laws
normalize
axioms
remove-axioms-post
laws
split-post
axioms
push
make-an
#[serial 2010] applied port output <<pre>> -> <<M[ap]>> [serial 2008]
substitute-both
normalize
split-post
axioms
split@
normalize
split-quant
DeMorgan
normalize
laws
normalize
split-post
axioms
replace-qv
extend-eqr
axioms
#[serial 2025]   normalization of [serial 2014]
substitute-pre
laws
axioms
#[serial 2037] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2002]
substitute-post
normalize
split-post
axioms
substitute-post
normalize
axioms
#[serial 2038] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2002]
substitute-both
normalize
quant
axioms
#[serial 2044] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2020]
replace-qv
axioms
#[serial 2045] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2027]
replace-port
axioms
#[serial 2048] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2027]
replace-qv
axioms
#[serial 2050] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2036]
substitute-pre
substitute-pre
laws
axioms
#[serial 2051] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2036]
substitute-pre
substitute-pre
laws
axioms
#[serial 2052] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2036]
replace-qv
axioms
#[serial 1033]  <<M(sav) and x>> -> <<M(off)>> for T17_STOP:sav-[x]->off{};
axioms
#[serial 1034]  <<M(pav) and x>> -> <<M(off)>> for T17_STOP:pav-[x]->off{};
axioms
#[serial 1035]  <<M(va) and x>> -> <<M(off)>> for T17_STOP:va-[x]->off{};
axioms
#Q.E.D.