#FragileMultiStep.ps
#This file, script.txt, was produced the BLESS Proof Assistant v3.1
#  at Sun Jun 06 10:41:45 CDT 2021 by brianlarson
push
sort-by-component[ControlSoftware::FragilePositionControlThread.MultiStep]
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1023] <<M(StillClosing)>> -> <<I>> from invariant I when complete state StillClosing has Assertion <<M(StillClosing)>> in its definition
make-an
axioms
#[serial 1024] <<M(Run)>> -> <<I>> from invariant I when complete state Run has Assertion <<M(Run)>> in its definition.
normalize
axioms
#[serial 1025] Serban's Theorem:  disjunction of execute conditions leaving execution state ShutDown, <<M(ShutDown)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1026] Serban's Theorem:  disjunction of execute conditions leaving execution state Check, <<M(Check)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1027] Serban's Theorem:  disjunction of execute conditions leaving execution state PowerOn, <<M(PowerOn)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1028] Serban's Theorem:  disjunction of execute conditions leaving execution state Decide, <<M(Decide)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1029]  <<M(PowerOn)>> A <<M(Run)>> for ms0po:PowerOn-[ ]->Run{A};
reduce
normalize
atomic
normalize
laws
remove-axioms-post
laws
normalize
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1107]   normalization of [serial 1100
make-an
substitute-post
normalize
dist^
normalize
alldist^
laws
axioms
#[serial 1120] Subprogram precondition implication to
substitute-pre
normalize
guided-sub-equals[ACTUAL_POSITION]
laws
normalize
axioms
#[serial 1130]   normalization of [serial 1122]
substitute-pre
normalize
split-post
axioms
guided-sub-equals[ACTUAL_POSITION']
axioms
guided-sub-equals[0]
laws
axioms
equivalent
axioms
#[serial 1133] Associativity: (b.c).a = a.b.c [serial 1119]
guided-sub-equals[ACTUAL_POSITION]
laws
normalize
substitute-pre
normalize
axioms
#[serial 1137] Law of And-Simplification:  P and true is P [serial 1135]
split-post
axioms
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1030]  <<M(Run) and x>> -> <<M(Check)>> for ms1run:Run-[x]->Check{};
normalize
axioms
#[serial 1031]  <<M(Check) and x>> -> <<M(Decide)>> for ms1ok:Check-[x]->Decide{};
normalize
laws
split-post
axioms
substitute-post
normalize
now
axioms
#[serial 1032]  <<M(Check) and x>> -> <<M(Error)>> for ms1er:Check-[x]->Error{};
axioms
#[serial 1033]  <<M(Decide) and x>> A <<M(Run)>> for ms2eq:Decide-[x]->Run{A};
normalize
reduce
atomic
normalize
laws
split-post
axioms
substitute-pre
normalize
laws
axioms
normalize
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
laws
axioms
now
guided-sub-equals[DESIRED_POSITION]
axioms
substitute-post
normalize
alldist^
laws
axioms
#[serial 1034]  <<M(Decide) and x>> A <<M(Run)>> for ms3om:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1365]   normalization of [serial 1358
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 1407] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1379]
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
guided-sub-equals[EstimatedActualPosition]
guided-sub-equals[Delta]
normalize
transitive
<=to<
axioms
#[serial 1408] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1379]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
axioms
#[serial 1409] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1389]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1410] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1389]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1411] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1389]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1412] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1389]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1413] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1396]
substitute-pre
normalize
laws
axioms
#[serial 1414] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1396]
substitute-pre
normalize
laws
axioms
#[serial 1416] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1396]
substitute-pre
normalize
laws
normalize
transitive
axioms
#[serial 1417] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1396]
remove-axioms-post
axioms
#[serial 1419] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1401]
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
now
axioms
#[serial 1424] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1403]
substitute-pre
normalize
laws
guided-sub-equals[Delta]
normalize
transitive
<=to<
axioms
#[serial 1425] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1403]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
<=to<
transitive
<=to<
axioms
#[serial 1426] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1403]
guided-sub-equals[Delta]
normalize
axioms
#[serial 1427] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1403]
guided-sub-equals[Delta]
normalize
axioms
#[serial 1035]  <<M(Decide) and x>> A <<M(Run)>> for ms4cm:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1575]   normalization of [serial 1568
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 1615] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1589]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
transitive
elim-subtract
normalize
axioms
#[serial 1616] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1589]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
<=to<
axioms
#[serial 1617] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1598]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1618] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1598]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1619] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1598]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1620] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1598]
substitute-pre
normalize
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 1621] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1604]
substitute-pre
normalize
laws
axioms
#[serial 1622] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1604]
substitute-pre
normalize
laws
axioms
#[serial 1624] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1604]
remove-axioms-post
axioms
#[serial 1626] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1609]
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
now
axioms
#[serial 1630] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1611]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
axioms
#[serial 1631] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1611]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
axioms
#[serial 1632] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1611]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
<=to<
axioms
#[serial 1633] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1611]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
<=to<
axioms
#[serial 1036]  <<M(Decide) and x>> A <<M(Run)>> for ms5od:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
remove-axioms-post
laws
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1796]   normalization of [serial 1789
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 1837] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1810]
substitute-pre
normalize
laws
normalize
transitive
normalize
<=to<
axioms
#[serial 1839] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1820]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1840] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1820]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1841] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1820]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1842] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1820]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1846] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1824]
substitute-pre
now
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1847] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1824]
substitute-pre
now
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1849] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1835]
substitute-pre
normalize
laws
normalize
transitive
normalize
<=to<
axioms
#[serial 1853] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1836]
substitute-pre
normalize
laws
axioms
#[serial 1854] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1836]
substitute-pre
normalize
laws
normalize
axioms
#[serial 1855] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1836]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1856] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1836]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 1857] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1836]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
laws
axioms
#[serial 1037]  <<M(Decide) and x>> A <<M(Run)>> for ms6cd:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
laws
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1999]   normalization of [serial 1992
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 2038] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2013]
substitute-pre
normalize
laws
guided-sub-equals[Delta]
normalize
axioms
#[serial 2040] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2018]
substitute-pre
normalize
laws
axioms
#[serial 2041] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2018]
substitute-pre
normalize
laws
axioms
#[serial 2042] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2018]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 2043] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2018]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 2044] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2018]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
laws
axioms
#[serial 2045] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2018]
remove-axioms-post
axioms
#[serial 2048] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2023]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 2049] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2023]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 2050] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2023]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 2051] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2023]
guided-sub-equals[ACTUAL_POSITION']
substitute-pre
normalize
laws
normalize
axioms
#[serial 2055] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2027]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 2056] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2027]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 2058] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2037]
substitute-pre
normalize
laws
normalize
guided-sub-equals[(ACTUAL_POSITION + Delta)]
axioms
#[serial 1038]  <<M(Run) and x>> -> <<M(ShutDown)>> for ms7stop:Run-[x]->ShutDown{};
normalize
laws
axioms
#[serial 1039]  <<M(ShutDown) and x>> -> <<M(Done)>> for ms8done:ShutDown-[x]->Done{};
normalize
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1040]  <<M(ShutDown) and x>> A <<M(StillClosing)>> for ms9sc:ShutDown-[x]->StillClosing{A};
normalize
reduce
atomic
normalize
laws
normalize
split-post
axioms
remove-axioms-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 2212] Q2 -> Q in sequential composition for [serial 2209
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 2242] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2218]
guided-sub-equals[Delta]
normalize
elim-subtract
normalize
axioms
#[serial 2243] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2218]
substitute-pre
normalize
guided-sub-equals[Delta]
transitive
elim-subtract
<=to<
axioms
#[serial 2244] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2227]
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
elim-subtract
normalize
axioms
#[serial 2245] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2227]
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
elim-subtract
normalize
axioms
#[serial 2246] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2227]
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
elim-subtract
normalize
laws
axioms
#[serial 2249] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2230]
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 2250] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2233]
substitute-pre
normalize
laws
<=to<
axioms
#[serial 2251] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2233]
substitute-pre
normalize
laws
axioms
#[serial 2255] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2239]
guided-sub-equals[Delta]
elim-subtract
axioms
#[serial 2256] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2239]
substitute-pre
normalize
transitive
<=to<
axioms
#[serial 2257] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2239]
substitute-pre
guided-sub-equals[Delta]
normalize
equivalent
transitive
<=to<
elim-subtract
<=to<
normalize
<=to<
axioms
#[serial 1041]  <<M(ShutDown) and x>> -> <<M(Error)>> for ms10er:ShutDown-[x]->Error{};
axioms
#[serial 1042]  <<M(StillClosing) and x>> -> <<M(ShutDown)>> for ms11cl:StillClosing-[x]->ShutDown{};
axioms