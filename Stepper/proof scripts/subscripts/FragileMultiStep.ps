#FragileMultiStep.ps
push
sort-by-component[ControlSoftware::FragilePositionControlThread.MultiStep]
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1023] <<M(StillClosing)>> -> <<I>> from invariant I when complete state StillClosing has Assertion <<M(StillClosing)>> in its definition
make-an
axioms
#[serial 1024] <<M(Run)>> -> <<I>> from invariant I when complete state Run has Assertion <<M(Run)>> in its definition.
normalize
axioms
#[serial 1025] Serban's Theorem:  disjunction of execute conditions leaving execution state ShutDown, <<M(ShutDown)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1026] Serban's Theorem:  disjunction of execute conditions leaving execution state Check, <<M(Check)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1027] Serban's Theorem:  disjunction of execute conditions leaving execution state PowerOn, <<M(PowerOn)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1028] Serban's Theorem:  disjunction of execute conditions leaving execution state Decide, <<M(Decide)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1029]  <<M(PowerOn)>> A <<M(Run)>> for ms0po:PowerOn-[ ]->Run{A};
reduce
normalize
atomic
normalize
laws
remove-axioms-post
laws
normalize
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1107]   normalization of [serial 1100
make-an
substitute-post
normalize
dist^
normalize
alldist^
laws
now
axioms
#[serial 1120] Subprogram precondition implication to
substitute-pre
normalize
guided-sub-equals[ACTUAL_POSITION]
laws
normalize
axioms
#[serial 1130]   normalization of [serial 1122]
substitute-pre
normalize
split-post
axioms
guided-sub-equals[ACTUAL_POSITION']
axioms
guided-sub-equals[0]
laws
axioms
equivalent
axioms
#[serial 1133] Associativity: (b.c).a = a.b.c [serial 1119]
guided-sub-equals[ACTUAL_POSITION]
laws
normalize
substitute-pre
normalize
axioms
#[serial 1137] Law of And-Simplification:  P and true is P [serial 1135]
split-post
axioms
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1030]  <<M(Run) and x>> -> <<M(Check)>> for ms1run:Run-[x]->Check{};
normalize
axioms
#[serial 1031]  <<M(Check) and x>> -> <<M(Decide)>> for ms1ok:Check-[x]->Decide{};
normalize
laws
split-post
axioms
substitute-post
normalize
now
axioms
#[serial 1032]  <<M(Check) and x>> -> <<M(Error)>> for ms1er:Check-[x]->Error{};
axioms
#[serial 1033]  <<M(Decide) and x>> A <<M(Run)>> for ms2eq:Decide-[x]->Run{A};
normalize
reduce
atomic
normalize
laws
split-post
axioms
substitute-pre
normalize
laws
axioms
normalize
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
laws
axioms
now
guided-sub-equals[DESIRED_POSITION]
axioms
substitute-post
normalize
alldist^
laws
now
axioms
#[serial 1034]  <<M(Decide) and x>> A <<M(Run)>> for ms3om:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1363]   normalization of [serial 1356
make-an
substitute-post
normalize
alldist^
laws
now
axioms
#[serial 1405] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1377]
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
guided-sub-equals[EstimatedActualPosition]
guided-sub-equals[Delta]
normalize
transitive
<=to<
axioms
#[serial 1406] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1377]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
axioms
#[serial 1407] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1387]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1408] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1387]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1409] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1387]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1410] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1387]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1411] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
substitute-pre
normalize
laws
axioms
#[serial 1412] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
substitute-pre
normalize
laws
axioms
#[serial 1414] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
substitute-pre
normalize
laws
normalize
transitive
axioms
#[serial 1415] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
remove-axioms-post
axioms
#[serial 1417] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1399]
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
now
axioms
#[serial 1422] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1401]
substitute-pre
normalize
laws
guided-sub-equals[Delta]
normalize
transitive
<=to<
axioms
#[serial 1423] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1401]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
<=to<
transitive
<=to<
axioms
#[serial 1424] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1401]
guided-sub-equals[Delta]
normalize
axioms
#[serial 1425] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1401]
guided-sub-equals[Delta]
normalize
axioms
#[serial 1035]  <<M(Decide) and x>> A <<M(Run)>> for ms4cm:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1572]   normalization of [serial 1565
make-an
substitute-post
normalize
alldist^
laws
now
axioms
#[serial 1614] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1586]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
transitive
elim-subtract
normalize
axioms
#[serial 1615] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1586]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
<=to<
axioms
#[serial 1616] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1596]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1617] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1596]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1618] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1596]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1619] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1596]
substitute-pre
normalize
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 1620] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1603]
substitute-pre
normalize
laws
axioms
#[serial 1621] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1603]
substitute-pre
normalize
laws
axioms
#[serial 1623] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1603]
remove-axioms-post
axioms
#[serial 1625] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1608]
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
now
axioms
#[serial 1629] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1610]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
axioms
#[serial 1630] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1610]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
axioms
#[serial 1631] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1610]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
<=to<
axioms
#[serial 1632] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1610]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
<=to<
axioms
#[serial 1036]  <<M(Decide) and x>> A <<M(Run)>> for ms5od:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
remove-axioms-post
laws
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1794]   normalization of [serial 1787
make-an
substitute-post
normalize
alldist^
laws
now
axioms
#[serial 1835] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1808]
substitute-pre
normalize
laws
normalize
transitive
normalize
<=to<
axioms
#[serial 1837] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1818]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1838] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1818]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1839] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1818]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1840] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1818]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1844] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1822]
substitute-pre
now
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1845] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1822]
substitute-pre
now
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1847] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1833]
substitute-pre
normalize
laws
normalize
transitive
normalize
<=to<
axioms
#[serial 1851] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1834]
substitute-pre
normalize
laws
axioms
#[serial 1852] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1834]
substitute-pre
normalize
laws
normalize
axioms
#[serial 1853] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1834]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1854] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1834]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 1855] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1834]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
laws
axioms
#[serial 1037]  <<M(Decide) and x>> A <<M(Run)>> for ms6cd:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
laws
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1996]   normalization of [serial 1989
make-an
substitute-post
normalize
alldist^
laws
now
axioms
#[serial 2035] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2010]
substitute-pre
normalize
laws
guided-sub-equals[Delta]
normalize
axioms
#[serial 2037] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2015]
substitute-pre
normalize
laws
axioms
#[serial 2038] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2015]
substitute-pre
normalize
laws
axioms
#[serial 2039] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2015]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 2040] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2015]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 2041] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2015]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
laws
axioms
#[serial 2042] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2015]
remove-axioms-post
axioms
#[serial 2045] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2020]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 2046] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2020]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 2047] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2020]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 2048] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2020]
guided-sub-equals[ACTUAL_POSITION']
substitute-pre
normalize
laws
normalize
axioms
#[serial 2052] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2024]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 2053] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2024]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 2055] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2034]
substitute-pre
normalize
laws
normalize
guided-sub-equals[(ACTUAL_POSITION + Delta)]
axioms
#[serial 1038]  <<M(Run) and x>> -> <<M(ShutDown)>> for ms7stop:Run-[x]->ShutDown{};
normalize
laws
axioms
#[serial 1039]  <<M(ShutDown) and x>> -> <<M(Done)>> for ms8done:ShutDown-[x]->Done{};
normalize
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1040]  <<M(ShutDown) and x>> A <<M(StillClosing)>> for ms9sc:ShutDown-[x]->StillClosing{A};
normalize
reduce
atomic
normalize
laws
normalize
split-post
axioms
remove-axioms-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 2208] <<Q2>> -> <<Q>> in sequential composition for [serial 2205
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 2238] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2214]
guided-sub-equals[Delta]
normalize
elim-subtract
normalize
axioms
#[serial 2239] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2214]
substitute-pre
normalize
guided-sub-equals[Delta]
transitive
elim-subtract
<=to<
axioms
#[serial 2240] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2223]
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
elim-subtract
normalize
axioms
#[serial 2241] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2223]
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
elim-subtract
normalize
axioms
#[serial 2242] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2223]
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
elim-subtract
normalize
laws
axioms
#[serial 2245] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2226]
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 2246] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2229]
substitute-pre
normalize
laws
<=to<
axioms
#[serial 2247] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2229]
substitute-pre
normalize
laws
axioms
#[serial 2251] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2235]
guided-sub-equals[Delta]
elim-subtract
axioms
#[serial 2252] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2235]
substitute-pre
normalize
transitive
<=to<
axioms
#[serial 2253] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 2235]
substitute-pre
guided-sub-equals[Delta]
normalize
equivalent
transitive
<=to<
elim-subtract
normalize
<=to<
axioms
#[serial 1041]  <<M(ShutDown) and x>> -> <<M(Error)>> for ms10er:ShutDown-[x]->Error{};
axioms
#[serial 1042]  <<M(StillClosing) and x>> -> <<M(ShutDown)>> for ms11cl:StillClosing-[x]->ShutDown{};
axioms