#FragileMultiStep.ps
push
sort-by-component[ControlSoftware::FragilePositionControlThread.MultiStep]
#[serial 1023] <<M(StillClosing)>> -> <<I>> from invariant I when complete state StillClosing has Assertion <<M(StillClosing)>> in its definition
make-an
axioms
#[serial 1024] <<M(Run)>> -> <<I>> from invariant I when complete state Run has Assertion <<M(Run)>> in its definition.
normalize
axioms
#[serial 1025] Serban's Theorem:  disjunction of execute conditions leaving execution state ShutDown, <<M(ShutDown)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1026] Serban's Theorem:  disjunction of execute conditions leaving execution state Check, <<M(Check)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1027] Serban's Theorem:  disjunction of execute conditions leaving execution state PowerOn, <<M(PowerOn)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1028] Serban's Theorem:  disjunction of execute conditions leaving execution state Decide, <<M(Decide)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1029]  <<M(PowerOn)>> A <<M(Run)>> for ms0po:PowerOn-[ ]->Run{A};
reduce
normalize
atomic
normalize
laws
remove-axioms-post
laws
normalize
axioms
push
#[serial 1107]   normalization of [serial 1100
make-an
substitute-post
normalize
dist^
normalize
alldist^
laws
axioms
#[serial 1120] Subprogram precondition implication to
substitute-pre
normalize
guided-sub-equals[ACTUAL_POSITION]
laws
normalize
axioms
#[serial 1130]   normalization of [serial 1122]
substitute-pre
normalize
split-post
axioms
guided-sub-equals[ACTUAL_POSITION']
axioms
guided-sub-equals[0]
laws
axioms
equivalent
axioms
#[serial 1133] Associativity: (b.c).a = a.b.c [serial 1119]
guided-sub-equals[ACTUAL_POSITION]
laws
normalize
substitute-pre
normalize
axioms
#[serial 1137] Law of And-Simplification:  P and true is P [serial 1135]
split-post
axioms
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1030]  <<M(Run) and x>> -> <<M(Check)>> for ms1run:Run-[x]->Check{};
normalize
axioms
#[serial 1031]  <<M(Check) and x>> -> <<M(Decide)>> for ms1ok:Check-[x]->Decide{};
normalize
laws
split-post
axioms
substitute-post
normalize
now
axioms
#[serial 1032]  <<M(Check) and x>> -> <<M(Error)>> for ms1er:Check-[x]->Error{};
axioms
#[serial 1033]  <<M(Decide) and x>> A <<M(Run)>> for ms2eq:Decide-[x]->Run{A};
normalize
reduce
atomic
normalize
laws
split-post
axioms
substitute-pre
normalize
laws
axioms
normalize
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
laws
axioms
now
guided-sub-equals[DESIRED_POSITION]
axioms
substitute-post
normalize
alldist^
laws
axioms
#[serial 1034]  <<M(Decide) and x>> A <<M(Run)>> for ms3om:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
split-post
axioms
push
#[serial 1364]   normalization of [serial 1357
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 1403] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1362]
substitute-pre
normalize
laws
normalize
now
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1407] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1378]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
transitive
normalize
<=to<
axioms
#[serial 1408] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1378]
guided-sub-equals[Delta]
normalize
axioms
#[serial 1409] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1388]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1410] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1388]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1411] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1388]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1412] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1388]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1413] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
substitute-pre
normalize
laws
axioms
#[serial 1414] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
substitute-pre
normalize
laws
axioms
#[serial 1416] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
substitute-pre
normalize
laws
normalize
transitive
axioms
#[serial 1417] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1394]
remove-axioms-post
axioms
#[serial 1420] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1400]
substitute-pre
normalize
laws
guided-sub-equals[Delta]
normalize
transitive
<=to<
axioms
#[serial 1421] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1400]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
normalize
<=to<
transitive
<=to<
axioms
#[serial 1422] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1400]
guided-sub-equals[Delta]
normalize
axioms
#[serial 1423] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1400]
guided-sub-equals[Delta]
normalize
axioms
#[serial 1035]  <<M(Decide) and x>> A <<M(Run)>> for ms4cm:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1560]   normalization of [serial 1553
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 1597] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1558]
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
now
axioms
#[serial 1601] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1574]
guided-sub-equals[Delta]
transitive
elim-subtract
normalize
axioms
#[serial 1602] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1574]
substitute-pre
normalize
guided-sub-equals[Delta]
transitive
normalize
laws
normalize
transitive
normalize
<=to<
axioms
#[serial 1603] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1583]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1604] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1583]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1605] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1583]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1606] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1583]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1607] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1588]
substitute-pre
normalize
laws
axioms
#[serial 1608] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1588]
substitute-pre
normalize
laws
normalize
axioms
#[serial 1610] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1588]
remove-axioms-post
axioms
#[serial 1612] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1594]
guided-sub-equals[Delta]
transitive
normalize
axioms
#[serial 1613] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1594]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
transitive
normalize
axioms
#[serial 1614] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1594]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
transitive
normalize
<=to<
axioms
#[serial 1615] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1594]
substitute-pre
normalize
laws
normalize
guided-sub-equals[Delta]
transitive
normalize
<=to<
axioms
#[serial 1036]  <<M(Decide) and x>> A <<M(Run)>> for ms5od:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
remove-axioms-post
laws
split-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 1760]   normalization of [serial 1753
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 1803] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1774]
substitute-pre
normalize
laws
normalize
transitive
normalize
<=to<
axioms
#[serial 1805] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1784]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1806] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1784]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 1807] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1784]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 1808] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1784]
substitute-pre
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1812] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1795]
substitute-pre
now
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1813] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1795]
substitute-pre
now
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1815] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1801]
substitute-pre
normalize
laws
normalize
transitive
normalize
<=to<
axioms
#[serial 1819] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1802]
substitute-pre
normalize
laws
axioms
#[serial 1820] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1802]
substitute-pre
normalize
laws
normalize
axioms
#[serial 1821] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1802]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 1822] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1802]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 1823] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1802]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
laws
axioms
#[serial 1037]  <<M(Decide) and x>> A <<M(Run)>> for ms6cd:Decide-[x]->Run{A};
reduce
normalize
atomic
normalize
laws
normalize
laws
split-post
axioms
push
#[serial 3337]   normalization of [serial 3330
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 3378] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3351]
substitute-pre
normalize
laws
guided-sub-equals[Delta]
normalize
axioms
#[serial 3380] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3356]
substitute-pre
normalize
laws
axioms
#[serial 3381] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3356]
substitute-pre
normalize
laws
axioms
#[serial 3382] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3356]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
axioms
#[serial 3383] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3356]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
normalize
laws
axioms
#[serial 3384] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3356]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[EstimatedActualPosition]
laws
axioms
#[serial 3385] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3356]
remove-axioms-post
axioms
#[serial 3388] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3361]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 3389] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3361]
guided-sub-equals[ACTUAL_POSITION']
normalize
axioms
#[serial 3390] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3361]
guided-sub-equals[ACTUAL_POSITION']
normalize
laws
axioms
#[serial 3391] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3361]
guided-sub-equals[ACTUAL_POSITION']
substitute-pre
normalize
laws
normalize
axioms
#[serial 3395] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3372]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 3396] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3372]
now
substitute-pre
normalize
laws
normalize
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 3398] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3377]
substitute-pre
normalize
laws
normalize
guided-sub-equals[(ACTUAL_POSITION + Delta)]
axioms
#[serial 1038]  <<M(Run) and x>> -> <<M(ShutDown)>> for ms7stop:Run-[x]->ShutDown{};
normalize
laws
axioms
#[serial 1039]  <<M(ShutDown) and x>> -> <<M(Done)>> for ms8done:ShutDown-[x]->Done{};
normalize
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 1040]  <<M(ShutDown) and x>> A <<M(StillClosing)>> for ms9sc:ShutDown-[x]->StillClosing{A};
normalize
reduce
atomic
normalize
laws
normalize
split-post
axioms
remove-axioms-post
axioms
push
#ControlSoftware::FragilePositionControlThread.MultiStep
#[serial 3551] Q2 -> Q in sequential composition for [serial 3548
make-an
substitute-post
normalize
alldist^
laws
axioms
#[serial 3582] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3550]
substitute-pre
normalize
laws
guided-sub-equals[ACTUAL_POSITION]
axioms
#[serial 3583] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3557]
guided-sub-equals[Delta]
elim-subtract
axioms
#[serial 3584] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3557]
substitute-pre
guided-sub-equals[Delta]
normalize
transitive
elim-subtract
normalize
<=to<
axioms
#[serial 3585] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3566]
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
normalize
elim-subtract
normalize
axioms
#[serial 3586] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3566]
guided-sub-equals[ACTUAL_POSITION']
normalize
guided-sub-equals[Delta]
elim-subtract
normalize
axioms
#[serial 3587] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3566]
substitute-pre
normalize
guided-sub-equals[ACTUAL_POSITION']
guided-sub-equals[Delta]
guided-sub-equals[EstimatedActualPosition]
elim-subtract
normalize
laws
axioms
#[serial 3588] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3571]
substitute-pre
normalize
laws
<=to<
axioms
#[serial 3589] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3571]
substitute-pre
normalize
laws
axioms
#[serial 3593] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3577]
guided-sub-equals[Delta]
elim-subtract
axioms
#[serial 3594] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3577]
substitute-pre
normalize
transitive
<=to<
axioms
#[serial 3595] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 3577]
substitute-pre
normalize
guided-sub-equals[Delta]
transitive
elim-subtract
normalize
<=to<
axioms
#[serial 1041]  <<M(ShutDown) and x>> -> <<M(Error)>> for ms10er:ShutDown-[x]->Error{};
axioms
#[serial 1042]  <<M(StillClosing) and x>> -> <<M(ShutDown)>> for ms11cl:StillClosing-[x]->ShutDown{};
axioms