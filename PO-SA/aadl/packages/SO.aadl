package SO
public

	with BLESS, BLESS_Types, PulseOx_Types;

thread SupplemetalOxygenThread
  features
    SpO2Avg : in data port PulseOx_Types::Percent	--oxygen saturation average from SpO2AverageThread
      {BLESS::Value=>"<< returns quantity percent := SPO2_AVERAGE()>>";};
    SpO2LowerLimit : in event data port PulseOx_Types::Percent  -- minimum allowed SpO2 to/from device
      {BLESS::Value=>"<< returns quantity percent := SPO2_LOWER_LIMIT>>";};
    SupplOxyAlarmEnabled : in data port BLESS_Types::Boolean   -- enable derived alarm for patient using supplementary oxygen
      {BLESS::Assertion=>"<<SUPPL_OXY_ALARM_ENABLED>>";};  
    SpO2LevelAdj : in data port PulseOx_Types::Percent  -- value used to decrease SpO2 level to obtain "derived" parameter
      {BLESS::Value=>"<< returns quantity percent := SPO2_LOWER_LIMIT_ADJ>>";};
    SpO2DerivedLowerLimitAlarm : out event port  -- alarm triggered when derived patient SpO2 level is below SpO2LowerLimit
      {BLESS::Assertion=>"<<SUPPL_O2_ALARM()>>";};
  properties
    --Thread_Properties::
        Dispatch_Protocol => Periodic;  
    --Timing_Properties::
        Period => PulseOx_Properties::SpO2_Sampling_Period;
end SupplemetalOxygenThread;

thread implementation SupplemetalOxygenThread.imp
annex BLESS 
{**
  invariant <<true>>  --there is no persistent state
  states
    start : initial state;
    run : complete state;
    check : state;
    halt : final state;  --normal termination
  transitions
    so0: start-[ ]->run{};
    so1: run-[on dispatch]->check{};
    so2: check-[SupplOxyAlarmEnabled? and SpO2Avg? < SpO2LowerLimit?+SpO2LevelAdj?]->run
      {<<SUPPL_O2_ALARM()>> SpO2DerivedLowerLimitAlarm!};
    so3: check-[not SupplOxyAlarmEnabled? or SpO2Avg? >= SpO2LowerLimit?+SpO2LevelAdj?]->run{};
--    so4: run-[on dispatch stop]->halt{};
**};
end SupplemetalOxygenThread.imp;


	
end SO;