package SPT
public

	with BLESS, BLESS_Types, PulseOx_Types;

thread SpO2TrendThread
  features
    SpO2 : in event data port PulseOx_Types::Percent	--oxygen saturation from pulse oximeter device
      {BLESS::Value=>"<<:=SPO2>>";}; 
    SensorConnected : in data port BLESS_Types::Boolean  --sensor is attached to patient
      {BLESS::Assertion=>"<<SENSOR_CONNECTED>>";}; 
    MotionArtifact : in data port BLESS_Types::Boolean  -- indication of motion noise in sensor reading
       {BLESS::Assertion=>"<<MOTION_ARTIFACT>>";};  
    SpO2Trend : out data port PulseOx_Types::SpO2Samples  --one SpO2 reading each minute for the past hour
      {BLESS::Assertion=>"<<:=SPO2_TREND()>>";};  
    NumSamples : out data port BLESS_Types::Integer
      {BLESS::Value=>"<<:=NUM_SAMPLES>>";};
  properties
    --Thread_Properties::
        Dispatch_Protocol => Periodic;  
    --Timing_Properties::
        Period => PulseOx_Properties::Time_Between_Trending_Samples;
end SpO2TrendThread;

thread implementation SpO2TrendThread.imp
annex BLESS 
{**
  assert
    <<HOLD:n~quantity whole: all s~quantity whole in 1 ..n --holds current values for SpO2; spo2_a[1]=SPO2^0
         are spo2_a[s]=(if MOTION_ARTIFACT^(1-s) or not SENSOR_CONNECTED^(1-s) then 0 u else SPO2^(1-s))>>
    <<AXIOM_CR2: : (num_samples - 2) < (num_samples - 1)>>
  invariant 
    <<SpO2_INV: :all s~quantity whole in 1 ..num_samples 
         are spo2_a[s]=(if MOTION_ARTIFACT^(-s) or not SENSOR_CONNECTED^(-s) then 0 u else SPO2^(-s))>>  
  variables
    nts~quantity whole :=#PulseOx_Properties::Num_Trending_Samples;
    spo2_a ~ spo2_samples --holds SpO2 history
    spo2_nxt ~ spo2_samples  --temporary copy of trend for next output
    num_samples~quantity whole := 0  --counts samples while filling
      <<AXIOM_NS: : num_samples = NUM_SAMPLES and spo2_a = SPO2_HISTORY>>
  states
    start : initial state
      <<(num_samples<#PulseOx_Properties::Num_Trending_Samples) and (num_samples=0) and
        (all s~quantity whole in (num_samples+1) .. #PulseOx_Properties::Num_Trending_Samples
         	are not SENSOR_CONNECTED^(-s))>>;
    loading : complete state  --loading spo2_a
      <<SpO2_INV() and (num_samples<#PulseOx_Properties::Num_Trending_Samples)>>;    
    check : state  --check if full
      <<HOLD(num_samples)>>;
    run : complete state   --full spo2_a
      <<SpO2_INV() and (num_samples=#PulseOx_Properties::Num_Trending_Samples)>>;    
    halt : final state;  --normal termination
    fail : final state;  --error termination
  transitions
    sptt0: start-[ ]->loading{num_samples' := num_samples};
    sptt1: loading-[on dispatch]->check
      {
        <<SpO2_INV() and (num_samples < #PulseOx_Properties::Num_Trending_Samples)
          and AXIOM_NS() >>
      SpO2Trend!(spo2_a)  --put out new SpO2 trend for ui
      ;
        <<SpO2_INV() and (num_samples < #PulseOx_Properties::Num_Trending_Samples)
          and AXIOM_NS() >>
      NumSamples!(num_samples)
      ;
        <<SpO2_INV() and (num_samples < #PulseOx_Properties::Num_Trending_Samples)>>
      forall i in 1 ..num_samples
        {
          <<spo2_a[i]=(if MOTION_ARTIFACT^(-i) or not SENSOR_CONNECTED^(-i) then 0 u else SPO2^(-i))>>
        spo2_nxt[i+1]:=spo2_a[i] --shift old samples
          <<spo2_nxt[i+1]=(if MOTION_ARTIFACT^(-i) or not SENSOR_CONNECTED^(-i) then 0 u else SPO2^(-i))>>
        }
      <<SHFT: :all i~quantity whole in 1 ..num_samples 
         are spo2_nxt[i+1]=(if MOTION_ARTIFACT^(-i) or not SENSOR_CONNECTED^(-i) then 0 u else SPO2^(-i))>>
      ;  
      if
        (MotionArtifact? or not SensorConnected?)~>
            <<SHFT() and (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)>>
          spo2_nxt[1] := 0u  --bad sample
            <<SHFT() and (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)
               and (spo2_nxt[1]=(if MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0 then 0 u else SPO2^0))>>
      []
        (not (MotionArtifact? or not SensorConnected?))~>
             <<SHFT() and not (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)>>
          spo2_nxt[1] := SpO2  --add current sample
            <<SHFT() and not (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)
               and (spo2_nxt[1]=(if MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0 then 0 u else SPO2^0))>>
      fi    
        <<(spo2_nxt[1]=(if MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0 then 0 u else SPO2^0)) and
          (all i~quantity whole in 2 .. (num_samples+1) are 
          	spo2_nxt[i]=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i)))>>
      ;    
      num_samples:=num_samples+1  --increment count of samples
      <<all i~quantity whole in 1 ..num_samples are spo2_nxt[i]=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i))>>
      ;
      forall i in 1 ..num_samples
        {
          <<spo2_nxt[i]=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i))>>
        spo2_a[i]:=spo2_nxt[i] --copy back
          <<spo2_a[i]=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i))>>
        }
      <<all i~quantity whole in 1 ..num_samples are spo2_a[i]=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i))>>
      };
    sptt2a: check-[num_samples<#PulseOx_Properties::Num_Trending_Samples]->loading
      {|spo2_a',num_samples':=spo2_a,num_samples|};
    sptt2b: check-[num_samples=#PulseOx_Properties::Num_Trending_Samples]->run
      {|spo2_a',num_samples':=spo2_a,num_samples|};
    sptt2c: check-[num_samples>#PulseOx_Properties::Num_Trending_Samples]->fail{};
    sptt3: run-[on dispatch]->run
      {
        <<SpO2_INV() and (num_samples=#PulseOx_Properties::Num_Trending_Samples)
          and AXIOM_NS() >>
      SpO2Trend!(spo2_a)  --put out new SpO2 trend for ui
      ;
        <<SpO2_INV() and (num_samples=#PulseOx_Properties::Num_Trending_Samples)
          and AXIOM_NS() >>
      NumSamples!(num_samples)
      ;
        <<SpO2_INV() and (num_samples=#PulseOx_Properties::Num_Trending_Samples)
          and AXIOM_CR2()>>
      forall i in 1 .. (num_samples - 1)
        {
          <<spo2_a[i]=(if MOTION_ARTIFACT^(-i) or not SENSOR_CONNECTED^(-i) then 0 u else SPO2^(-i))>>
        spo2_nxt[i+1]:=spo2_a[i] --shift old samples
          <<spo2_nxt[i+1]=(if MOTION_ARTIFACT^(-i) or not SENSOR_CONNECTED^(-i) then 0 u else SPO2^(-i))>>
        }
        <<SHFTR: :(all i~quantity whole in 1 .. (num_samples - 1) 
        	are spo2_nxt[i+1]=(if MOTION_ARTIFACT^(-i) or not SENSOR_CONNECTED^(-i) then 0 u else SPO2^(-i)))
          and (num_samples=#PulseOx_Properties::Num_Trending_Samples)>>
      ;  
      if
        (MotionArtifact? or not SensorConnected?)~>
            <<SHFTR() and (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)>>
          spo2_nxt[1] := 0u  --bad sample
            <<SHFTR() and (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)
               and (spo2_nxt[1]=(if MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0 then 0 u else SPO2^0))>>
      []
        (not (MotionArtifact? or not SensorConnected?))~>
             <<SHFTR() and not (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)>>
          spo2_nxt[1] := SpO2  --add current sample
            <<SHFTR() and not (MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0)
               and (spo2_nxt[1]=(if MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0 then 0 u else SPO2^0))>>
      fi    
        <<(spo2_nxt[1]=(if MOTION_ARTIFACT^0 or not SENSOR_CONNECTED^0 then 0 u else SPO2^0)) and 
          (num_samples=#PulseOx_Properties::Num_Trending_Samples) and
          (all i~quantity whole in 2 ..num_samples 
          	 are spo2_nxt[i]=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i)))>>
      ;
      forall i in 1 ..num_samples
        {
          <<spo2_nxt[i]=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i))>>
        spo2_a[i]':=spo2_nxt[i] --copy back
          <<spo2_a[i]'=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i))>>
        }
      <<(all i~quantity whole in 1 ..num_samples 
      	  are spo2_a[i]'=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i)))
         and (num_samples=#PulseOx_Properties::Num_Trending_Samples)>> 
      ;
      num_samples':=num_samples  	
      <<(all i~quantity whole in 1 ..num_samples 
      	  are spo2_a[i]'=(if MOTION_ARTIFACT^(1-i) or not SENSOR_CONNECTED^(1-i) then 0 u else SPO2^(1-i)))
         and (num_samples'=#PulseOx_Properties::Num_Trending_Samples)>> 
      };
 --   sptt4: loading,run-[on dispatch stop]->halt{};    
**};
end SpO2TrendThread.imp;

	
end SPT;