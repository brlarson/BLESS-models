package RD
public

	with BLESS, BLESS_Types, PulseOx_Types;


thread RapidDeclineThread
  features
    SpO2 : in data port PulseOx_Types::Percent  --oxygen saturation from pulse oximater device
      {BLESS::Value=>"<<:=SPO2>>";};
    SensorConnected : in data port BLESS_Types::Boolean  --sensor is attached to patient
      {BLESS::Assertion=>"<<SENSOR_CONNECTED>>";}; 
    MotionArtifact : in data port BLESS_Types::Boolean  -- indication of motion noise in sensor reading
      {BLESS::Assertion=>"<<MOTION_ARTIFACT>>";};  
    AdultRapidDeclineAlarmEnabled : in data port BLESS_Types::Boolean  -- enabled derived alarm for rapid SpO2 decline in adult patient 
      {BLESS::Assertion=>"<<ADULT_RAPID_DECLINE_ALARM_ENABLED>>";};  
    MaxSpO2Decline : in data port PulseOx_Types::Percent
      {BLESS::Value=>"<<:=MAX_SPO2_DECLINE>>";};
    AverageSpO2 : in data port PulseOx_Types::Percent
      {BLESS::Value=>"<<:=SPO2_AVERAGE()>>";};
    RapidSpO2DeclineAlarm : out event port	-- decreasing SpO2 in adult alarm
      {BLESS::Assertion=>"<<RAPID_DECLINE_ALARM()>>";}
      ; --that had higher SpO2	than the rapid decline %
  properties
    --Thread_Properties::
        Dispatch_Protocol => Periodic;  
    --Timing_Properties::
        Period => PulseOx_Properties::SpO2_Sampling_Period;
end RapidDeclineThread;

thread implementation RapidDeclineThread.imp
annex BLESS 
{**
  assert
    <<HOLD_RD:n~quantity whole:all s~quantity whole in 1 ..n --holds current values for SpO2; spo2[1]=SPO2^0
         are spo2[s]=SPO2^(1-s)>>
  invariant 
    <<SpO2_RD: :all s~quantity whole in 1 ..num_samples 
         are spo2[s]=SPO2^(-s)>>  
  variables
    nts~quantity whole := #PulseOx_Properties::Max_Window_Samples;
    spo2 ~  array [1 .. #PulseOx_Properties::Max_Window_Samples] of quantity percent;  --:=0;  --holds SpO2 history
    spo2_nxt ~ array [1 .. #PulseOx_Properties::Max_Window_Samples] of quantity percent; --:=0;  --temporary copy of trend for next output
    num_samples~quantity whole:=0;  --counts samples while filling      
  states
    start : initial state 
      <<(num_samples < #PulseOx_Properties::Max_Window_Samples) and (num_samples = 0)>>;
    fill : complete state  --loading spo2
      <<SpO2_RD() and (num_samples < #PulseOx_Properties::Max_Window_Samples)>>;    
    check : state  --check if full
      <<HOLD_RD(num_samples)>>;
    run : complete state    
      <<SpO2_RD() and (num_samples = #PulseOx_Properties::Max_Window_Samples)>>;    
    halt : final state;  
  transitions
    rdt0: start -[ ]-> fill{|spo2',num_samples':=spo2,num_samples|};
    rdt1: fill-[on dispatch]->check
    {
      <<SpO2_RD() and (num_samples < #PulseOx_Properties::Max_Window_Samples)>>
      forall i in 1 .. num_samples
        {
          <<spo2[i]=SPO2^(-i)>>
        spo2_nxt[i+1]:=spo2[i] --shift old samples
          <<spo2_nxt[i+1]=SPO2^(-i)>>
        }
      <<SHFT_RD: :all i~quantity whole in 1 ..num_samples 
         are spo2_nxt[i+1]=SPO2^(-i)>>
      ;  
          spo2_nxt[1] := SpO2
        <<(spo2_nxt[1]=SPO2^0) and
          (all i~quantity whole in 2 ..(num_samples+1) are spo2_nxt[i]=SPO2^(1-i))>>
      ;    
      num_samples:=num_samples+1  --increment count of samples
      <<all i~quantity whole in 1 ..num_samples are spo2_nxt[i]=SPO2^(1-i)>>
      ;
      forall i in 1 ..num_samples
        {
          <<spo2_nxt[i]=SPO2^(1-i)>>
        spo2[i]:=spo2_nxt[i] --copy back
          <<spo2[i]=SPO2^(1-i)>>
        }
      <<all i~quantity whole in 1 ..num_samples are spo2[i]=SPO2^(1-i)>>
      };
   chk: check -[num_samples < #PulseOx_Properties::Max_Window_Samples]-> fill
     {|spo2',num_samples':=spo2,num_samples|};  
   chk2: check -[num_samples = #PulseOx_Properties::Max_Window_Samples]-> run
     {|spo2',num_samples':=spo2,num_samples|}; 
   chk3: check -[num_samples > #PulseOx_Properties::Max_Window_Samples]-> halt{};
   
--  rdt1: run -[on dispatch]-> run
--    {
--    if
--    (AdultRapidDeclineAlarmEnabled? and SensorConnected? and not MotionArtifact?
--      and ((SpO2? + MaxSpO2Decline?) < AverageSpO2?))~> 
--        <<RAPID_DECLINE_ALARM()>>
--      RapidSpO2DeclineAlarm! 
--    []
--    (not (AdultRapidDeclineAlarmEnabled? and SensorConnected? and not MotionArtifact?
--      and ((SpO2? + MaxSpO2Decline?) < AverageSpO2?)) )~>
--      skip
--    fi
--    };
--  rdt2: run -[on dispatch stop]-> halt{};
**};
end RapidDeclineThread.imp;

	
end RD;