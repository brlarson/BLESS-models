# spt.ps
push
sort-by-component[SPT::SpO2TrendThread.imp]
#SPT::SpO2TrendThread.imp
#[serial 1019] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definitio
make-an
substitute-pre
normalize
tautologies
#[serial 1020] <<M(loading)>> -> <<I>> from invariant I when complete state loading has Assertion <<M(loading)>> in its definition.
substitute-pre
normalize
tautologies
#[serial 1021] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
tautologies
#[serial 1022] Serban's Theorem:  disjunction of execute conditions leaving execution state check, <<M(check)>> -> <<e1 or e2 or . . . en>>
normalize
laws
tautologies
#[serial 1023]  <<M(start)>> -> <<M(loading)>> for sptt0: start-[ ]->loading{};
split-post
tautologies
substitute-post
guided-sub-equals[num_samples]
normalize
laws
quant
tautologies
#[serial 1024]  <<M(loading) and x>> A <<M(check)>> for sptt1: loading-[x]->check{A};
reduce
push
#SPT::SpO2TrendThread.imp
#[serial 1112] <<P>> -> <<P1>> in sequential composition for [serial 102
make-an
dist^
normalize
tautologies
#[serial 1113] <<Q6>> -> <<Q>> in sequential composition for [serial 1024]
tautologies
#[serial 1114] <<P1>> S1 <<Q1 and P2>> in sequential composition for [serial 1024]
substitute-both
substitute-pre
atomic
normalize
alldist^
tautologies
#[serial 1115] <<Q1 and P2>> S2 <<Q2 and P3>> in sequential composition for [serial 1024]
reduce
atomic
tautologies
zeroquantlb
tautologies
replace-qv
tautologies
#[serial 1116] <<Q2 and P3>> S3 <<Q3 and P4>> in sequential composition for [serial 1024]
reduce
tautologies
push
#SPT::SpO2TrendThread.imp
#[serial 1151]   <<P>> -> <<B1 or B2 or ... or Bn>> in alternative for [serial 111
make-an
laws
tautologies
#[serial 1152]   <<P and B0>> -> <<P0>> in alternative for [serial 1116]
substitute-post
tautologies
#[serial 1153]   <<P0>> S0 <<Q0>> in alternative for [serial 1116]
substitute-both
atomic
split-post
tautologies
normalize
??
laws
tautologies
#[serial 1155]   <<P and B1>> -> <<P1>> in alternative for [serial 1116]
substitute-post
tautologies
#[serial 1156]   <<P1>> S1 <<Q1>> in alternative for [serial 1116]
atomic
split-post
tautologies
substitute-post
normalize
??
replace-port-value
now
laws
tautologies
#[serial 1117] <<Q3 and P4>> S4 <<Q4 and P5>> in sequential composition for [serial 1024]
atomic
normalize
substitute-both
substitute-pre
normalize
qtiming
tautologies
#[serial 1118] <<Q4 and P5>> S5 <<Q5 and P6>> in sequential composition for [serial 1024]
remove-axioms-post
substitute-post
reduce
tautologies
atomic
tautologies
laws
normalize
substitute-pre
normalize
tautologies
#[serial 1119] <<Q5 and P6>> S6 <<Q6>> in sequential composition for [serial 1024]
reduce
reduce
atomic
push
#SPT::SpO2TrendThread.imp
#[serial 1202] applied port output <<pre and (SpO2Trend=spo2_store)^0>> -> <<post>> [serial 120
make-an
substitute-both
substitute-post
laws
normalize
laws
replace-qv
tautologies
#[serial 1203] applied port output <<pre and (SpO2Trend=spo2_store)^0>> -> <<(SpO2Trend=SPO2_HISTORY)^0>> [serial 1200]
now
normalize
guided-sub-equals[SpO2Trend]
substitute-pre
laws
laws
guided-sub-equals[SPO2_HISTORY]
laws
tautologies
#[serial 1204] applied port output <<pre and (NumSamples=num_samples)^0>> -> <<post>> [serial 1201]
substitute-post
substitute-both
normalize
replace-qv
laws
tautologies
#[serial 1205] applied port output <<pre and (NumSamples=num_samples)^0>> -> <<(NumSamples=NUM_SAMPLES)^0>> [serial 1201]
now
guided-sub-equals[NumSamples]
substitute-pre
laws
laws
guided-sub-equals[NUM_SAMPLES]
laws
tautologies
#[serial 1025]  <<M(check) and x>> -> <<M(loading)>> for sptt2a: check-[x]->loading{};
substitute-both
normalize
tautologies
#[serial 1026]  <<M(check) and x>> -> <<M(run)>> for sptt2b: check-[x]->run{};
substitute-both
normalize
tautologies
#[serial 1027]  <<M(check) and x>> -> <<M(fail)>> for sptt2c: check-[x]->fail{};
tautologies
#[serial 1028]  <<M(run) and x>> A <<M(run)>> for sptt3: run-[x]->run{A};
reduce
push
#SPT::SpO2TrendThread.imp
#[serial 1241] <<P>> -> <<P1>> in sequential composition for [serial 102
make-an
remove-axioms-post
laws
normalize
tautologies
#[serial 1242] <<Q6>> -> <<Q>> in sequential composition for [serial 1028]
substitute-both
tautologies
#[serial 1243] <<P1>> S1 <<Q1 and P2>> in sequential composition for [serial 1028]
substitute-both
substitute-pre
atomic
laws
alldist^
tautologies
#[serial 1244] <<Q1 and P2>> S2 <<Q2 and P3>> in sequential composition for [serial 1028]
reduce
atomic
tautologies
zeroquantlb
tautologies
replace-qv
tautologies
#[serial 1245] <<Q2 and P3>> S3 <<Q3 and P4>> in sequential composition for [serial 1028]
reduce
push
#SPT::SpO2TrendThread.imp
#[serial 1281]   <<P>> -> <<B1 or B2 or ... or Bn>> in alternative for [serial 124
make-an
laws
tautologies
#[serial 1282]   <<P and B0>> -> <<P0>> in alternative for [serial 1245]
substitute-post
tautologies
#[serial 1283]   <<P0>> S0 <<Q0>> in alternative for [serial 1245]
substitute-both
atomic
split-post
tautologies
normalize
??
laws
tautologies
#[serial 1284]   <<Q0>> -> <<Q>> in alternative  for [serial 1245]
remove-axioms-post
laws
tautologies
#[serial 1285]   <<P and B1>> -> <<P1>> in alternative for [serial 1245]
substitute-post
tautologies
#[serial 1286]   <<P1>> S1 <<Q1>> in alternative for [serial 1245]
atomic
split-post
tautologies
substitute-post
normalize
??
replace-port-value
now
laws
tautologies
#[serial 1287]   <<Q1>> -> <<Q>> in alternative  for [serial 1245]
remove-axioms-post
laws
tautologies
#[serial 1246] <<Q3 and P4>> S4 <<Q4 and P5>> in sequential composition for [serial 1028]
atomic
substitute-pre
normalize
substitute-both
normalize
qtiming
contract-uqr
tautologies
#[serial 1247] <<Q4 and P5>> S5 <<Q5 and P6>> in sequential composition for [serial 1028]
remove-axioms-post
substitute-post
reduce
tautologies
atomic
tautologies
laws
normalize
substitute-pre
normalize
tautologies
#[serial 1248] <<Q5 and P6>> S6 <<Q6>> in sequential composition for [serial 1028]
reduce
reduce
atomic
push
#SPT::SpO2TrendThread.imp
#[serial 1337] applied port output <<pre and (SpO2Trend=spo2_store)^0>> -> <<post>> [serial 133
make-an
substitute-both
substitute-post
laws
normalize
laws
replace-qv
tautologies
#[serial 1338] applied port output <<pre and (SpO2Trend=spo2_store)^0>> -> <<(SpO2Trend=SPO2_HISTORY)^0>> [serial 1335]
now
normalize
guided-sub-equals[SpO2Trend]
substitute-pre
laws
laws
guided-sub-equals[SPO2_HISTORY]
laws
tautologies
#[serial 1339] applied port output <<pre and (NumSamples=num_samples)^0>> -> <<post>> [serial 1336]
substitute-post
substitute-both
normalize
laws
laws
replace-qv
tautologies
#[serial 1340] applied port output <<pre and (NumSamples=num_samples)^0>> -> <<(NumSamples=NUM_SAMPLES)^0>> [serial 1336]
now
substitute-pre
laws
laws
normalize
guided-sub-equals[NUM_SAMPLES]
guided-sub-equals[NumSamples]
laws
tautologies