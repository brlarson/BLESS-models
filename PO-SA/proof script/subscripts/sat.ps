#This file, script.txt, was produced the BLESS Proof Assistant v3.2.0
#  at Tue Aug 22 10:37:29 CDT 2023 by brianlarson
#  You chose proof script: /Users/brianlarson/git/BLESS-models/PO-SA/proof script/subscripts/sat.ps
push
sort-by-component SPA::SpO2AverageThread.imp
#SPA::SpO2AverageThread.imp
#[serial 1048] <<M(fillingWindow)>> -> <<I>> from invariant I when complete state fillingWindow has Assertion <<M(fillingWindow)>> in its definitio
make-an
substitute-pre
normalize
axioms
#[serial 1049] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
substitute-pre
normalize
axioms
#[serial 1050] Serban's Theorem:  disjunction of execute conditions leaving execution state chooseToRun, <<M(chooseToRun)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1051] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
normalize
replace<=
laws
axioms
#[serial 1052]  <<M(start) and x>> A <<M(fillingWindow)>> for SpAT0: start-[x]->fillingWindow{A};
completesub
laws
alldist^
atomic
split-post
axioms
normalize
guided-sub-equals[lb]
guided-sub-equals[ub]
normalize
laws
quant
axioms
normalize
remove-units
remove-units
axioms
#[serial 1053]  <<M(start) and x>> A <<M(fail)>> for SpAT0a: start-[x]->fail{A};
atomic
axioms
#[serial 1054]  <<M(fillingWindow) and x>> A <<M(chooseToRun)>> for SpAT1: fillingWindow-[x]->chooseToRun{A};
reduce
reduce
reduce
atomic
normalize
laws
normalize
axioms
push
#SPA::SpO2AverageThread.imp
#[serial 1273]   normalization of [serial 125
make-an
substitute-both
normalize
split-post
axioms
substitute-post
normalize
laws
axioms
#[serial 1278]   normalization of [serial 1262]
split-post
push
#SPA::SpO2AverageThread.imp
#[serial 1320] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 127
make-an
substitute-post
normalize
now
substitute-pre
substitute-pre
normalize
qtiming
axioms
#[serial 1321] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1278]
normalize
substitute-pre
substitute-pre
normalize
qtiming
axioms
#[serial 1322] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1278]
substitute-pre
substitute-pre
normalize
qtiming
remove-units
remove-units
qtiming
axioms
#[serial 1323] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1278]
substitute-post
substitute-pre
substitute-pre
normalize
qtiming
qtiming
axioms
#[serial 1280]   normalization of [serial 1267]
substitute-both
substitute-pre
substitute-pre
normalize
laws
normalize
split-post
axioms
replace-port
now
remove-units
remove-units
replace-port-value
laws
axioms
#[serial 1282]   normalization of [serial 1268]
substitute-post
normalize
replace-port
replace-port-value
remove-units
remove-units
now
laws
normalize
substitute-pre
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
remove-units
remove-units
axioms
#[serial 1284]   normalization of [serial 1269]
replace-port
now
laws
normalize
substitute-pre
substitute-pre
substitute-pre
laws
normalize
axioms
#[serial 1286]   normalization of [serial 1270]
replace-port
now
laws
normalize
laws
normalize
substitute-pre
substitute-pre
laws
normalize
axioms
#[serial 1055]  <<M(chooseToRun) and x>> A <<M(fillingWindow)>> for SpAT2: chooseToRun-[x]->fillingWindow{A};
completesub
laws
normalize
alldist^
atomic
axioms
#[serial 1056]  <<M(chooseToRun) and x>> A <<M(run)>> for SpAT3: chooseToRun-[x]->run{A};
completesub
laws
alldist^
atomic
axioms
#[serial 1057]  <<M(chooseToRun) and x>> A <<M(fail)>> for SpAT3a: chooseToRun-[x]->fail{A};
atomic
axioms
#[serial 1058]  <<M(run) and x>> A <<M(run)>> for SpAt4: run-[x]->run{A};
reduce
reduce
reduce
remove-axioms-post
normalize
laws
normalize
axioms
substitute-both
normalize
laws
normalize
push
#SPA::SpO2AverageThread.imp
#[serial 1567]   normalization of [serial 153
make-an
atomic
normalize
qtiming
sub-equals
qtiming
sub-equals
qtiming
qtiming
laws
axioms
#[serial 1649]   normalization of [serial 1632]
atomic
axioms
#[serial 1653]   normalization of [serial 1634]
replace<=
normalize
laws
axioms
#[serial 1665]   normalization of [serial 1640]
split-post
axioms
qtiming
axioms
qtiming
axioms
qtiming
axioms
contract-uqr
axioms
#[serial 1667]   normalization of [serial 1641]
atomic
normalize
laws
normalize
axioms
#[serial 1669]   normalization of [serial 1642]
atomic
normalize
split-post
axioms
guided-sub-equals[spo2_hist[lb mod #PulseOx_Properties::Max_Window_Samples]]
normalize
elim-subtract
normalize
laws
normalize
guided-sub-equals[totalSpO2]
elim-subtract
normalize
laws
axioms
#[serial 1671]   normalization of [serial 1643]
atomic
normalize
laws
normalize
laws
normalize
axioms
#[serial 1675]   normalization of [serial 1645]
atomic
normalize
laws
normalize
axioms
#[serial 1677]   normalization of [serial 1646]
atomic
normalize
axioms
#[serial 1710]   normalization of [serial 1693]
split-post
axioms
substitute-post
normalize
axioms
#[serial 1712]   normalization of [serial 1694]
atomic
laws
axioms
normalize
replaceNEwithLTorGT
normalize
axioms
substitute-pre
substitute-pre
substitute-pre
laws
normalize
now
guided-sub-equals[SpO2Avg]
guided-sub-equals[totalSpO2]
guided-sub-equals[goodCount]
normalize
axioms
#[serial 1714]   normalization of [serial 1695]
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
contract-uqr
axioms
#[serial 1716]   normalization of [serial 1696]
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
split-post
axioms
qtiming
axioms
#[serial 1718]   normalization of [serial 1697]
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
split-post
normalize
qtiming
axioms
#[serial 1720]   normalization of [serial 1698]
substitute-pre
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1722]   normalization of [serial 1699]
completesub
alldist^
axioms