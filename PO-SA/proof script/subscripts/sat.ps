#sat.ps
push
sort-by-component SPA::SpO2AverageThread.imp
#[serial 1009] <<M(fillingWindow)>> -> <<I>> from invariant I when complete state fillingWindow has Assertion <<M(fillingWindow)>> in its definition
make-an
substitute-pre
laws
normalize
axioms
#[serial 1010] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
substitute-pre
laws
normalize
axioms
#[serial 1011] Serban's Theorem:  disjunction of execute conditions leaving execution state chooseToRun, <<M(chooseToRun)>> -> <<e1 or e2 or . . . en>>
laws
axioms
#[serial 1012] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
replace<=
normalize
laws
axioms
#[serial 1013]  <<M(start) and x>> A <<M(fillingWindow)>> for SpAT0:start-[x]->fillingWindow{A};
completesub
laws
alldist^
atomic
split-post
axioms
normalize
guided-sub-equals[lb]
guided-sub-equals[ub]
normalize
laws
quant
axioms
normalize
axioms
#[serial 1014]  <<M(start) and x>> A <<M(fail)>> for SpAT0a:start-[x]->fail{A};
atomic
axioms
#[serial 1015]  <<M(fillingWindow) and x>> A <<M(chooseToRun)>> for SpAT1:fillingWindow-[x]->chooseToRun{A};
reduce
reduce
reduce
atomic
normalize
laws
normalize
axioms
laws
normalize
push
#[serial 1228] P -> P1 in sequential composition for [serial 1015
make-an
substitute-both
normalize
split-post
axioms
substitute-post
normalize
laws
axioms
#[serial 1248]   normalization of [serial 1234]
split-post
normalize
push
#[serial 1303] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1248
make-an
qtiming
axioms
#[serial 1304] Sequent Composition: if A->B and A->C and A->D then A->(B and C and D) [serial 1248]
qtiming
axioms
#[serial 1310]   normalization of [serial 1305]
substitute-pre
normalize
qtiming
axioms
#[serial 1312]   normalization of [serial 1306]
substitute-pre
normalize
qtiming
axioms
#[serial 1250]   normalization of [serial 1239]
substitute-both
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1252]   normalization of [serial 1240]
qtiming
axioms
#[serial 1275]   normalization of [serial 1265]
substitute-pre
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1290]   normalization of [serial 1283]
substitute-post
substitute-pre
substitute-pre
substitute-pre
normalize
laws
axioms
#[serial 1016]  <<M(chooseToRun) and x>> A <<M(fillingWindow)>> for SpAT2:chooseToRun-[x]->fillingWindow{A};
completesub
laws
alldist^
atomic
normalize
axioms
#[serial 1017]  <<M(chooseToRun) and x>> A <<M(run)>> for SpAT3:chooseToRun-[x]->run{A};
completesub
laws
normalize
alldist^
atomic
normalize
axioms
#[serial 1018]  <<M(chooseToRun) and x>> A <<M(fail)>> for SpAT3a:chooseToRun-[x]->fail{A};
atomic
axioms
#[serial 1019]  <<M(run) and x>> A <<M(run)>> for SpAt4:run-[x]->run{A};
reduce
reduce
reduce
remove-axioms-post
normalize
laws
normalize
axioms
substitute-both
laws
normalize
push
#[serial 1472] <<P3>> S3 <<Q3>> in concurrent composition for [serial 1464
make-an
atomic
normalize
qtiming
sub-equals
qtiming
sub-equals
qtiming
laws
axioms
#[serial 1571]   normalization of [serial 1549]
atomic
axioms
#[serial 1573]   normalization of [serial 1554]
atomic
normalize
laws
normalize
axioms
#[serial 1575]   normalization of [serial 1555]
atomic
normalize
split-post
axioms
qtiming
axioms
#[serial 1577]   normalization of [serial 1556]
substitute-both
replace<=
normalize
laws
axioms
#[serial 1579]   normalization of [serial 1557]
qtiming
axioms
#[serial 1581]   normalization of [serial 1559]
atomic
normalize
laws
normalize
laws
normalize
axioms
#[serial 1583]   normalization of [serial 1560]
atomic
normalize
laws
normalize
axioms
#[serial 1585]   normalization of [serial 1561]
atomic
normalize
axioms
#[serial 1587]   normalization of [serial 1562]
split-post
axioms
substitute-post
normalize
axioms
#[serial 1589]   normalization of [serial 1563]
atomic
normalize
laws
normalize
axioms
replaceNEwithLTorGT
normalize
axioms
now
guided-sub-equals[SpO2Avg]
substitute-pre
substitute-pre
normalize
laws
normalize
guided-sub-equals[totalSpO2]
guided-sub-equals[goodCount]
normalize
substitute-both
normalize
axioms
#[serial 1591]   normalization of [serial 1564]
substitute-pre
substitute-pre
normalize
laws
normalize
contract-uqr
substitute-pre
normalize
axioms
#[serial 1593]   normalization of [serial 1565]
completesub
laws
normalize
qtiming
axioms
#[serial 1595]   normalization of [serial 1566]
qtiming
completesub
laws
normalize
split-post
axioms
normalize
qtiming
axioms
#[serial 1597]   normalization of [serial 1567]
completesub
laws
axioms
#[serial 1599]   normalization of [serial 1568]
completesub
alldist^
axioms
#[serial 1020]  <<M(fillingWindow) and x>> -> <<M(halt)>> for SpATstop:fillingWindow-[x]->halt{};
axioms
#[serial 1021]  <<M(run) and x>> -> <<M(halt)>> for SpATstop:run-[x]->halt{};
axioms