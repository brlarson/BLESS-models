#This file, script.txt, was produced the BLESS Proof Assistant v3.1
#  at Fri Jan 08 20:07:23 CST 2021 by brianlarson
#  You chose proof script: /Users/brianlarson/Work/BLESS-2020/PO-SA/proof script/proof script (PO.aadl)
push
sort-by-component PO::SpO2AverageThread.imp
#PO::SpO2AverageThread.imp
#[serial 1029] <<M(fillingWindow)>> -> <<I>> from invariant I when complete state fillingWindow has Assertion <<M(fillingWindow)>> in its definition
make-an
substitute-pre
laws
#[serial 1030] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
axioms
substitute-pre
laws
#[serial 1031] Serban's Theorem:  disjunction of execute conditions leaving execution state chooseToRun, <<M(chooseToRun)>> -> <<e1 or e2 or . . . en>>
axioms
normalize
laws
#[serial 1032] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
normalize
replace<=
laws
#[serial 1033]  <<M(start) and x>> A <<M(fillingWindow)>> for SpAT0:start-[x]->fillingWindow{A};
axioms
normalize
substitute-both
normalize
substitute-both
substitute-both
alldist^
atomic
laws
sub-all-eq
normalize
laws
quant
normalize
laws
normalize
sub-equals-and
normalize
sub-equals-and
axioms
#[serial 1034]  <<M(start) and x>> A <<M(fail)>> for SpAT0a:start-[x]->fail{A};
atomic
axioms
stop******
#[serial 1035]  <<M(fillingWindow) and x>> A <<M(chooseToRun)>> for SpAT1:fillingWindow-[x]->chooseToRun{A};
reduce
reduce
reduce
atomic
normalize
laws
normalize
axioms
completesub
laws
normalize
axioms
qtiming
axioms
#[serial 1036]  <<M(chooseToRun) and x>> A <<M(fillingWindow)>> for SpAT2:chooseToRun-[x]->fillingWindow{A};
completesub
alldist^
laws
atomic
normalize
axioms
#[serial 1037]  <<M(chooseToRun) and x>> A <<M(run)>> for SpAT3:chooseToRun-[x]->run{A};
completesub
alldist^
laws
normalize
atomic
normalize
axioms
#[serial 1038]  <<M(chooseToRun) and x>> A <<M(fail)>> for SpAT3a:chooseToRun-[x]->fail{A};
atomic
axioms
#[serial 1039]  <<M(run) and x>> A <<M(run)>> for SpAt4:run-[x]->run{A};
reduce
reduce
reduce
remove-axioms-post
normalize
laws
normalize
axioms
substitute-both
laws
normalize
push
#PO::SpO2AverageThread.imp
#[serial 1523]   normalization of [serial 1491
make-an
atomic
normalize
qtiming
sub-equals
qtiming
sub-equals
qtiming
laws
axioms
#[serial 1610]   normalization of [serial 1586]
atomic
axioms
#[serial 1612]   normalization of [serial 1588]
replace<=
normalize
laws
axioms
#[serial 1614]   normalization of [serial 1594]
qtiming
axioms
#[serial 1616]   normalization of [serial 1595]
atomic
normalize
laws
normalize
axioms
#[serial 1618]   normalization of [serial 1596]
atomic
normalize
guided-sub-equals[totalSpO2]
normalize
laws
normalize
qtiming
axioms
#[serial 1620]   normalization of [serial 1598]
atomic
normalize
laws
normalize
laws
normalize
axioms
#[serial 1622]   normalization of [serial 1599]
atomic
normalize
laws
normalize
axioms
#[serial 1624]   normalization of [serial 1600]
atomic
normalize
axioms
#[serial 1626]   normalization of [serial 1601]
substitute-post
laws
normalize
axioms
#[serial 1628]   normalization of [serial 1602]
atomic
normalize
laws
normalize
axioms
replaceNEwithLTorGT
normalize
axioms
substitute-pre
substitute-pre
laws
normalize
substitute-pre
now
sub-equals
guided-sub-equals[totalSpO2]
guided-sub-equals[goodCount]
normalize
replace-qv
sub-equals
laws
axioms
#[serial 1630]   normalization of [serial 1603]
completesub
contract-uqr
laws
axioms
#[serial 1632]   normalization of [serial 1604]
substitute-pre
substitute-pre
normalize
laws
normalize
qtiming
axioms
#[serial 1634]   normalization of [serial 1605]
substitute-pre
substitute-pre
normalize
laws
normalize
split-post
normalize
qtiming
axioms
#[serial 1636]   normalization of [serial 1606]
substitute-pre
substitute-pre
normalize
laws
normalize
axioms
#[serial 1638]   normalization of [serial 1607]
completesub
alldist^
axioms
#[serial 1040]  <<M(fillingWindow) and x>> -> <<M(halt)>> for SpATstop:fillingWindow-[x]->halt{};
axioms
#[serial 1041]  <<M(run) and x>> -> <<M(halt)>> for SpATstop:run-[x]->halt{};
axioms
#[serial 1003] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
push
sort-by-component PO::HeartRateTrendThread.imp
#PO::HeartRateTrendThread.imp
#[serial 1016] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition
make-an
substitute-pre
axioms
#[serial 1017] <<M(fill)>> -> <<I>> from invariant I when complete state fill has Assertion <<M(fill)>> in its definition.
substitute-pre
axioms
#[serial 1018] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1019] Serban's Theorem:  disjunction of execute conditions leaving execution state check, <<M(check)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1020]  <<M(start)>> A <<M(fill)>> for hrtt0:start-[ ]->fill{A};
normalize
completesub
alldist^
atomic
split-post
axioms
sub-equals
laws
quant
axioms
guided-sub-equals[num_samples]
laws
quant
normalize
axioms
#[serial 1021]  <<M(fill) and x>> A <<M(check)>> for hrtt1:fill-[x]->check{A};
normalize
substitute-both
normalize
reduce
substitute-both
reduce
substitute-both
push
#PO::HeartRateTrendThread.imp
#[serial 1919] Q5 -> Q in sequential composition for [serial 1916
make-an
replace-qv
axioms
#[serial 1930]   <<P>> -> <<B1 or B2 or ... or Bn>>  in if-[]-fi  for [serial 1923]
normalize
laws
axioms
#[serial 1924] <<Q3 and P4>> S4 <<Q4 and P5>> in sequential composition for [serial 1916]
atomic
normalize
qtiming
axioms
#[serial 1938]   <<P and (x=e) and FAT>> -> <<wp(forall,Q)>>
normalize
axioms
#[serial 1937] <<A>> T <<B>> as subject for universal lattice quantification by [serial 1925]
atomic
normalize
axioms
#[serial 1926] substituted Assertions' predicates for  labels  [serial 1918]
normalize
axioms
#[serial 1927] substituted Assertions' predicates for  labels  [serial 1920]
atomic
laws
axioms
#[serial 1928] substituted Assertions' predicates for  labels  [serial 1921]
atomic
now
laws
axioms
#[serial 1940]   <<P and (x=e) and FAT>> -> <<wp(forall,Q)>>
normalize
replace-qv
axioms
#[serial 1939] <<A>> T <<B>> as subject for universal lattice quantification by [serial 1929]
atomic
normalize
axioms
#[serial 1941] substituted Assertions' predicates for  labels  [serial 1931]
normalize
axioms
#[serial 1942] substituted Assertions' predicates for  labels  [serial 1932]
atomic
??
laws
normalize
axioms
#[serial 1943] substituted Assertions' predicates for  labels  [serial 1933]
normalize
qtiming
zeroquantlb
normalize
axioms
#[serial 1944] substituted Assertions' predicates for  labels  [serial 1934]
normalize
axioms
#[serial 1945] substituted Assertions' predicates for  labels  [serial 1935]
atomic
normalize
??
laws
normalize
axioms
#[serial 1946] substituted Assertions' predicates for  labels  [serial 1936]
normalize
zeroquantlb
normalize
elim-subtract
normalize
laws
normalize
axioms
#[serial 1022]  <<M(check) and x>> A <<M(fill)>> for hrtt2a:check-[x]->fill{A};
completesub
alldist^
atomic
normalize
axioms
#[serial 1023]  <<M(check) and x>> A <<M(run)>> for hrtt2b:check-[x]->run{A};
completesub
alldist^
atomic
normalize
axioms
#[serial 1024]  <<M(check) and x>> -> <<M(fail)>> for hrtt2c:check-[x]->fail{};
axioms
#[serial 1025]  <<M(run) and x>> A <<M(run)>> for hrtt3:run-[x]->run{A};
reduce
remove-axioms-post
substitute-both
reduce
substitute-both
push
#PO::HeartRateTrendThread.imp
#[serial 2117]   <<P>> -> <<B1 or B2 or ... or Bn>>  in if-[]-fi  for [serial 2108
make-an
laws
axioms
#[serial 2125]   <<P and (x=e) and FAT>> -> <<wp(forall,Q)>>
qtiming
axioms
#[serial 2124] <<A>> T <<B>> as subject for universal lattice quantification by [serial 2109]
atomic
normalize
axioms
#[serial 2110] <<Q4 and P5>> S5 <<Q5>> in sequential composition for [serial 1025]
atomic
axioms
#[serial 2112] substituted Assertions' predicates for  labels  [serial 2103]
normalize
replace-qv
axioms
#[serial 2113] substituted Assertions' predicates for  labels  [serial 2104]
alldist^
replace-qv
axioms
#[serial 2114] substituted Assertions' predicates for  labels  [serial 2105]
atomic
normalize
axioms
#[serial 2127]   <<P and (x=e) and FAT>> -> <<wp(forall,Q)>>
normalize
replace-qv
zeroquantlb
normalize
contract-uqr
axioms
#[serial 2126] <<A>> T <<B>> as subject for universal lattice quantification by [serial 2115]
atomic
normalize
axioms
#[serial 2116] substituted Assertions' predicates for  labels  [serial 2111]
atomic
normalize
laws
axioms
#[serial 2128] substituted Assertions' predicates for  labels  [serial 2118]
now
axioms
#[serial 2129] substituted Assertions' predicates for  labels  [serial 2119]
atomic
??
laws
normalize
axioms
#[serial 2130] substituted Assertions' predicates for  labels  [serial 2120]
normalize
zeroquantlb
normalize
elim-subtract
normalize
laws
normalize
axioms
#[serial 2131] substituted Assertions' predicates for  labels  [serial 2121]
normalize
axioms
#[serial 2132] substituted Assertions' predicates for  labels  [serial 2122]
atomic
normalize
??
laws
normalize
axioms
#[serial 2133] substituted Assertions' predicates for  labels  [serial 2123]
normalize
laws
split-post
axioms
zeroquantlb
normalize
laws
elim-subtract
normalize
axioms
#[serial 1026]  <<M(fill) and x>> -> <<M(halt)>> for hrtt4:fill-[x]->halt{};
axioms
#[serial 1027]  <<M(run) and x>> -> <<M(halt)>> for hrtt4:run-[x]->halt{};
axioms
#[serial 1003] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
push
sort-by-component PO::RapidDeclineThread.imp
#PO::RapidDeclineThread.imp
#[serial 1043] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition
make-an
completesub
axioms
#[serial 1044] <<M(fill)>> -> <<I>> from invariant I when complete state fill has Assertion <<M(fill)>> in its definition.
completesub
axioms
#[serial 1045] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1046] Serban's Theorem:  disjunction of execute conditions leaving execution state check, <<M(check)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1047]  <<M(start)>> A <<M(fill)>> for rdt0:start-[ ]->fill{A};
substitute-both
alldist^
guided-sub-equals[num_samples]
laws
quant
normalize
sub-equals-and
laws
normalize
reduce
atomic
axioms
#[serial 1048]  <<M(fill) and x>> A <<M(check)>> for rdt1:fill-[x]->check{A};
reduce
normalize
reduce
normalize
axioms
atomic
normalize
axioms
qtiming
axioms
completesub
laws
normalize
replace-qv
axioms
zeroquantlb
normalize
elim-subtract
normalize
laws
normalize
axioms
#[serial 1049]  <<M(check) and x>> A <<M(fill)>> for chk:check-[x]->fill{A};
completesub
alldist^
atomic
axioms
#[serial 1050]  <<M(check) and x>> A <<M(run)>> for chk2:check-[x]->run{A};
completesub
alldist^
atomic
axioms
#[serial 1051]  <<M(check) and x>> -> <<M(halt)>> for chk3:check-[x]->halt{};
axioms
#[serial 1003] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
push
sort-by-component PP::SpO2TrendThread.imp
#PO::SpO2TrendThread.imp
#[serial 1003] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition
make-an
substitute-pre
axioms
#[serial 1004] <<M(fill)>> -> <<I>> from invariant I when complete state fill has Assertion <<M(fill)>> in its definition.
substitute-pre
axioms
#[serial 1005] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1006] Serban's Theorem:  disjunction of execute conditions leaving execution state check, <<M(check)>> -> <<e1 or e2 or . . . en>>
normalize
laws
axioms
#[serial 1007]  <<M(start)>> -> <<M(fill)>> for sptt0:start-[ ]->fill{};
substitute-both
alldist^
guided-sub-equals[num_samples]
laws
quant
normalize
sub-equals-and
normalize
laws
normalize
axioms
#[serial 1008]  <<M(fill) and x>> A <<M(check)>> for sptt1:fill-[x]->check{A};
reduce
substitute-both
reduce
substitute-both
atomic
normalize
laws
axioms
qtiming
axioms
zeroquantlb
laws
normalize
axioms
??
now
laws
axioms
replace-qv
axioms
#[serial 1009]  <<M(check) and x>> A <<M(fill)>> for sptt2a:check-[x]->fill{A};
completesub
alldist^
atomic
normalize
axioms
#[serial 1010]  <<M(check) and x>> A <<M(run)>> for sptt2b:check-[x]->run{A};
completesub
alldist^
atomic
normalize
axioms
#[serial 1011]  <<M(check) and x>> -> <<M(fail)>> for sptt2c:check-[x]->fail{};
axioms
#[serial 1012]  <<M(run) and x>> A <<M(run)>> for sptt3:run-[x]->run{A};
reduce
remove-axioms-post
substitute-both
reduce
substitute-both
normalize
laws
normalize
axioms
push
#PO::SpO2TrendThread.imp
#[serial 2726]   normalization of [serial 2714
make-an
qtiming
axioms
#[serial 2728]   normalization of [serial 2713]
atomic
normalize
axioms
#[serial 2730]   normalization of [serial 2699]
atomic
alldist^
replace-qv
axioms
#[serial 2734]   normalization of [serial 2702]
replace-qv
alldist^
axioms
#[serial 2736]   normalization of [serial 2703]
atomic
normalize
axioms
#[serial 2738]   normalization of [serial 2716]
replace-qv
zeroquantlb
normalize
contract-uqr
axioms
#[serial 2740]   normalization of [serial 2715]
atomic
normalize
axioms
#[serial 2772] Law of And-Simplification:  P and true is P [serial 2742]
atomic
now
axioms
#[serial 2791]   normalization of [serial 2774]
atomic
??
laws
axioms
#[serial 2793]   normalization of [serial 2775]
split-post
axioms
zeroquantlb
normalize
laws
normalize
elim-subtract
normalize
axioms
#[serial 2797]   normalization of [serial 2777]
atomic
normalize
??
laws
axioms
#[serial 2799]   normalization of [serial 2778]
split-post
normalize
axioms
zeroquantlb
elim-subtract
normalize
laws
normalize
axioms
#[serial 1013]  <<M(fill) and x>> -> <<M(halt)>> for sptt4:fill-[x]->halt{};
axioms
#[serial 1014]  <<M(run) and x>> -> <<M(halt)>> for sptt4:run-[x]->halt{};
axioms
#[serial 1053] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
axioms
#[serial 1054] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1055] Serban's Theorem:  disjunction of execute conditions leaving execution state check, <<M(check)>> -> <<e1 or e2 or . . . en>>
normalize
laws
replace<=
normalize
cnf
laws
normalize
axioms
#[serial 1056]  <<M(start)>> -> <<M(run)>> for so0:start-[ ]->run{};
normalize
axioms
#[serial 1057]  <<M(run) and x>> -> <<M(check)>> for so1:run-[x]->check{};
axioms
#[serial 1058]  <<M(check) and x>> A <<M(run)>> for so2:check-[x]->run{A};
reduce
atomic
normalize
completesub
axioms
#[serial 1059]  <<M(check) and x>> -> <<M(run)>> for so3:check-[x]->run{};
normalize
axioms
#[serial 1060]  <<M(run) and x>> -> <<M(halt)>> for so4:run-[x]->halt{};
axioms
#[serial 1062] <<M(run)>> -> <<I>> from invariant I when complete state run has Assertion <<M(run)>> in its definition.
completesub
axioms
#[serial 1063] Serban's Theorem:  disjunction of execute conditions leaving execution state start, <<M(start)>> -> <<e1 or e2 or . . . en>>
axioms
#[serial 1064]  <<M(start)>> -> <<M(run)>> for mat0:start-[ ]->run{};
completesub
alldist^
sub-equals
laws
quant
axioms
#[serial 1065]  <<M(run) and x>> A <<M(run)>> for mat1:run-[x]->run{A};
reduce
reduce
axioms
atomic
normalize
laws
normalize
axioms
push
#PO::MotionArtifactThread.imp
#[serial 2994] Q1 -> Q in sequential composition for [serial 1065
make-an
completesub
alldist^
zeroquantlb
elim-subtract
normalize
axioms
#[serial 2999]   <<P0>> S0 <<Q0>>  for [serial 2995]
completesub
atomic
normalize
laws
quant
axioms
#[serial 3018]   normalization of [serial 3001]
completesub
qtiming
axioms
#[serial 3020]   normalization of [serial 3002]
completesub
atomic
normalize
axioms
#[serial 3022]   normalization of [serial 3004]
replace<=
normalize
laws
axioms
#[serial 3027]   normalization of [serial 3012]
completesub
contract-uqr
axioms
#[serial 3036] Associativity: (b.c).a = a.b.c [serial 2997]
cnf
laws
normalize
axioms
#[serial 1066]  <<M(run) and x>> -> <<M(halt)>> for mat2:run-[x]->halt{};
axioms
#[serial 1067] Composition of Subcomponents via Directional Connection PO::ICEpoSystem.imp.heart_rate_lower_limit_violated:
axioms
#[serial 1068] Composition of Subcomponents via Directional Connection PO::ICEpoSystem.imp.heart_rate_upper_limit_violated:
axioms
#[serial 1069] Composition of Subcomponents via Directional Connection PO::ICEpoSystem.imp.heart_rate_trend:
axioms
#[serial 1070] Composition of Subcomponents via Directional Connection PO::ICEpoSystem.imp.supplemental_oxygen_alarm:
axioms
#[serial 1071] Composition of Subcomponents via Directional Connection PO::ICEpoSystem.imp.rapid_spo2_decline_alarm:
axioms
#[serial 1072] Composition of Subcomponents via Directional Connection PO::ICEpoSystem.imp.motion_artifact_alarm:
axioms
#[serial 1073] Composition of Subcomponents via Directional Connection PO::ICEpoSystem.imp.spO2_Trend:
axioms
#[serial 1074] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_spo2_llv:
axioms
#[serial 1075] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_heartrate_llv:
axioms
#[serial 1076] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_heartrate_ulv:
axioms
#[serial 1077] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_heartrate_trend:
axioms
#[serial 1078] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_spo2derived_lla:
axioms
#[serial 1079] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_spo2avg:
axioms
#[serial 1080] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_rapiddeclinealarm:
axioms
#[serial 1081] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_motionartifactalarm:
axioms
#[serial 1082] Composition of Subcomponents via Directional Connection PO::ICEpoUIprocess.imp.ui_spo2trend:
axioms
#[serial 1083] Composition of Subcomponents via Directional Connection PO::ICEpoAppProcess.imp.ap_heartrate_trend:
axioms
#[serial 1084] Composition of Subcomponents via Directional Connection PO::ICEpoAppProcess.imp.ap_maa:
axioms
#[serial 1085] Composition of Subcomponents via Directional Connection PO::ICEpoAppProcess.imp.ap_spo2derived_lla:
axioms
#[serial 1086] Composition of Subcomponents via Directional Connection PO::ICEpoAppProcess.imp.ap_rda:
axioms
#[serial 1087] Composition of Subcomponents via Directional Connection PO::ICEpoAppProcess.imp.ap_spo2trend:
axioms
#[serial 1088] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.maa:
axioms
#[serial 1089] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.avout:
axioms
#[serial 1090] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.avso:
axioms
#[serial 1091] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.soalarm:
axioms
#[serial 1092] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.rdalarm:
axioms
#[serial 1093] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.sptrend:
completesub
axioms
#[serial 1094] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.hrtr:
completesub
axioms
#[serial 1095] Composition of Subcomponents via Directional Connection PO::ICEpoApp.imp.new_connection2:
axioms